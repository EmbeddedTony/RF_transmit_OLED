
rflibtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c98  08005774  08005774  00015774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800640c  0800640c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800640c  0800640c  0001640c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006414  08006414  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006414  08006414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006418  08006418  00016418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800641c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000007c  08006498  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08006498  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9fd  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233d  00000000  00000000  0002daa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  0002fde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  00030a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029088  00000000  00000000  000315d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104a5  00000000  00000000  0005a658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f199f  00000000  00000000  0006aafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c49c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003528  00000000  00000000  0015c4ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800575c 	.word	0x0800575c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800575c 	.word	0x0800575c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <RFM69_initialize>:




bool RFM69_initialize(uint16_t freqBand, uint8_t nodeID, uint16_t networkID)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08e      	sub	sp, #56	; 0x38
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
 800058e:	460b      	mov	r3, r1
 8000590:	717b      	strb	r3, [r7, #5]
 8000592:	4613      	mov	r3, r2
 8000594:	807b      	strh	r3, [r7, #2]
  const uint8_t CONFIG[][2] =
 8000596:	f240 4301 	movw	r3, #1025	; 0x401
 800059a:	813b      	strh	r3, [r7, #8]
 800059c:	2302      	movs	r3, #2
 800059e:	817b      	strh	r3, [r7, #10]
 80005a0:	f240 2303 	movw	r3, #515	; 0x203
 80005a4:	81bb      	strh	r3, [r7, #12]
 80005a6:	f244 0304 	movw	r3, #16388	; 0x4004
 80005aa:	81fb      	strh	r3, [r7, #14]
 80005ac:	f240 3305 	movw	r3, #773	; 0x305
 80005b0:	823b      	strh	r3, [r7, #16]
 80005b2:	f243 3306 	movw	r3, #13062	; 0x3306
 80005b6:	827b      	strh	r3, [r7, #18]
 80005b8:	2307      	movs	r3, #7
 80005ba:	753b      	strb	r3, [r7, #20]
 80005bc:	88fb      	ldrh	r3, [r7, #6]
 80005be:	f240 123b 	movw	r2, #315	; 0x13b
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d00e      	beq.n	80005e4 <RFM69_initialize+0x60>
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	f240 12b1 	movw	r2, #433	; 0x1b1
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d007      	beq.n	80005e0 <RFM69_initialize+0x5c>
 80005d0:	88fb      	ldrh	r3, [r7, #6]
 80005d2:	f5b3 7f59 	cmp.w	r3, #868	; 0x364
 80005d6:	d101      	bne.n	80005dc <RFM69_initialize+0x58>
 80005d8:	23d9      	movs	r3, #217	; 0xd9
 80005da:	e004      	b.n	80005e6 <RFM69_initialize+0x62>
 80005dc:	23e4      	movs	r3, #228	; 0xe4
 80005de:	e002      	b.n	80005e6 <RFM69_initialize+0x62>
 80005e0:	236c      	movs	r3, #108	; 0x6c
 80005e2:	e000      	b.n	80005e6 <RFM69_initialize+0x62>
 80005e4:	234e      	movs	r3, #78	; 0x4e
 80005e6:	757b      	strb	r3, [r7, #21]
 80005e8:	2308      	movs	r3, #8
 80005ea:	75bb      	strb	r3, [r7, #22]
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	f240 123b 	movw	r2, #315	; 0x13b
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d00e      	beq.n	8000614 <RFM69_initialize+0x90>
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	f240 12b1 	movw	r2, #433	; 0x1b1
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d007      	beq.n	8000610 <RFM69_initialize+0x8c>
 8000600:	88fb      	ldrh	r3, [r7, #6]
 8000602:	f5b3 7f59 	cmp.w	r3, #868	; 0x364
 8000606:	d101      	bne.n	800060c <RFM69_initialize+0x88>
 8000608:	2300      	movs	r3, #0
 800060a:	e004      	b.n	8000616 <RFM69_initialize+0x92>
 800060c:	23c0      	movs	r3, #192	; 0xc0
 800060e:	e002      	b.n	8000616 <RFM69_initialize+0x92>
 8000610:	2340      	movs	r3, #64	; 0x40
 8000612:	e000      	b.n	8000616 <RFM69_initialize+0x92>
 8000614:	23c0      	movs	r3, #192	; 0xc0
 8000616:	75fb      	strb	r3, [r7, #23]
 8000618:	2309      	movs	r3, #9
 800061a:	833b      	strh	r3, [r7, #24]
 800061c:	f244 2319 	movw	r3, #16921	; 0x4219
 8000620:	837b      	strh	r3, [r7, #26]
 8000622:	f244 0325 	movw	r3, #16421	; 0x4025
 8000626:	83bb      	strh	r3, [r7, #28]
 8000628:	f240 7326 	movw	r3, #1830	; 0x726
 800062c:	83fb      	strh	r3, [r7, #30]
 800062e:	f244 0328 	movw	r3, #16424	; 0x4028
 8000632:	843b      	strh	r3, [r7, #32]
 8000634:	f64d 4329 	movw	r3, #56361	; 0xdc29
 8000638:	847b      	strh	r3, [r7, #34]	; 0x22
 800063a:	f648 032e 	movw	r3, #34862	; 0x882e
 800063e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000640:	f642 532f 	movw	r3, #11567	; 0x2d2f
 8000644:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000646:	2330      	movs	r3, #48	; 0x30
 8000648:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800064c:	887b      	ldrh	r3, [r7, #2]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000654:	f249 0337 	movw	r3, #36919	; 0x9037
 8000658:	857b      	strh	r3, [r7, #42]	; 0x2a
 800065a:	f244 2338 	movw	r3, #16952	; 0x4238
 800065e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000660:	f648 733c 	movw	r3, #36668	; 0x8f3c
 8000664:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000666:	f241 233d 	movw	r3, #4669	; 0x123d
 800066a:	863b      	strh	r3, [r7, #48]	; 0x30
 800066c:	f243 036f 	movw	r3, #12399	; 0x306f
 8000670:	867b      	strh	r3, [r7, #50]	; 0x32
 8000672:	23ff      	movs	r3, #255	; 0xff
 8000674:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode for Fading Margin Improvement, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
  uint8_t i;

  RFM69_SetCSPin(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f001 f80a 	bl	8001690 <RFM69_SetCSPin>

  for (i = 0; CONFIG[i][0] != 255; i++) {
 800067c:	2300      	movs	r3, #0
 800067e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000682:	e016      	b.n	80006b2 <RFM69_initialize+0x12e>
    RFM69_writeReg(CONFIG[i][0], CONFIG[i][1]);
 8000684:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	3338      	adds	r3, #56	; 0x38
 800068c:	443b      	add	r3, r7
 800068e:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8000692:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	3338      	adds	r3, #56	; 0x38
 800069a:	443b      	add	r3, r7
 800069c:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 80006a0:	4619      	mov	r1, r3
 80006a2:	4610      	mov	r0, r2
 80006a4:	f000 ff52 	bl	800154c <RFM69_writeReg>
  for (i = 0; CONFIG[i][0] != 255; i++) {
 80006a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006ac:	3301      	adds	r3, #1
 80006ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80006b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	3338      	adds	r3, #56	; 0x38
 80006ba:	443b      	add	r3, r7
 80006bc:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80006c0:	2bff      	cmp	r3, #255	; 0xff
 80006c2:	d1df      	bne.n	8000684 <RFM69_initialize+0x100>
  }

  // check written registers
  for (i = 0; CONFIG[i][0] != 255; i++) {
 80006c4:	2300      	movs	r3, #0
 80006c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80006ca:	e024      	b.n	8000716 <RFM69_initialize+0x192>
    if(CONFIG[i][0] != REG_IRQFLAGS2)
 80006cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	3338      	adds	r3, #56	; 0x38
 80006d4:	443b      	add	r3, r7
 80006d6:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80006da:	2b28      	cmp	r3, #40	; 0x28
 80006dc:	d016      	beq.n	800070c <RFM69_initialize+0x188>
    {
      if(RFM69_readReg(CONFIG[i][0]) != CONFIG[i][1]) {
 80006de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	3338      	adds	r3, #56	; 0x38
 80006e6:	443b      	add	r3, r7
 80006e8:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 ff13 	bl	8001518 <RFM69_readReg>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	3338      	adds	r3, #56	; 0x38
 80006fe:	443b      	add	r3, r7
 8000700:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 8000704:	429a      	cmp	r2, r3
 8000706:	d001      	beq.n	800070c <RFM69_initialize+0x188>
        return false;
 8000708:	2300      	movs	r3, #0
 800070a:	e033      	b.n	8000774 <RFM69_initialize+0x1f0>
  for (i = 0; CONFIG[i][0] != 255; i++) {
 800070c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000710:	3301      	adds	r3, #1
 8000712:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000716:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	3338      	adds	r3, #56	; 0x38
 800071e:	443b      	add	r3, r7
 8000720:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8000724:	2bff      	cmp	r3, #255	; 0xff
 8000726:	d1d1      	bne.n	80006cc <RFM69_initialize+0x148>
    }
  }

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  RFM69_encrypt(0);
 8000728:	2000      	movs	r0, #0
 800072a:	f000 fae3 	bl	8000cf4 <RFM69_encrypt>

  RFM69_setHighPower(); // called regardless if it's a RFM69W or RFM69HW
 800072e:	f000 fb45 	bl	8000dbc <RFM69_setHighPower>
  RFM69_setMode(RF69_MODE_STANDBY);
 8000732:	2001      	movs	r0, #1
 8000734:	f000 f824 	bl	8000780 <RFM69_setMode>
  Timeout_SetTimeout1(50);
 8000738:	2032      	movs	r0, #50	; 0x32
 800073a:	f000 ffed 	bl	8001718 <Timeout_SetTimeout1>
  while (((RFM69_readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && !Timeout_IsTimeout1()); // wait for ModeReady
 800073e:	bf00      	nop
 8000740:	2027      	movs	r0, #39	; 0x27
 8000742:	f000 fee9 	bl	8001518 <RFM69_readReg>
 8000746:	4603      	mov	r3, r0
 8000748:	b25b      	sxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	db07      	blt.n	800075e <RFM69_initialize+0x1da>
 800074e:	f000 ffc7 	bl	80016e0 <Timeout_IsTimeout1>
 8000752:	4603      	mov	r3, r0
 8000754:	f083 0301 	eor.w	r3, r3, #1
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1f0      	bne.n	8000740 <RFM69_initialize+0x1bc>
  if (Timeout_IsTimeout1())
 800075e:	f000 ffbf 	bl	80016e0 <Timeout_IsTimeout1>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <RFM69_initialize+0x1e8>
  {
    return false;
 8000768:	2300      	movs	r3, #0
 800076a:	e003      	b.n	8000774 <RFM69_initialize+0x1f0>
  }

  _address = nodeID;
 800076c:	4a03      	ldr	r2, [pc, #12]	; (800077c <RFM69_initialize+0x1f8>)
 800076e:	797b      	ldrb	r3, [r7, #5]
 8000770:	7013      	strb	r3, [r2, #0]
  return true;
 8000772:	2301      	movs	r3, #1
}
 8000774:	4618      	mov	r0, r3
 8000776:	3738      	adds	r7, #56	; 0x38
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000db 	.word	0x200000db

08000780 <RFM69_setMode>:
  }
  RFM69_setMode(oldMode);
}

void RFM69_setMode(uint8_t newMode)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  if (newMode == _mode)
 800078a:	4b40      	ldr	r3, [pc, #256]	; (800088c <RFM69_setMode+0x10c>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	79fa      	ldrb	r2, [r7, #7]
 8000790:	429a      	cmp	r2, r3
 8000792:	d075      	beq.n	8000880 <RFM69_setMode+0x100>
    return;

  switch (newMode) {
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	2b04      	cmp	r3, #4
 8000798:	d874      	bhi.n	8000884 <RFM69_setMode+0x104>
 800079a:	a201      	add	r2, pc, #4	; (adr r2, 80007a0 <RFM69_setMode+0x20>)
 800079c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a0:	08000849 	.word	0x08000849
 80007a4:	08000827 	.word	0x08000827
 80007a8:	08000805 	.word	0x08000805
 80007ac:	080007dd 	.word	0x080007dd
 80007b0:	080007b5 	.word	0x080007b5
    case RF69_MODE_TX:
      RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f000 feaf 	bl	8001518 <RFM69_readReg>
 80007ba:	4603      	mov	r3, r0
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	f023 031c 	bic.w	r3, r3, #28
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	f043 030c 	orr.w	r3, r3, #12
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	2001      	movs	r0, #1
 80007d0:	f000 febc 	bl	800154c <RFM69_writeReg>
      if (ISRFM69HW) RFM69_setHighPowerRegs(true);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f000 fb09 	bl	8000dec <RFM69_setHighPowerRegs>
      break;
 80007da:	e041      	b.n	8000860 <RFM69_setMode+0xe0>
    case RF69_MODE_RX:
      RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
 80007dc:	2001      	movs	r0, #1
 80007de:	f000 fe9b 	bl	8001518 <RFM69_readReg>
 80007e2:	4603      	mov	r3, r0
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	f023 031c 	bic.w	r3, r3, #28
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	f043 0310 	orr.w	r3, r3, #16
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	4619      	mov	r1, r3
 80007f6:	2001      	movs	r0, #1
 80007f8:	f000 fea8 	bl	800154c <RFM69_writeReg>
      if (ISRFM69HW) RFM69_setHighPowerRegs(false);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f000 faf5 	bl	8000dec <RFM69_setHighPowerRegs>
      break;
 8000802:	e02d      	b.n	8000860 <RFM69_setMode+0xe0>
    case RF69_MODE_SYNTH:
      RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
 8000804:	2001      	movs	r0, #1
 8000806:	f000 fe87 	bl	8001518 <RFM69_readReg>
 800080a:	4603      	mov	r3, r0
 800080c:	b25b      	sxtb	r3, r3
 800080e:	f023 031c 	bic.w	r3, r3, #28
 8000812:	b25b      	sxtb	r3, r3
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	b25b      	sxtb	r3, r3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4619      	mov	r1, r3
 800081e:	2001      	movs	r0, #1
 8000820:	f000 fe94 	bl	800154c <RFM69_writeReg>
      break;
 8000824:	e01c      	b.n	8000860 <RFM69_setMode+0xe0>
    case RF69_MODE_STANDBY:
      RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
 8000826:	2001      	movs	r0, #1
 8000828:	f000 fe76 	bl	8001518 <RFM69_readReg>
 800082c:	4603      	mov	r3, r0
 800082e:	b25b      	sxtb	r3, r3
 8000830:	f023 031c 	bic.w	r3, r3, #28
 8000834:	b25b      	sxtb	r3, r3
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	b25b      	sxtb	r3, r3
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4619      	mov	r1, r3
 8000840:	2001      	movs	r0, #1
 8000842:	f000 fe83 	bl	800154c <RFM69_writeReg>
      break;
 8000846:	e00b      	b.n	8000860 <RFM69_setMode+0xe0>
    case RF69_MODE_SLEEP:
      RFM69_writeReg(REG_OPMODE, (RFM69_readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
 8000848:	2001      	movs	r0, #1
 800084a:	f000 fe65 	bl	8001518 <RFM69_readReg>
 800084e:	4603      	mov	r3, r0
 8000850:	f023 031c 	bic.w	r3, r3, #28
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	2001      	movs	r0, #1
 800085a:	f000 fe77 	bl	800154c <RFM69_writeReg>
      break;
 800085e:	bf00      	nop
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (RFM69_readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
 8000860:	bf00      	nop
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <RFM69_setMode+0x10c>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d106      	bne.n	8000878 <RFM69_setMode+0xf8>
 800086a:	2027      	movs	r0, #39	; 0x27
 800086c:	f000 fe54 	bl	8001518 <RFM69_readReg>
 8000870:	4603      	mov	r3, r0
 8000872:	b25b      	sxtb	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	daf4      	bge.n	8000862 <RFM69_setMode+0xe2>

  _mode = newMode;
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <RFM69_setMode+0x10c>)
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	7013      	strb	r3, [r2, #0]
 800087e:	e002      	b.n	8000886 <RFM69_setMode+0x106>
    return;
 8000880:	bf00      	nop
 8000882:	e000      	b.n	8000886 <RFM69_setMode+0x106>
      return;
 8000884:	bf00      	nop
}
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000000 	.word	0x20000000

08000890 <RFM69_canSend>:
  }
  RFM69_writeReg(REG_PALEVEL, (RFM69_readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
}

bool RFM69_canSend()
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && payloadLen == 0 && RFM69_readRSSI(false) < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <RFM69_canSend+0x34>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b03      	cmp	r3, #3
 800089a:	d10f      	bne.n	80008bc <RFM69_canSend+0x2c>
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <RFM69_canSend+0x38>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10b      	bne.n	80008bc <RFM69_canSend+0x2c>
 80008a4:	2000      	movs	r0, #0
 80008a6:	f000 fa60 	bl	8000d6a <RFM69_readRSSI>
 80008aa:	4603      	mov	r3, r0
 80008ac:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 80008b0:	da04      	bge.n	80008bc <RFM69_canSend+0x2c>
  {
    RFM69_setMode(RF69_MODE_STANDBY);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f7ff ff64 	bl	8000780 <RFM69_setMode>
    return true;
 80008b8:	2301      	movs	r3, #1
 80008ba:	e000      	b.n	80008be <RFM69_canSend+0x2e>
  }
  return false;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000000 	.word	0x20000000
 80008c8:	200000d8 	.word	0x200000d8

080008cc <RFM69_send>:

void RFM69_send(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	6039      	str	r1, [r7, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	461a      	mov	r2, r3
 80008d8:	4603      	mov	r3, r0
 80008da:	71fb      	strb	r3, [r7, #7]
 80008dc:	460b      	mov	r3, r1
 80008de:	71bb      	strb	r3, [r7, #6]
 80008e0:	4613      	mov	r3, r2
 80008e2:	717b      	strb	r3, [r7, #5]
  RFM69_writeReg(REG_PACKETCONFIG2, (RFM69_readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
 80008e4:	203d      	movs	r0, #61	; 0x3d
 80008e6:	f000 fe17 	bl	8001518 <RFM69_readReg>
 80008ea:	4603      	mov	r3, r0
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	4619      	mov	r1, r3
 80008f4:	203d      	movs	r0, #61	; 0x3d
 80008f6:	f000 fe29 	bl	800154c <RFM69_writeReg>
  //uint32_t now = millis();
  while (!RFM69_canSend() /*&& millis() - now < RF69_CSMA_LIMIT_MS*/) RFM69_receiveDone();
 80008fa:	e001      	b.n	8000900 <RFM69_send+0x34>
 80008fc:	f000 f9da 	bl	8000cb4 <RFM69_receiveDone>
 8000900:	f7ff ffc6 	bl	8000890 <RFM69_canSend>
 8000904:	4603      	mov	r3, r0
 8000906:	f083 0301 	eor.w	r3, r3, #1
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1f5      	bne.n	80008fc <RFM69_send+0x30>
  RFM69_sendFrame(toAddress, buffer, bufferSize, requestACK, false);
 8000910:	797b      	ldrb	r3, [r7, #5]
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	79f8      	ldrb	r0, [r7, #7]
 8000916:	2100      	movs	r1, #0
 8000918:	9100      	str	r1, [sp, #0]
 800091a:	6839      	ldr	r1, [r7, #0]
 800091c:	f000 f862 	bl	80009e4 <RFM69_sendFrame>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <RFM69_sendWithRetry>:
// The only twist is that you have to manually listen to ACK requests on the other side and send back the ACKs
// The reason for the semi-automaton is that the lib is interrupt driven and
// requires user action to read the received data and decide what to do with it
// replies usually take only 5..8ms at 50kbps@915MHz
bool RFM69_sendWithRetry(uint8_t toAddress, const void* buffer, uint8_t bufferSize, uint8_t retries, uint8_t retryWaitTime)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6039      	str	r1, [r7, #0]
 8000930:	4611      	mov	r1, r2
 8000932:	461a      	mov	r2, r3
 8000934:	4603      	mov	r3, r0
 8000936:	71fb      	strb	r3, [r7, #7]
 8000938:	460b      	mov	r3, r1
 800093a:	71bb      	strb	r3, [r7, #6]
 800093c:	4613      	mov	r3, r2
 800093e:	717b      	strb	r3, [r7, #5]
  for (uint8_t i = 0; i <= retries; i++)
 8000940:	2300      	movs	r3, #0
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	e01f      	b.n	8000986 <RFM69_sendWithRetry+0x5e>
  {
    RFM69_send(toAddress, buffer, bufferSize, true);
 8000946:	79ba      	ldrb	r2, [r7, #6]
 8000948:	79f8      	ldrb	r0, [r7, #7]
 800094a:	2301      	movs	r3, #1
 800094c:	6839      	ldr	r1, [r7, #0]
 800094e:	f7ff ffbd 	bl	80008cc <RFM69_send>
    Timeout_SetTimeout1(retryWaitTime);
 8000952:	7e3b      	ldrb	r3, [r7, #24]
 8000954:	b29b      	uxth	r3, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f000 fede 	bl	8001718 <Timeout_SetTimeout1>
    while (!Timeout_IsTimeout1())
 800095c:	e008      	b.n	8000970 <RFM69_sendWithRetry+0x48>
    {
      if (RFM69_ACKReceived(toAddress))
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f819 	bl	8000998 <RFM69_ACKReceived>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <RFM69_sendWithRetry+0x48>
      {
        //Serial.print(" ~ms:"); Serial.print(millis() - sentTime);
        return true;
 800096c:	2301      	movs	r3, #1
 800096e:	e00f      	b.n	8000990 <RFM69_sendWithRetry+0x68>
    while (!Timeout_IsTimeout1())
 8000970:	f000 feb6 	bl	80016e0 <Timeout_IsTimeout1>
 8000974:	4603      	mov	r3, r0
 8000976:	f083 0301 	eor.w	r3, r3, #1
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1ee      	bne.n	800095e <RFM69_sendWithRetry+0x36>
  for (uint8_t i = 0; i <= retries; i++)
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	3301      	adds	r3, #1
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	7bfa      	ldrb	r2, [r7, #15]
 8000988:	797b      	ldrb	r3, [r7, #5]
 800098a:	429a      	cmp	r2, r3
 800098c:	d9db      	bls.n	8000946 <RFM69_sendWithRetry+0x1e>
      }
    }
    //Serial.print(" RETRY#"); Serial.println(i + 1);
  }
  return false;
 800098e:	2300      	movs	r3, #0
}
 8000990:	4618      	mov	r0, r3
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <RFM69_ACKReceived>:

// should be polled immediately after sending a packet with ACK request
bool RFM69_ACKReceived(uint8_t fromNodeID)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
  if (RFM69_receiveDone())
 80009a2:	f000 f987 	bl	8000cb4 <RFM69_receiveDone>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d012      	beq.n	80009d2 <RFM69_ACKReceived+0x3a>
    return (senderID == fromNodeID || fromNodeID == RF69_BROADCAST_ADDR) && ACK_RECEIVED;
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <RFM69_ACKReceived+0x44>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	79fa      	ldrb	r2, [r7, #7]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d002      	beq.n	80009bc <RFM69_ACKReceived+0x24>
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2bff      	cmp	r3, #255	; 0xff
 80009ba:	d105      	bne.n	80009c8 <RFM69_ACKReceived+0x30>
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <RFM69_ACKReceived+0x48>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <RFM69_ACKReceived+0x30>
 80009c4:	2301      	movs	r3, #1
 80009c6:	e000      	b.n	80009ca <RFM69_ACKReceived+0x32>
 80009c8:	2300      	movs	r3, #0
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	e000      	b.n	80009d4 <RFM69_ACKReceived+0x3c>
  return false;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200000d6 	.word	0x200000d6
 80009e0:	200000da 	.word	0x200000da

080009e4 <RFM69_sendFrame>:
  rssi = l_rssi; // restore payload RSSI
}

// internal function
static void RFM69_sendFrame(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK, bool sendACK)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6039      	str	r1, [r7, #0]
 80009ec:	4611      	mov	r1, r2
 80009ee:	461a      	mov	r2, r3
 80009f0:	4603      	mov	r3, r0
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	460b      	mov	r3, r1
 80009f6:	71bb      	strb	r3, [r7, #6]
 80009f8:	4613      	mov	r3, r2
 80009fa:	717b      	strb	r3, [r7, #5]
  RFM69_setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff febf 	bl	8000780 <RFM69_setMode>
  while ((RFM69_readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
 8000a02:	bf00      	nop
 8000a04:	2027      	movs	r0, #39	; 0x27
 8000a06:	f000 fd87 	bl	8001518 <RFM69_readReg>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b25b      	sxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	daf8      	bge.n	8000a04 <RFM69_sendFrame+0x20>
  RFM69_writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
 8000a12:	2100      	movs	r1, #0
 8000a14:	2025      	movs	r0, #37	; 0x25
 8000a16:	f000 fd99 	bl	800154c <RFM69_writeReg>
  if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;
 8000a1a:	79bb      	ldrb	r3, [r7, #6]
 8000a1c:	2b3d      	cmp	r3, #61	; 0x3d
 8000a1e:	d901      	bls.n	8000a24 <RFM69_sendFrame+0x40>
 8000a20:	233d      	movs	r3, #61	; 0x3d
 8000a22:	71bb      	strb	r3, [r7, #6]

  // control byte
  uint8_t CTLbyte = 0x00;
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
  if (sendACK)
 8000a28:	7e3b      	ldrb	r3, [r7, #24]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d002      	beq.n	8000a34 <RFM69_sendFrame+0x50>
    CTLbyte = RFM69_CTL_SENDACK;
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	73fb      	strb	r3, [r7, #15]
 8000a32:	e004      	b.n	8000a3e <RFM69_sendFrame+0x5a>
  else if (requestACK)
 8000a34:	797b      	ldrb	r3, [r7, #5]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <RFM69_sendFrame+0x5a>
    CTLbyte = RFM69_CTL_REQACK;
 8000a3a:	2340      	movs	r3, #64	; 0x40
 8000a3c:	73fb      	strb	r3, [r7, #15]

  // write to FIFO
  RFM69_select();
 8000a3e:	f000 fda0 	bl	8001582 <RFM69_select>
  SPI_transfer8(REG_FIFO | 0x80);
 8000a42:	2080      	movs	r0, #128	; 0x80
 8000a44:	f001 f890 	bl	8001b68 <SPI_transfer8>
  SPI_transfer8(bufferSize + 3);
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	3303      	adds	r3, #3
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 f88a 	bl	8001b68 <SPI_transfer8>
  SPI_transfer8(toAddress);
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 f886 	bl	8001b68 <SPI_transfer8>
  SPI_transfer8(_address);
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <RFM69_sendFrame+0xf0>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 f881 	bl	8001b68 <SPI_transfer8>
  SPI_transfer8(CTLbyte);
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 f87d 	bl	8001b68 <SPI_transfer8>

  for (uint8_t i = 0; i < bufferSize; i++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	73bb      	strb	r3, [r7, #14]
 8000a72:	e009      	b.n	8000a88 <RFM69_sendFrame+0xa4>
    SPI_transfer8(((uint8_t*) buffer)[i]);
 8000a74:	7bbb      	ldrb	r3, [r7, #14]
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 f873 	bl	8001b68 <SPI_transfer8>
  for (uint8_t i = 0; i < bufferSize; i++)
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	3301      	adds	r3, #1
 8000a86:	73bb      	strb	r3, [r7, #14]
 8000a88:	7bba      	ldrb	r2, [r7, #14]
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d3f1      	bcc.n	8000a74 <RFM69_sendFrame+0x90>
  RFM69_unselect();
 8000a90:	f000 fd80 	bl	8001594 <RFM69_unselect>

  // no need to wait for transmit mode to be ready since its handled by the radio
  RFM69_setMode(RF69_MODE_TX);
 8000a94:	2004      	movs	r0, #4
 8000a96:	f7ff fe73 	bl	8000780 <RFM69_setMode>
  Timeout_SetTimeout1(RF69_TX_LIMIT_MS);
 8000a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a9e:	f000 fe3b 	bl	8001718 <Timeout_SetTimeout1>
  while (RFM69_ReadDIO0Pin() == 0 && !Timeout_IsTimeout1()); // wait for DIO0 to turn HIGH signalling transmission finish
 8000aa2:	bf00      	nop
 8000aa4:	f000 fe06 	bl	80016b4 <RFM69_ReadDIO0Pin>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f083 0301 	eor.w	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d007      	beq.n	8000ac4 <RFM69_sendFrame+0xe0>
 8000ab4:	f000 fe14 	bl	80016e0 <Timeout_IsTimeout1>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	f083 0301 	eor.w	r3, r3, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1ef      	bne.n	8000aa4 <RFM69_sendFrame+0xc0>
  //while (RFM69_readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // wait for ModeReady
  RFM69_setMode(RF69_MODE_STANDBY);
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f7ff fe5b 	bl	8000780 <RFM69_setMode>
}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000db 	.word	0x200000db

08000ad8 <RFM69_interruptHandler>:

// internal function - interrupt gets called when a packet is received
void RFM69_interruptHandler() {
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0

  if (_mode == RF69_MODE_RX && (RFM69_readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
 8000ade:	4b49      	ldr	r3, [pc, #292]	; (8000c04 <RFM69_interruptHandler+0x12c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	f040 8083 	bne.w	8000bee <RFM69_interruptHandler+0x116>
 8000ae8:	2028      	movs	r0, #40	; 0x28
 8000aea:	f000 fd15 	bl	8001518 <RFM69_readReg>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d07a      	beq.n	8000bee <RFM69_interruptHandler+0x116>
  {
    uint8_t CTLbyte;
    //rssi = RFM69_readRSSI();
    RFM69_setMode(RF69_MODE_STANDBY);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fe41 	bl	8000780 <RFM69_setMode>
    RFM69_select();
 8000afe:	f000 fd40 	bl	8001582 <RFM69_select>
    SPI_transfer8(REG_FIFO & 0x7F);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f001 f830 	bl	8001b68 <SPI_transfer8>
    payloadLen = SPI_transfer8(0);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f001 f82d 	bl	8001b68 <SPI_transfer8>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b3d      	ldr	r3, [pc, #244]	; (8000c08 <RFM69_interruptHandler+0x130>)
 8000b14:	701a      	strb	r2, [r3, #0]
    payloadLen = payloadLen > 66 ? 66 : payloadLen; // precaution
 8000b16:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <RFM69_interruptHandler+0x130>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b42      	cmp	r3, #66	; 0x42
 8000b1c:	bf28      	it	cs
 8000b1e:	2342      	movcs	r3, #66	; 0x42
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b39      	ldr	r3, [pc, #228]	; (8000c08 <RFM69_interruptHandler+0x130>)
 8000b24:	701a      	strb	r2, [r3, #0]
    targetID = SPI_transfer8(0);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f001 f81e 	bl	8001b68 <SPI_transfer8>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <RFM69_interruptHandler+0x134>)
 8000b32:	701a      	strb	r2, [r3, #0]
    if(!(_promiscuousMode || targetID == _address || targetID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
 8000b34:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <RFM69_interruptHandler+0x138>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	f083 0301 	eor.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d009      	beq.n	8000b56 <RFM69_interruptHandler+0x7e>
 8000b42:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <RFM69_interruptHandler+0x134>)
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <RFM69_interruptHandler+0x13c>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d003      	beq.n	8000b56 <RFM69_interruptHandler+0x7e>
 8000b4e:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <RFM69_interruptHandler+0x134>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2bff      	cmp	r3, #255	; 0xff
 8000b54:	d103      	bne.n	8000b5e <RFM69_interruptHandler+0x86>
       || payloadLen < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
 8000b56:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <RFM69_interruptHandler+0x130>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d807      	bhi.n	8000b6e <RFM69_interruptHandler+0x96>
    {
      payloadLen = 0;
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <RFM69_interruptHandler+0x130>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
      RFM69_unselect();
 8000b64:	f000 fd16 	bl	8001594 <RFM69_unselect>
      RFM69_receiveBegin();
 8000b68:	f000 f862 	bl	8000c30 <RFM69_receiveBegin>
      return;
 8000b6c:	e046      	b.n	8000bfc <RFM69_interruptHandler+0x124>
    }

    datalen = payloadLen - 3;
 8000b6e:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <RFM69_interruptHandler+0x130>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	3b03      	subs	r3, #3
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <RFM69_interruptHandler+0x140>)
 8000b78:	701a      	strb	r2, [r3, #0]
    senderID = SPI_transfer8(0);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 fff4 	bl	8001b68 <SPI_transfer8>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <RFM69_interruptHandler+0x144>)
 8000b86:	701a      	strb	r2, [r3, #0]
    CTLbyte = SPI_transfer8(0);
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 ffed 	bl	8001b68 <SPI_transfer8>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71bb      	strb	r3, [r7, #6]

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
 8000b92:	79bb      	ldrb	r3, [r7, #6]
 8000b94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <RFM69_interruptHandler+0x148>)
 8000b9c:	701a      	strb	r2, [r3, #0]
    ACK_Requested = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
 8000b9e:	79bb      	ldrb	r3, [r7, #6]
 8000ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <RFM69_interruptHandler+0x14c>)
 8000ba8:	701a      	strb	r2, [r3, #0]

    //interruptHook(CTLbyte);     // TWS: hook to derived class interrupt function

    for (uint8_t i = 0; i < datalen; i++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	71fb      	strb	r3, [r7, #7]
 8000bae:	e00a      	b.n	8000bc6 <RFM69_interruptHandler+0xee>
    {
      data[i] = SPI_transfer8(0);
 8000bb0:	79fc      	ldrb	r4, [r7, #7]
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f000 ffd8 	bl	8001b68 <SPI_transfer8>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <RFM69_interruptHandler+0x150>)
 8000bbe:	551a      	strb	r2, [r3, r4]
    for (uint8_t i = 0; i < datalen; i++)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	71fb      	strb	r3, [r7, #7]
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <RFM69_interruptHandler+0x140>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	79fa      	ldrb	r2, [r7, #7]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d3ef      	bcc.n	8000bb0 <RFM69_interruptHandler+0xd8>
    }
    if (datalen < RF69_MAX_DATA_LEN) data[datalen] = 0; // add null at end of string
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <RFM69_interruptHandler+0x140>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b3c      	cmp	r3, #60	; 0x3c
 8000bd6:	d805      	bhi.n	8000be4 <RFM69_interruptHandler+0x10c>
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <RFM69_interruptHandler+0x140>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <RFM69_interruptHandler+0x150>)
 8000be0:	2100      	movs	r1, #0
 8000be2:	5499      	strb	r1, [r3, r2]
    RFM69_unselect();
 8000be4:	f000 fcd6 	bl	8001594 <RFM69_unselect>
    RFM69_setMode(RF69_MODE_RX);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f7ff fdc9 	bl	8000780 <RFM69_setMode>
  }
  rssi = RFM69_readRSSI(false);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 f8bb 	bl	8000d6a <RFM69_readRSSI>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <RFM69_interruptHandler+0x154>)
 8000bfa:	801a      	strh	r2, [r3, #0]
}
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd90      	pop	{r4, r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000000 	.word	0x20000000
 8000c08:	200000d8 	.word	0x200000d8
 8000c0c:	200000d7 	.word	0x200000d7
 8000c10:	200000dc 	.word	0x200000dc
 8000c14:	200000db 	.word	0x200000db
 8000c18:	200000d5 	.word	0x200000d5
 8000c1c:	200000d6 	.word	0x200000d6
 8000c20:	200000da 	.word	0x200000da
 8000c24:	200000d9 	.word	0x200000d9
 8000c28:	20000098 	.word	0x20000098
 8000c2c:	200000e4 	.word	0x200000e4

08000c30 <RFM69_receiveBegin>:
// internal function
//void RFM69::isr0() { selfPointer->interruptHandler(); }

// internal function
void RFM69_receiveBegin()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  datalen = 0;
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <RFM69_receiveBegin+0x68>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
  senderID = 0;
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <RFM69_receiveBegin+0x6c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
  targetID = 0;
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <RFM69_receiveBegin+0x70>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
  payloadLen = 0;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <RFM69_receiveBegin+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
  ACK_Requested = 0;
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <RFM69_receiveBegin+0x78>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
  ACK_RECEIVED = 0;
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <RFM69_receiveBegin+0x7c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
  rssi = 0;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <RFM69_receiveBegin+0x80>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	801a      	strh	r2, [r3, #0]
  if (RFM69_readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
 8000c5e:	2028      	movs	r0, #40	; 0x28
 8000c60:	f000 fc5a 	bl	8001518 <RFM69_readReg>
 8000c64:	4603      	mov	r3, r0
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00a      	beq.n	8000c84 <RFM69_receiveBegin+0x54>
    RFM69_writeReg(REG_PACKETCONFIG2, (RFM69_readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
 8000c6e:	203d      	movs	r0, #61	; 0x3d
 8000c70:	f000 fc52 	bl	8001518 <RFM69_readReg>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	203d      	movs	r0, #61	; 0x3d
 8000c80:	f000 fc64 	bl	800154c <RFM69_writeReg>
  RFM69_writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
 8000c84:	2140      	movs	r1, #64	; 0x40
 8000c86:	2025      	movs	r0, #37	; 0x25
 8000c88:	f000 fc60 	bl	800154c <RFM69_writeReg>
  RFM69_setMode(RF69_MODE_RX);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f7ff fd77 	bl	8000780 <RFM69_setMode>
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200000d5 	.word	0x200000d5
 8000c9c:	200000d6 	.word	0x200000d6
 8000ca0:	200000d7 	.word	0x200000d7
 8000ca4:	200000d8 	.word	0x200000d8
 8000ca8:	200000d9 	.word	0x200000d9
 8000cac:	200000da 	.word	0x200000da
 8000cb0:	200000e4 	.word	0x200000e4

08000cb4 <RFM69_receiveDone>:

// checks if a packet was received and/or puts transceiver in receive (ie RX or listen) mode
bool RFM69_receiveDone()
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
//ATOMIC_BLOCK(ATOMIC_FORCEON)
  //noInterrupts(); // re-enabled in RFM69_unselect() via setMode() or via RFM69_receiveBegin()
  RFM69_interruptHandler();
 8000cb8:	f7ff ff0e 	bl	8000ad8 <RFM69_interruptHandler>
  if (_mode == RF69_MODE_RX && payloadLen > 0)
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <RFM69_receiveDone+0x38>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d108      	bne.n	8000cd6 <RFM69_receiveDone+0x22>
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <RFM69_receiveDone+0x3c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d004      	beq.n	8000cd6 <RFM69_receiveDone+0x22>
  {
    RFM69_setMode(RF69_MODE_STANDBY); // enables interrupts
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f7ff fd57 	bl	8000780 <RFM69_setMode>
    return true;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e008      	b.n	8000ce8 <RFM69_receiveDone+0x34>
  }
  else if (_mode == RF69_MODE_RX) // already in RX no payload yet
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <RFM69_receiveDone+0x38>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d101      	bne.n	8000ce2 <RFM69_receiveDone+0x2e>
  {
    //interrupts(); // explicitly re-enable interrupts
    return false;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e002      	b.n	8000ce8 <RFM69_receiveDone+0x34>
  }
  RFM69_receiveBegin();
 8000ce2:	f7ff ffa5 	bl	8000c30 <RFM69_receiveBegin>
  return false;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	200000d8 	.word	0x200000d8

08000cf4 <RFM69_encrypt>:

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69_encrypt(const char* key)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  RFM69_setMode(RF69_MODE_STANDBY);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff fd3f 	bl	8000780 <RFM69_setMode>
  if (key != 0)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d016      	beq.n	8000d36 <RFM69_encrypt+0x42>
  {
    RFM69_select();
 8000d08:	f000 fc3b 	bl	8001582 <RFM69_select>
    SPI_transfer8(REG_AESKEY1 | 0x80);
 8000d0c:	20be      	movs	r0, #190	; 0xbe
 8000d0e:	f000 ff2b 	bl	8001b68 <SPI_transfer8>
    for (uint8_t i = 0; i < 16; i++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e009      	b.n	8000d2c <RFM69_encrypt+0x38>
      SPI_transfer8(key[i]);
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 ff21 	bl	8001b68 <SPI_transfer8>
    for (uint8_t i = 0; i < 16; i++)
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	2b0f      	cmp	r3, #15
 8000d30:	d9f2      	bls.n	8000d18 <RFM69_encrypt+0x24>
    RFM69_unselect();
 8000d32:	f000 fc2f 	bl	8001594 <RFM69_unselect>
  }
  RFM69_writeReg(REG_PACKETCONFIG2, (RFM69_readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
 8000d36:	203d      	movs	r0, #61	; 0x3d
 8000d38:	f000 fbee 	bl	8001518 <RFM69_readReg>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	b25b      	sxtb	r3, r3
 8000d40:	f023 0301 	bic.w	r3, r3, #1
 8000d44:	b25a      	sxtb	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bf14      	ite	ne
 8000d4c:	2301      	movne	r3, #1
 8000d4e:	2300      	moveq	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	203d      	movs	r0, #61	; 0x3d
 8000d5e:	f000 fbf5 	bl	800154c <RFM69_writeReg>
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <RFM69_readRSSI>:

// get the received signal strength indicator (RSSI)
int16_t RFM69_readRSSI(bool forceTrigger) {
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
  int16_t rssi = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	81fb      	strh	r3, [r7, #14]
  if (forceTrigger)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00c      	beq.n	8000d98 <RFM69_readRSSI+0x2e>
  {
    // RSSI trigger not needed if DAGC is in continuous mode
    RFM69_writeReg(REG_RSSICONFIG, RF_RSSI_START);
 8000d7e:	2101      	movs	r1, #1
 8000d80:	2023      	movs	r0, #35	; 0x23
 8000d82:	f000 fbe3 	bl	800154c <RFM69_writeReg>
    while ((RFM69_readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00); // wait for RSSI_Ready
 8000d86:	bf00      	nop
 8000d88:	2023      	movs	r0, #35	; 0x23
 8000d8a:	f000 fbc5 	bl	8001518 <RFM69_readReg>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0f7      	beq.n	8000d88 <RFM69_readRSSI+0x1e>
  }
  rssi = -RFM69_readReg(REG_RSSIVALUE);
 8000d98:	2024      	movs	r0, #36	; 0x24
 8000d9a:	f000 fbbd 	bl	8001518 <RFM69_readReg>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	425b      	negs	r3, r3
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	81fb      	strh	r3, [r7, #14]
  rssi >>= 1;
 8000da8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dac:	105b      	asrs	r3, r3, #1
 8000dae:	81fb      	strh	r3, [r7, #14]
  return rssi;
 8000db0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <RFM69_setHighPower>:
  RFM69_writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
}
*/
// for RFM69HW only: you must call RFM69_setHighPower() after initialize() or else transmission won't work
void RFM69_setHighPower()
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  RFM69_writeReg(REG_OCP, ISRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
 8000dc0:	210f      	movs	r1, #15
 8000dc2:	2013      	movs	r0, #19
 8000dc4:	f000 fbc2 	bl	800154c <RFM69_writeReg>
  #if (ISRFM69HW == 1) // turning ON
    RFM69_writeReg(REG_PALEVEL, (RFM69_readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
 8000dc8:	2011      	movs	r0, #17
 8000dca:	f000 fba5 	bl	8001518 <RFM69_readReg>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	f003 031f 	and.w	r3, r3, #31
 8000dd6:	b25b      	sxtb	r3, r3
 8000dd8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4619      	mov	r1, r3
 8000de2:	2011      	movs	r0, #17
 8000de4:	f000 fbb2 	bl	800154c <RFM69_writeReg>

  #elif (ISRFM69HW == 0) {
    RFM69_writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
}
  #endif
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <RFM69_setHighPowerRegs>:

// internal function
void RFM69_setHighPowerRegs(bool onOff)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  RFM69_writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <RFM69_setHighPowerRegs+0x14>
 8000dfc:	235d      	movs	r3, #93	; 0x5d
 8000dfe:	e000      	b.n	8000e02 <RFM69_setHighPowerRegs+0x16>
 8000e00:	2355      	movs	r3, #85	; 0x55
 8000e02:	4619      	mov	r1, r3
 8000e04:	205a      	movs	r0, #90	; 0x5a
 8000e06:	f000 fba1 	bl	800154c <RFM69_writeReg>
  RFM69_writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <RFM69_setHighPowerRegs+0x28>
 8000e10:	237c      	movs	r3, #124	; 0x7c
 8000e12:	e000      	b.n	8000e16 <RFM69_setHighPowerRegs+0x2a>
 8000e14:	2370      	movs	r3, #112	; 0x70
 8000e16:	4619      	mov	r1, r3
 8000e18:	205c      	movs	r0, #92	; 0x5c
 8000e1a:	f000 fb97 	bl	800154c <RFM69_writeReg>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <RFM69_readAllRegs>:

// for debugging
#define REGISTER_DETAIL 1

void RFM69_readAllRegs() {
 8000e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e2c:	b0b0      	sub	sp, #192	; 0xc0
 8000e2e:	af00      	add	r7, sp, #0

#if REGISTER_DETAIL
  uint16_t capVal;

  //... State Variables for intelligent decoding
  uint8_t modeFSK = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  uint64_t bitRate = 0;
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  uint32_t freqDev = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t freqCenter = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
#endif
  char pcBuf[130];
  debug_printf("\r\n");
 8000e4e:	48b8      	ldr	r0, [pc, #736]	; (8001130 <RFM69_readAllRegs+0x308>)
 8000e50:	f000 ffc2 	bl	8001dd8 <debug_printf>

  uint8_t regAddr;
  debug_printf("Address | HEX\r\n");
 8000e54:	48b7      	ldr	r0, [pc, #732]	; (8001134 <RFM69_readAllRegs+0x30c>)
 8000e56:	f000 ffbf 	bl	8001dd8 <debug_printf>
  for (regAddr = 1; regAddr <= 0x4F; regAddr++) {
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8000e60:	e30e      	b.n	8001480 <RFM69_readAllRegs+0x658>
    RFM69_select();
 8000e62:	f000 fb8e 	bl	8001582 <RFM69_select>
    SPI_transfer8(regAddr & 0x7F); // send address + r/w bit
 8000e66:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fe79 	bl	8001b68 <SPI_transfer8>
    regVal = SPI_transfer8(0);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 fe76 	bl	8001b68 <SPI_transfer8>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
    RFM69_unselect();
 8000e82:	f000 fb87 	bl	8001594 <RFM69_unselect>

    sprintf(log_buffer,"%02X|%02X : ", regAddr, regVal);
 8000e86:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8000e8a:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8000e8e:	49aa      	ldr	r1, [pc, #680]	; (8001138 <RFM69_readAllRegs+0x310>)
 8000e90:	48aa      	ldr	r0, [pc, #680]	; (800113c <RFM69_readAllRegs+0x314>)
 8000e92:	f003 fff5 	bl	8004e80 <siprintf>
    debug_printf(log_buffer);
 8000e96:	48a9      	ldr	r0, [pc, #676]	; (800113c <RFM69_readAllRegs+0x314>)
 8000e98:	f000 ff9e 	bl	8001dd8 <debug_printf>

#if REGISTER_DETAIL
    switch (regAddr) {
 8000e9c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	2b0c      	cmp	r3, #12
 8000ea4:	f200 82e7 	bhi.w	8001476 <RFM69_readAllRegs+0x64e>
 8000ea8:	a201      	add	r2, pc, #4	; (adr r2, 8000eb0 <RFM69_readAllRegs+0x88>)
 8000eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eae:	bf00      	nop
 8000eb0:	08000ee5 	.word	0x08000ee5
 8000eb4:	08000fc1 	.word	0x08000fc1
 8000eb8:	080011d1 	.word	0x080011d1
 8000ebc:	080011e3 	.word	0x080011e3
 8000ec0:	08001235 	.word	0x08001235
 8000ec4:	08001245 	.word	0x08001245
 8000ec8:	08001289 	.word	0x08001289
 8000ecc:	0800129d 	.word	0x0800129d
 8000ed0:	080012b7 	.word	0x080012b7
 8000ed4:	080012fb 	.word	0x080012fb
 8000ed8:	08001325 	.word	0x08001325
 8000edc:	0800134f 	.word	0x0800134f
 8000ee0:	08001357 	.word	0x08001357
    case 0x1: {
      debug_printf("Controls the automatic Sequencer ( see section 4.2 "
 8000ee4:	4896      	ldr	r0, [pc, #600]	; (8001140 <RFM69_readAllRegs+0x318>)
 8000ee6:	f000 ff77 	bl	8001dd8 <debug_printf>
                  ")\r\nSequencerOff : ");
      if (0x80 & regVal) {
 8000eea:	f997 30a6 	ldrsb.w	r3, [r7, #166]	; 0xa6
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	da03      	bge.n	8000efa <RFM69_readAllRegs+0xd2>
        debug_printf("1 -> Mode is forced by the user\r\n");
 8000ef2:	4894      	ldr	r0, [pc, #592]	; (8001144 <RFM69_readAllRegs+0x31c>)
 8000ef4:	f000 ff70 	bl	8001dd8 <debug_printf>
 8000ef8:	e002      	b.n	8000f00 <RFM69_readAllRegs+0xd8>
      } else {
        debug_printf(
 8000efa:	4893      	ldr	r0, [pc, #588]	; (8001148 <RFM69_readAllRegs+0x320>)
 8000efc:	f000 ff6c 	bl	8001dd8 <debug_printf>
            "0 -> Operating mode as selected with Mode bits in RegOpMode is "
            "automatically reached with the Sequencer\r\n");
      }

      debug_printf("\r\nEnables Listen mode, should be enabled whilst in "
 8000f00:	4892      	ldr	r0, [pc, #584]	; (800114c <RFM69_readAllRegs+0x324>)
 8000f02:	f000 ff69 	bl	8001dd8 <debug_printf>
                  "Standby mode:\r\nListenOn : ");
      if (0x40 & regVal) {
 8000f06:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8000f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <RFM69_readAllRegs+0xf4>
        debug_printf("1 -> On\r\n");
 8000f14:	488e      	ldr	r0, [pc, #568]	; (8001150 <RFM69_readAllRegs+0x328>)
 8000f16:	f000 ff5f 	bl	8001dd8 <debug_printf>
 8000f1a:	e002      	b.n	8000f22 <RFM69_readAllRegs+0xfa>
      } else {
        debug_printf("0 -> Off ( see section 4.3)\r\n");
 8000f1c:	488d      	ldr	r0, [pc, #564]	; (8001154 <RFM69_readAllRegs+0x32c>)
 8000f1e:	f000 ff5b 	bl	8001dd8 <debug_printf>
      }

      debug_printf("\r\nAborts Listen mode when set together with ListenOn=0 "
 8000f22:	488d      	ldr	r0, [pc, #564]	; (8001158 <RFM69_readAllRegs+0x330>)
 8000f24:	f000 ff58 	bl	8001dd8 <debug_printf>
                  "See section 4.3.4 for details (Always reads 0.)\r\n");
      if (0x20 & regVal) {
 8000f28:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8000f2c:	f003 0320 	and.w	r3, r3, #32
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <RFM69_readAllRegs+0x114>
        debug_printf("ERROR - ListenAbort should NEVER return 1 this is a write "
 8000f36:	4889      	ldr	r0, [pc, #548]	; (800115c <RFM69_readAllRegs+0x334>)
 8000f38:	f000 ff4e 	bl	8001dd8 <debug_printf>
                    "only register\r\n");
      }

      debug_printf("\r\nTransceiver's operating modes:\r\nMode : ");
 8000f3c:	4888      	ldr	r0, [pc, #544]	; (8001160 <RFM69_readAllRegs+0x338>)
 8000f3e:	f000 ff4b 	bl	8001dd8 <debug_printf>
      capVal = (regVal >> 2) & 0x7;
 8000f42:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
      if (capVal == 0x0) {
 8000f54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d103      	bne.n	8000f64 <RFM69_readAllRegs+0x13c>
        debug_printf("000 -> Sleep mode (SLEEP)\r\n");
 8000f5c:	4881      	ldr	r0, [pc, #516]	; (8001164 <RFM69_readAllRegs+0x33c>)
 8000f5e:	f000 ff3b 	bl	8001dd8 <debug_printf>
 8000f62:	e029      	b.n	8000fb8 <RFM69_readAllRegs+0x190>
      } else if (capVal == 0b001) {
 8000f64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d103      	bne.n	8000f74 <RFM69_readAllRegs+0x14c>
        debug_printf("001 -> Standby mode (STDBY)\r\n");
 8000f6c:	487e      	ldr	r0, [pc, #504]	; (8001168 <RFM69_readAllRegs+0x340>)
 8000f6e:	f000 ff33 	bl	8001dd8 <debug_printf>
 8000f72:	e021      	b.n	8000fb8 <RFM69_readAllRegs+0x190>
      } else if (capVal == 0b010) {
 8000f74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d103      	bne.n	8000f84 <RFM69_readAllRegs+0x15c>
        debug_printf("010 -> Frequency Synthesizer mode (FS)\r\n");
 8000f7c:	487b      	ldr	r0, [pc, #492]	; (800116c <RFM69_readAllRegs+0x344>)
 8000f7e:	f000 ff2b 	bl	8001dd8 <debug_printf>
 8000f82:	e019      	b.n	8000fb8 <RFM69_readAllRegs+0x190>
      } else if (capVal == 0b011) {
 8000f84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d103      	bne.n	8000f94 <RFM69_readAllRegs+0x16c>
        debug_printf("011 -> Transmitter mode (TX)\r\n");
 8000f8c:	4878      	ldr	r0, [pc, #480]	; (8001170 <RFM69_readAllRegs+0x348>)
 8000f8e:	f000 ff23 	bl	8001dd8 <debug_printf>
 8000f92:	e011      	b.n	8000fb8 <RFM69_readAllRegs+0x190>
      } else if (capVal == 0b100) {
 8000f94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d103      	bne.n	8000fa4 <RFM69_readAllRegs+0x17c>
        debug_printf("100 -> Receiver Mode (RX)\r\n");
 8000f9c:	4875      	ldr	r0, [pc, #468]	; (8001174 <RFM69_readAllRegs+0x34c>)
 8000f9e:	f000 ff1b 	bl	8001dd8 <debug_printf>
 8000fa2:	e009      	b.n	8000fb8 <RFM69_readAllRegs+0x190>
      } else {
        // debug_printf( capVal, BIN );
        sprintf(log_buffer,"%02X -> RESERVED\n", capVal );
 8000fa4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4973      	ldr	r1, [pc, #460]	; (8001178 <RFM69_readAllRegs+0x350>)
 8000fac:	4863      	ldr	r0, [pc, #396]	; (800113c <RFM69_readAllRegs+0x314>)
 8000fae:	f003 ff67 	bl	8004e80 <siprintf>
        debug_printf(log_buffer);
 8000fb2:	4862      	ldr	r0, [pc, #392]	; (800113c <RFM69_readAllRegs+0x314>)
 8000fb4:	f000 ff10 	bl	8001dd8 <debug_printf>
      }
      debug_printf("\r\n");
 8000fb8:	485d      	ldr	r0, [pc, #372]	; (8001130 <RFM69_readAllRegs+0x308>)
 8000fba:	f000 ff0d 	bl	8001dd8 <debug_printf>
      break;
 8000fbe:	e25a      	b.n	8001476 <RFM69_readAllRegs+0x64e>
    }

    case 0x2: {

      debug_printf("Data Processing mode:\r\nDataMode : ");
 8000fc0:	486e      	ldr	r0, [pc, #440]	; (800117c <RFM69_readAllRegs+0x354>)
 8000fc2:	f000 ff09 	bl	8001dd8 <debug_printf>
      capVal = (regVal >> 5) & 0x3;
 8000fc6:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
      if (capVal == 0b00) {
 8000fd8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d103      	bne.n	8000fe8 <RFM69_readAllRegs+0x1c0>
        debug_printf("00 -> Packet mode\r\n");
 8000fe0:	4867      	ldr	r0, [pc, #412]	; (8001180 <RFM69_readAllRegs+0x358>)
 8000fe2:	f000 fef9 	bl	8001dd8 <debug_printf>
 8000fe6:	e016      	b.n	8001016 <RFM69_readAllRegs+0x1ee>
      } else if (capVal == 0b01) {
 8000fe8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d103      	bne.n	8000ff8 <RFM69_readAllRegs+0x1d0>
        debug_printf("01 -> reserved\r\n");
 8000ff0:	4864      	ldr	r0, [pc, #400]	; (8001184 <RFM69_readAllRegs+0x35c>)
 8000ff2:	f000 fef1 	bl	8001dd8 <debug_printf>
 8000ff6:	e00e      	b.n	8001016 <RFM69_readAllRegs+0x1ee>
      } else if (capVal == 0b10) {
 8000ff8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d103      	bne.n	8001008 <RFM69_readAllRegs+0x1e0>
        debug_printf("10 -> Continuous mode with bit synchronizer\r\n");
 8001000:	4861      	ldr	r0, [pc, #388]	; (8001188 <RFM69_readAllRegs+0x360>)
 8001002:	f000 fee9 	bl	8001dd8 <debug_printf>
 8001006:	e006      	b.n	8001016 <RFM69_readAllRegs+0x1ee>
      } else if (capVal == 0b11) {
 8001008:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800100c:	2b03      	cmp	r3, #3
 800100e:	d102      	bne.n	8001016 <RFM69_readAllRegs+0x1ee>
        debug_printf("11 -> Continuous mode without bit synchronizer\r\n");
 8001010:	485e      	ldr	r0, [pc, #376]	; (800118c <RFM69_readAllRegs+0x364>)
 8001012:	f000 fee1 	bl	8001dd8 <debug_printf>
      }

      debug_printf("\r\nModulation scheme:\r\nModulation Type : ");
 8001016:	485e      	ldr	r0, [pc, #376]	; (8001190 <RFM69_readAllRegs+0x368>)
 8001018:	f000 fede 	bl	8001dd8 <debug_printf>
      capVal = (regVal >> 3) & 0x3;
 800101c:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	b29b      	uxth	r3, r3
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
      if (capVal == 0b00) {
 800102e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001032:	2b00      	cmp	r3, #0
 8001034:	d106      	bne.n	8001044 <RFM69_readAllRegs+0x21c>
        debug_printf("00 -> FSK\r\n");
 8001036:	4857      	ldr	r0, [pc, #348]	; (8001194 <RFM69_readAllRegs+0x36c>)
 8001038:	f000 fece 	bl	8001dd8 <debug_printf>
        modeFSK = 1;
 800103c:	2301      	movs	r3, #1
 800103e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8001042:	e016      	b.n	8001072 <RFM69_readAllRegs+0x24a>
      } else if (capVal == 0b01) {
 8001044:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001048:	2b01      	cmp	r3, #1
 800104a:	d103      	bne.n	8001054 <RFM69_readAllRegs+0x22c>
        debug_printf("01 -> OOK\r\n");
 800104c:	4852      	ldr	r0, [pc, #328]	; (8001198 <RFM69_readAllRegs+0x370>)
 800104e:	f000 fec3 	bl	8001dd8 <debug_printf>
 8001052:	e00e      	b.n	8001072 <RFM69_readAllRegs+0x24a>
      } else if (capVal == 0b10) {
 8001054:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001058:	2b02      	cmp	r3, #2
 800105a:	d103      	bne.n	8001064 <RFM69_readAllRegs+0x23c>
        debug_printf("10 -> reserved\r\n");
 800105c:	484f      	ldr	r0, [pc, #316]	; (800119c <RFM69_readAllRegs+0x374>)
 800105e:	f000 febb 	bl	8001dd8 <debug_printf>
 8001062:	e006      	b.n	8001072 <RFM69_readAllRegs+0x24a>
      } else if (capVal == 0b11) {
 8001064:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001068:	2b03      	cmp	r3, #3
 800106a:	d102      	bne.n	8001072 <RFM69_readAllRegs+0x24a>
        debug_printf("11 -> reserved\r\n");
 800106c:	484c      	ldr	r0, [pc, #304]	; (80011a0 <RFM69_readAllRegs+0x378>)
 800106e:	f000 feb3 	bl	8001dd8 <debug_printf>
      }

      debug_printf("\r\nData shaping: ");
 8001072:	484c      	ldr	r0, [pc, #304]	; (80011a4 <RFM69_readAllRegs+0x37c>)
 8001074:	f000 feb0 	bl	8001dd8 <debug_printf>
      if (modeFSK) {
 8001078:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <RFM69_readAllRegs+0x260>
        debug_printf("in FSK:\r\n");
 8001080:	4849      	ldr	r0, [pc, #292]	; (80011a8 <RFM69_readAllRegs+0x380>)
 8001082:	f000 fea9 	bl	8001dd8 <debug_printf>
 8001086:	e002      	b.n	800108e <RFM69_readAllRegs+0x266>
      } else {
        debug_printf("in OOK:\r\n");
 8001088:	4848      	ldr	r0, [pc, #288]	; (80011ac <RFM69_readAllRegs+0x384>)
 800108a:	f000 fea5 	bl	8001dd8 <debug_printf>
      }
      debug_printf("ModulationShaping : ");
 800108e:	4848      	ldr	r0, [pc, #288]	; (80011b0 <RFM69_readAllRegs+0x388>)
 8001090:	f000 fea2 	bl	8001dd8 <debug_printf>
      capVal = regVal & 0x3;
 8001094:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8001098:	b29b      	uxth	r3, r3
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
      if (modeFSK) {
 80010a2:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d01f      	beq.n	80010ea <RFM69_readAllRegs+0x2c2>
        if (capVal == 0b00) {
 80010aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d103      	bne.n	80010ba <RFM69_readAllRegs+0x292>
          debug_printf("00 -> no shaping\r\n");
 80010b2:	4840      	ldr	r0, [pc, #256]	; (80011b4 <RFM69_readAllRegs+0x38c>)
 80010b4:	f000 fe90 	bl	8001dd8 <debug_printf>
 80010b8:	e036      	b.n	8001128 <RFM69_readAllRegs+0x300>
        } else if (capVal == 0b01) {
 80010ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d103      	bne.n	80010ca <RFM69_readAllRegs+0x2a2>
          debug_printf("01 -> Gaussian filter, BT = 1.0\r\n");
 80010c2:	483d      	ldr	r0, [pc, #244]	; (80011b8 <RFM69_readAllRegs+0x390>)
 80010c4:	f000 fe88 	bl	8001dd8 <debug_printf>
 80010c8:	e02e      	b.n	8001128 <RFM69_readAllRegs+0x300>
        } else if (capVal == 0b10) {
 80010ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d103      	bne.n	80010da <RFM69_readAllRegs+0x2b2>
          debug_printf("10 -> Gaussian filter, BT = 0.5\r\n");
 80010d2:	483a      	ldr	r0, [pc, #232]	; (80011bc <RFM69_readAllRegs+0x394>)
 80010d4:	f000 fe80 	bl	8001dd8 <debug_printf>
 80010d8:	e026      	b.n	8001128 <RFM69_readAllRegs+0x300>
        } else if (capVal == 0b11) {
 80010da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d122      	bne.n	8001128 <RFM69_readAllRegs+0x300>
          debug_printf("11 -> Gaussian filter, BT = 0.3\r\n");
 80010e2:	4837      	ldr	r0, [pc, #220]	; (80011c0 <RFM69_readAllRegs+0x398>)
 80010e4:	f000 fe78 	bl	8001dd8 <debug_printf>
 80010e8:	e01e      	b.n	8001128 <RFM69_readAllRegs+0x300>
        }
      } else {
        if (capVal == 0b00) {
 80010ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d103      	bne.n	80010fa <RFM69_readAllRegs+0x2d2>
          debug_printf("00 -> no shaping\r\n");
 80010f2:	4830      	ldr	r0, [pc, #192]	; (80011b4 <RFM69_readAllRegs+0x38c>)
 80010f4:	f000 fe70 	bl	8001dd8 <debug_printf>
 80010f8:	e016      	b.n	8001128 <RFM69_readAllRegs+0x300>
        } else if (capVal == 0b01) {
 80010fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d103      	bne.n	800110a <RFM69_readAllRegs+0x2e2>
          debug_printf("01 -> filtering with f(cutoff) = BR\r\n");
 8001102:	4830      	ldr	r0, [pc, #192]	; (80011c4 <RFM69_readAllRegs+0x39c>)
 8001104:	f000 fe68 	bl	8001dd8 <debug_printf>
 8001108:	e00e      	b.n	8001128 <RFM69_readAllRegs+0x300>
        } else if (capVal == 0b10) {
 800110a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800110e:	2b02      	cmp	r3, #2
 8001110:	d103      	bne.n	800111a <RFM69_readAllRegs+0x2f2>
          debug_printf("10 -> filtering with f(cutoff) = 2*BR\r\n");
 8001112:	482d      	ldr	r0, [pc, #180]	; (80011c8 <RFM69_readAllRegs+0x3a0>)
 8001114:	f000 fe60 	bl	8001dd8 <debug_printf>
 8001118:	e006      	b.n	8001128 <RFM69_readAllRegs+0x300>
        } else if (capVal == 0b11) {
 800111a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800111e:	2b03      	cmp	r3, #3
 8001120:	d102      	bne.n	8001128 <RFM69_readAllRegs+0x300>
          debug_printf("ERROR - 11 is reserved\r\n");
 8001122:	482a      	ldr	r0, [pc, #168]	; (80011cc <RFM69_readAllRegs+0x3a4>)
 8001124:	f000 fe58 	bl	8001dd8 <debug_printf>
        }
      }

      debug_printf("\r\n");
 8001128:	4801      	ldr	r0, [pc, #4]	; (8001130 <RFM69_readAllRegs+0x308>)
 800112a:	f000 fe55 	bl	8001dd8 <debug_printf>
      break;
 800112e:	e1a2      	b.n	8001476 <RFM69_readAllRegs+0x64e>
 8001130:	08005774 	.word	0x08005774
 8001134:	08005778 	.word	0x08005778
 8001138:	08005788 	.word	0x08005788
 800113c:	200000e8 	.word	0x200000e8
 8001140:	08005798 	.word	0x08005798
 8001144:	080057e0 	.word	0x080057e0
 8001148:	08005804 	.word	0x08005804
 800114c:	08005870 	.word	0x08005870
 8001150:	080058c0 	.word	0x080058c0
 8001154:	080058cc 	.word	0x080058cc
 8001158:	080058ec 	.word	0x080058ec
 800115c:	08005958 	.word	0x08005958
 8001160:	080059a4 	.word	0x080059a4
 8001164:	080059d0 	.word	0x080059d0
 8001168:	080059ec 	.word	0x080059ec
 800116c:	08005a0c 	.word	0x08005a0c
 8001170:	08005a38 	.word	0x08005a38
 8001174:	08005a58 	.word	0x08005a58
 8001178:	08005a74 	.word	0x08005a74
 800117c:	08005a88 	.word	0x08005a88
 8001180:	08005aac 	.word	0x08005aac
 8001184:	08005ac0 	.word	0x08005ac0
 8001188:	08005ad4 	.word	0x08005ad4
 800118c:	08005b04 	.word	0x08005b04
 8001190:	08005b38 	.word	0x08005b38
 8001194:	08005b64 	.word	0x08005b64
 8001198:	08005b70 	.word	0x08005b70
 800119c:	08005b7c 	.word	0x08005b7c
 80011a0:	08005b90 	.word	0x08005b90
 80011a4:	08005ba4 	.word	0x08005ba4
 80011a8:	08005bb8 	.word	0x08005bb8
 80011ac:	08005bc4 	.word	0x08005bc4
 80011b0:	08005bd0 	.word	0x08005bd0
 80011b4:	08005be8 	.word	0x08005be8
 80011b8:	08005bfc 	.word	0x08005bfc
 80011bc:	08005c20 	.word	0x08005c20
 80011c0:	08005c44 	.word	0x08005c44
 80011c4:	08005c68 	.word	0x08005c68
 80011c8:	08005c90 	.word	0x08005c90
 80011cc:	08005cb8 	.word	0x08005cb8
    }

    case 0x3: {
      bitRate = (regVal << 8);
 80011d0:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	17da      	asrs	r2, r3, #31
 80011d8:	469a      	mov	sl, r3
 80011da:	4693      	mov	fp, r2
 80011dc:	e9c7 ab2c 	strd	sl, fp, [r7, #176]	; 0xb0
      break;
 80011e0:	e149      	b.n	8001476 <RFM69_readAllRegs+0x64e>
    }

    case 0x4: {
      bitRate |= regVal;
 80011e2:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80011e6:	2200      	movs	r2, #0
 80011e8:	461c      	mov	r4, r3
 80011ea:	4615      	mov	r5, r2
 80011ec:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80011f0:	ea42 0804 	orr.w	r8, r2, r4
 80011f4:	ea43 0905 	orr.w	r9, r3, r5
 80011f8:	e9c7 892c 	strd	r8, r9, [r7, #176]	; 0xb0
      debug_printf("Bit Rate (Chip Rate when Manchester encoding is enabled)\r\nBitRate : ");
 80011fc:	48a9      	ldr	r0, [pc, #676]	; (80014a4 <RFM69_readAllRegs+0x67c>)
 80011fe:	f000 fdeb 	bl	8001dd8 <debug_printf>
      uint64_t val = 32UL * 1000UL * 1000UL / bitRate;
 8001202:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001206:	48a8      	ldr	r0, [pc, #672]	; (80014a8 <RFM69_readAllRegs+0x680>)
 8001208:	f04f 0100 	mov.w	r1, #0
 800120c:	f7ff f838 	bl	8000280 <__aeabi_uldivmod>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      sprintf(pcBuf, "%lld", val);
 8001218:	1d38      	adds	r0, r7, #4
 800121a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800121e:	49a3      	ldr	r1, [pc, #652]	; (80014ac <RFM69_readAllRegs+0x684>)
 8001220:	f003 fe2e 	bl	8004e80 <siprintf>
      debug_printf(pcBuf);
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fdd6 	bl	8001dd8 <debug_printf>
      debug_printf("\r\n");
 800122c:	48a0      	ldr	r0, [pc, #640]	; (80014b0 <RFM69_readAllRegs+0x688>)
 800122e:	f000 fdd3 	bl	8001dd8 <debug_printf>
      break;
 8001232:	e120      	b.n	8001476 <RFM69_readAllRegs+0x64e>
    }

    case 0x5: {
      freqDev = ((regVal & 0x3f) << 8);
 8001234:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800123e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      break;
 8001242:	e118      	b.n	8001476 <RFM69_readAllRegs+0x64e>
    }

    case 0x6: {
      freqDev |= regVal;
 8001244:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8001248:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800124c:	4313      	orrs	r3, r2
 800124e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      debug_printf("Frequency deviation\r\nFdev : ");
 8001252:	4898      	ldr	r0, [pc, #608]	; (80014b4 <RFM69_readAllRegs+0x68c>)
 8001254:	f000 fdc0 	bl	8001dd8 <debug_printf>
      uint32_t val = 61UL * freqDev;
 8001258:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800125c:	4613      	mov	r3, r2
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	1a9b      	subs	r3, r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      sprintf(pcBuf, "%ld", val);
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001270:	4991      	ldr	r1, [pc, #580]	; (80014b8 <RFM69_readAllRegs+0x690>)
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fe04 	bl	8004e80 <siprintf>
      debug_printf(pcBuf);
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4618      	mov	r0, r3
 800127c:	f000 fdac 	bl	8001dd8 <debug_printf>
      debug_printf("\r\n");
 8001280:	488b      	ldr	r0, [pc, #556]	; (80014b0 <RFM69_readAllRegs+0x688>)
 8001282:	f000 fda9 	bl	8001dd8 <debug_printf>
      break;
 8001286:	e0f6      	b.n	8001476 <RFM69_readAllRegs+0x64e>
    }

    case 0x7: {
      unsigned long tempVal = regVal;
 8001288:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800128c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      freqCenter = (tempVal << 16);
 8001290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001294:	041b      	lsls	r3, r3, #16
 8001296:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      break;
 800129a:	e0ec      	b.n	8001476 <RFM69_readAllRegs+0x64e>
    }

    case 0x8: {
      unsigned long tempVal = regVal;
 800129c:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80012a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      freqCenter = freqCenter | (tempVal << 8);
 80012a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80012ae:	4313      	orrs	r3, r2
 80012b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      break;
 80012b4:	e0df      	b.n	8001476 <RFM69_readAllRegs+0x64e>
    }

    case 0x9: {
      freqCenter = freqCenter | regVal;
 80012b6:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80012ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80012be:	4313      	orrs	r3, r2
 80012c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      debug_printf("RF Carrier frequency\r\nFRF : ");
 80012c4:	487d      	ldr	r0, [pc, #500]	; (80014bc <RFM69_readAllRegs+0x694>)
 80012c6:	f000 fd87 	bl	8001dd8 <debug_printf>
      uint32_t val = 61UL * freqCenter;
 80012ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80012ce:	4613      	mov	r3, r2
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	1a9b      	subs	r3, r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      sprintf(pcBuf, "%ld", val);
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80012e2:	4975      	ldr	r1, [pc, #468]	; (80014b8 <RFM69_readAllRegs+0x690>)
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 fdcb 	bl	8004e80 <siprintf>
      debug_printf(pcBuf);
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fd73 	bl	8001dd8 <debug_printf>
      debug_printf("\r\n");
 80012f2:	486f      	ldr	r0, [pc, #444]	; (80014b0 <RFM69_readAllRegs+0x688>)
 80012f4:	f000 fd70 	bl	8001dd8 <debug_printf>
      break;
 80012f8:	e0bd      	b.n	8001476 <RFM69_readAllRegs+0x64e>
    }

    case 0xa: {
      debug_printf("RC calibration control & status\r\nRcCalDone : ");
 80012fa:	4871      	ldr	r0, [pc, #452]	; (80014c0 <RFM69_readAllRegs+0x698>)
 80012fc:	f000 fd6c 	bl	8001dd8 <debug_printf>
      if (0x40 & regVal) {
 8001300:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8001304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <RFM69_readAllRegs+0x4ee>
        debug_printf("1 -> RC calibration is over\r\n");
 800130e:	486d      	ldr	r0, [pc, #436]	; (80014c4 <RFM69_readAllRegs+0x69c>)
 8001310:	f000 fd62 	bl	8001dd8 <debug_printf>
 8001314:	e002      	b.n	800131c <RFM69_readAllRegs+0x4f4>
      } else {
        debug_printf("0 -> RC calibration is in progress\r\n");
 8001316:	486c      	ldr	r0, [pc, #432]	; (80014c8 <RFM69_readAllRegs+0x6a0>)
 8001318:	f000 fd5e 	bl	8001dd8 <debug_printf>
      }

      debug_printf("\r\n");
 800131c:	4864      	ldr	r0, [pc, #400]	; (80014b0 <RFM69_readAllRegs+0x688>)
 800131e:	f000 fd5b 	bl	8001dd8 <debug_printf>
      break;
 8001322:	e0a8      	b.n	8001476 <RFM69_readAllRegs+0x64e>
    }

    case 0xb: {
      debug_printf(
 8001324:	4869      	ldr	r0, [pc, #420]	; (80014cc <RFM69_readAllRegs+0x6a4>)
 8001326:	f000 fd57 	bl	8001dd8 <debug_printf>
          "Improved AFC routine for signals with modulation index lower than "
          "2.  Refer to section 3.4.16 for details\r\nAfcLowBetaOn : ");
      if (0x20 & regVal) {
 800132a:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800132e:	f003 0320 	and.w	r3, r3, #32
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <RFM69_readAllRegs+0x518>
        debug_printf("1 -> Improved AFC routine\r\n");
 8001338:	4865      	ldr	r0, [pc, #404]	; (80014d0 <RFM69_readAllRegs+0x6a8>)
 800133a:	f000 fd4d 	bl	8001dd8 <debug_printf>
 800133e:	e002      	b.n	8001346 <RFM69_readAllRegs+0x51e>
      } else {
        debug_printf("0 -> Standard AFC routine\r\n");
 8001340:	4864      	ldr	r0, [pc, #400]	; (80014d4 <RFM69_readAllRegs+0x6ac>)
 8001342:	f000 fd49 	bl	8001dd8 <debug_printf>
      }
      debug_printf("\r\n");
 8001346:	485a      	ldr	r0, [pc, #360]	; (80014b0 <RFM69_readAllRegs+0x688>)
 8001348:	f000 fd46 	bl	8001dd8 <debug_printf>
      break;
 800134c:	e093      	b.n	8001476 <RFM69_readAllRegs+0x64e>
    }

    case 0xc: {
      debug_printf("Reserved\r\n");
 800134e:	4862      	ldr	r0, [pc, #392]	; (80014d8 <RFM69_readAllRegs+0x6b0>)
 8001350:	f000 fd42 	bl	8001dd8 <debug_printf>
      break;
 8001354:	e08f      	b.n	8001476 <RFM69_readAllRegs+0x64e>
    }

    case 0xd: {
      uint8_t val;
      debug_printf("Resolution of Listen mode Idle time (calibrated RC osc):\r\nListenResolIdle : ");
 8001356:	4861      	ldr	r0, [pc, #388]	; (80014dc <RFM69_readAllRegs+0x6b4>)
 8001358:	f000 fd3e 	bl	8001dd8 <debug_printf>
      val = regVal >> 6;
 800135c:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8001360:	099b      	lsrs	r3, r3, #6
 8001362:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
      if (val == 0b00) {
 8001366:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800136a:	2b00      	cmp	r3, #0
 800136c:	d103      	bne.n	8001376 <RFM69_readAllRegs+0x54e>
        debug_printf("00 -> reserved\r\n");
 800136e:	485c      	ldr	r0, [pc, #368]	; (80014e0 <RFM69_readAllRegs+0x6b8>)
 8001370:	f000 fd32 	bl	8001dd8 <debug_printf>
 8001374:	e016      	b.n	80013a4 <RFM69_readAllRegs+0x57c>
      } else if (val == 0b01) {
 8001376:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800137a:	2b01      	cmp	r3, #1
 800137c:	d103      	bne.n	8001386 <RFM69_readAllRegs+0x55e>
        debug_printf("01 -> 64 us\r\n");
 800137e:	4859      	ldr	r0, [pc, #356]	; (80014e4 <RFM69_readAllRegs+0x6bc>)
 8001380:	f000 fd2a 	bl	8001dd8 <debug_printf>
 8001384:	e00e      	b.n	80013a4 <RFM69_readAllRegs+0x57c>
      } else if (val == 0b10) {
 8001386:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800138a:	2b02      	cmp	r3, #2
 800138c:	d103      	bne.n	8001396 <RFM69_readAllRegs+0x56e>
        debug_printf("10 -> 4.1 ms\r\n");
 800138e:	4856      	ldr	r0, [pc, #344]	; (80014e8 <RFM69_readAllRegs+0x6c0>)
 8001390:	f000 fd22 	bl	8001dd8 <debug_printf>
 8001394:	e006      	b.n	80013a4 <RFM69_readAllRegs+0x57c>
      } else if (val == 0b11) {
 8001396:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800139a:	2b03      	cmp	r3, #3
 800139c:	d102      	bne.n	80013a4 <RFM69_readAllRegs+0x57c>
        debug_printf("11 -> 262 ms\r\n");
 800139e:	4853      	ldr	r0, [pc, #332]	; (80014ec <RFM69_readAllRegs+0x6c4>)
 80013a0:	f000 fd1a 	bl	8001dd8 <debug_printf>
      }

      debug_printf("\r\nResolution of Listen mode Rx time (calibrated RC osc):\r\nListenResolRx : ");
 80013a4:	4852      	ldr	r0, [pc, #328]	; (80014f0 <RFM69_readAllRegs+0x6c8>)
 80013a6:	f000 fd17 	bl	8001dd8 <debug_printf>
      val = (regVal >> 4) & 0x3;
 80013aa:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
      if (val == 0b00) {
 80013ba:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d103      	bne.n	80013ca <RFM69_readAllRegs+0x5a2>
        debug_printf("00 -> reserved\r\n");
 80013c2:	4847      	ldr	r0, [pc, #284]	; (80014e0 <RFM69_readAllRegs+0x6b8>)
 80013c4:	f000 fd08 	bl	8001dd8 <debug_printf>
 80013c8:	e016      	b.n	80013f8 <RFM69_readAllRegs+0x5d0>
      } else if (val == 0b01) {
 80013ca:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d103      	bne.n	80013da <RFM69_readAllRegs+0x5b2>
        debug_printf("01 -> 64 us\r\n");
 80013d2:	4844      	ldr	r0, [pc, #272]	; (80014e4 <RFM69_readAllRegs+0x6bc>)
 80013d4:	f000 fd00 	bl	8001dd8 <debug_printf>
 80013d8:	e00e      	b.n	80013f8 <RFM69_readAllRegs+0x5d0>
      } else if (val == 0b10) {
 80013da:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d103      	bne.n	80013ea <RFM69_readAllRegs+0x5c2>
        debug_printf("10 -> 4.1 ms\r\n");
 80013e2:	4841      	ldr	r0, [pc, #260]	; (80014e8 <RFM69_readAllRegs+0x6c0>)
 80013e4:	f000 fcf8 	bl	8001dd8 <debug_printf>
 80013e8:	e006      	b.n	80013f8 <RFM69_readAllRegs+0x5d0>
      } else if (val == 0b11) {
 80013ea:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d102      	bne.n	80013f8 <RFM69_readAllRegs+0x5d0>
        debug_printf("11 -> 262 ms\r\n");
 80013f2:	483e      	ldr	r0, [pc, #248]	; (80014ec <RFM69_readAllRegs+0x6c4>)
 80013f4:	f000 fcf0 	bl	8001dd8 <debug_printf>
      }

      debug_printf("\r\nCriteria for packet acceptance in Listen mode:\r\nListenCriteria : ");
 80013f8:	483e      	ldr	r0, [pc, #248]	; (80014f4 <RFM69_readAllRegs+0x6cc>)
 80013fa:	f000 fced 	bl	8001dd8 <debug_printf>
      if (0x8 & regVal) {
 80013fe:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <RFM69_readAllRegs+0x5ec>
        debug_printf("1 -> signal strength is above RssiThreshold and "
 800140c:	483a      	ldr	r0, [pc, #232]	; (80014f8 <RFM69_readAllRegs+0x6d0>)
 800140e:	f000 fce3 	bl	8001dd8 <debug_printf>
 8001412:	e002      	b.n	800141a <RFM69_readAllRegs+0x5f2>
                    "SyncAddress matched\r\n");
      } else {
        debug_printf("0 -> signal strength is above RssiThreshold\r\n");
 8001414:	4839      	ldr	r0, [pc, #228]	; (80014fc <RFM69_readAllRegs+0x6d4>)
 8001416:	f000 fcdf 	bl	8001dd8 <debug_printf>
      }

      debug_printf("\r\nAction taken after acceptance of a packet in Listen mode:\r\nListenEnd : ");
 800141a:	4839      	ldr	r0, [pc, #228]	; (8001500 <RFM69_readAllRegs+0x6d8>)
 800141c:	f000 fcdc 	bl	8001dd8 <debug_printf>
      val = (regVal >> 1) & 0x3;
 8001420:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8001424:	085b      	lsrs	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
      if (val == 0b00) {
 8001430:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001434:	2b00      	cmp	r3, #0
 8001436:	d103      	bne.n	8001440 <RFM69_readAllRegs+0x618>
        debug_printf("00 -> chip stays in Rx mode. Listen mode stops and must be disabled (see section 4.3)\r\n");
 8001438:	4832      	ldr	r0, [pc, #200]	; (8001504 <RFM69_readAllRegs+0x6dc>)
 800143a:	f000 fccd 	bl	8001dd8 <debug_printf>
 800143e:	e016      	b.n	800146e <RFM69_readAllRegs+0x646>
      } else if (val == 0b01) {
 8001440:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001444:	2b01      	cmp	r3, #1
 8001446:	d103      	bne.n	8001450 <RFM69_readAllRegs+0x628>
        debug_printf(
 8001448:	482f      	ldr	r0, [pc, #188]	; (8001508 <RFM69_readAllRegs+0x6e0>)
 800144a:	f000 fcc5 	bl	8001dd8 <debug_printf>
 800144e:	e00e      	b.n	800146e <RFM69_readAllRegs+0x646>
            "01 -> chip stays in Rx mode until PayloadReady or Timeout \r\n"
            "interrupt occurs.  It then goes to the mode defined by Mode. \r\n"
            "Listen mode stops and must be disabled (see section 4.3)\r\n");
      } else if (val == 0b10) {
 8001450:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001454:	2b02      	cmp	r3, #2
 8001456:	d103      	bne.n	8001460 <RFM69_readAllRegs+0x638>
        debug_printf("10 -> chip stays in Rx mode until PayloadReady or Timeout "
 8001458:	482c      	ldr	r0, [pc, #176]	; (800150c <RFM69_readAllRegs+0x6e4>)
 800145a:	f000 fcbd 	bl	8001dd8 <debug_printf>
 800145e:	e006      	b.n	800146e <RFM69_readAllRegs+0x646>
                    "occurs.  Listen mode then resumes in Idle state.  FIFO "
                    "content is lost at next Rx wakeup.\r\n");
      } else if (val == 0b11) {
 8001460:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001464:	2b03      	cmp	r3, #3
 8001466:	d102      	bne.n	800146e <RFM69_readAllRegs+0x646>
        debug_printf("11 -> Reserved\r\n");
 8001468:	4829      	ldr	r0, [pc, #164]	; (8001510 <RFM69_readAllRegs+0x6e8>)
 800146a:	f000 fcb5 	bl	8001dd8 <debug_printf>
      }
      debug_printf("\r\n");
 800146e:	4810      	ldr	r0, [pc, #64]	; (80014b0 <RFM69_readAllRegs+0x688>)
 8001470:	f000 fcb2 	bl	8001dd8 <debug_printf>


      break;
 8001474:	bf00      	nop
  for (regAddr = 1; regAddr <= 0x4F; regAddr++) {
 8001476:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800147a:	3301      	adds	r3, #1
 800147c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8001480:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001484:	2b4f      	cmp	r3, #79	; 0x4f
 8001486:	f67f acec 	bls.w	8000e62 <RFM69_readAllRegs+0x3a>
    default: {}
    }

#endif
  }
  RFM69_unselect();
 800148a:	f000 f883 	bl	8001594 <RFM69_unselect>
  debug_printf("\r\n");
 800148e:	4808      	ldr	r0, [pc, #32]	; (80014b0 <RFM69_readAllRegs+0x688>)
 8001490:	f000 fca2 	bl	8001dd8 <debug_printf>
  debug_printf("end read all regs\r\n");
 8001494:	481f      	ldr	r0, [pc, #124]	; (8001514 <RFM69_readAllRegs+0x6ec>)
 8001496:	f000 fc9f 	bl	8001dd8 <debug_printf>
}
 800149a:	bf00      	nop
 800149c:	37c0      	adds	r7, #192	; 0xc0
 800149e:	46bd      	mov	sp, r7
 80014a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014a4:	08005cd4 	.word	0x08005cd4
 80014a8:	01e84800 	.word	0x01e84800
 80014ac:	08005d1c 	.word	0x08005d1c
 80014b0:	08005774 	.word	0x08005774
 80014b4:	08005d24 	.word	0x08005d24
 80014b8:	08005d44 	.word	0x08005d44
 80014bc:	08005d48 	.word	0x08005d48
 80014c0:	08005d68 	.word	0x08005d68
 80014c4:	08005d98 	.word	0x08005d98
 80014c8:	08005db8 	.word	0x08005db8
 80014cc:	08005de0 	.word	0x08005de0
 80014d0:	08005e5c 	.word	0x08005e5c
 80014d4:	08005e78 	.word	0x08005e78
 80014d8:	08005e94 	.word	0x08005e94
 80014dc:	08005ea0 	.word	0x08005ea0
 80014e0:	08005ef0 	.word	0x08005ef0
 80014e4:	08005f04 	.word	0x08005f04
 80014e8:	08005f14 	.word	0x08005f14
 80014ec:	08005f24 	.word	0x08005f24
 80014f0:	08005f34 	.word	0x08005f34
 80014f4:	08005f80 	.word	0x08005f80
 80014f8:	08005fc4 	.word	0x08005fc4
 80014fc:	0800600c 	.word	0x0800600c
 8001500:	0800603c 	.word	0x0800603c
 8001504:	08006088 	.word	0x08006088
 8001508:	080060e0 	.word	0x080060e0
 800150c:	08006198 	.word	0x08006198
 8001510:	08006230 	.word	0x08006230
 8001514:	08006244 	.word	0x08006244

08001518 <RFM69_readReg>:
  RFM69_writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
  while ((RFM69_readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00);
}

uint8_t RFM69_readReg(uint8_t addr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  uint8_t regval;
  RFM69_select();
 8001522:	f000 f82e 	bl	8001582 <RFM69_select>
  SPI_transfer8(addr & 0x7F);
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fb1a 	bl	8001b68 <SPI_transfer8>
  regval = SPI_transfer8(0);
 8001534:	2000      	movs	r0, #0
 8001536:	f000 fb17 	bl	8001b68 <SPI_transfer8>
 800153a:	4603      	mov	r3, r0
 800153c:	73fb      	strb	r3, [r7, #15]
  RFM69_unselect();
 800153e:	f000 f829 	bl	8001594 <RFM69_unselect>
  return regval;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <RFM69_writeReg>:

void RFM69_writeReg(uint8_t addr, uint8_t value)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	460a      	mov	r2, r1
 8001556:	71fb      	strb	r3, [r7, #7]
 8001558:	4613      	mov	r3, r2
 800155a:	71bb      	strb	r3, [r7, #6]
  RFM69_select();
 800155c:	f000 f811 	bl	8001582 <RFM69_select>
  SPI_transfer8(addr | 0x80);
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001566:	b2db      	uxtb	r3, r3
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fafd 	bl	8001b68 <SPI_transfer8>
  SPI_transfer8(value);
 800156e:	79bb      	ldrb	r3, [r7, #6]
 8001570:	4618      	mov	r0, r3
 8001572:	f000 faf9 	bl	8001b68 <SPI_transfer8>
  RFM69_unselect();
 8001576:	f000 f80d 	bl	8001594 <RFM69_unselect>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <RFM69_select>:

// select the RFM69 transceiver (save SPI settings, set CS low)
void RFM69_select()
{
 8001582:	b580      	push	{r7, lr}
 8001584:	af00      	add	r7, sp, #0
  noInterrupts();
 8001586:	f000 f867 	bl	8001658 <noInterrupts>
  RFM69_SetCSPin(0);
 800158a:	2000      	movs	r0, #0
 800158c:	f000 f880 	bl	8001690 <RFM69_SetCSPin>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <RFM69_unselect>:

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void RFM69_unselect()
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  RFM69_SetCSPin(1);
 8001598:	2001      	movs	r0, #1
 800159a:	f000 f879 	bl	8001690 <RFM69_SetCSPin>
  interrupts();
 800159e:	f000 f869 	bl	8001674 <interrupts>
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <PrintStruct>:
  uint32_t uptime; // uptime in ms
  int16_t rssi;
} dataSTR;
extern dataSTR theData;
// function below
void PrintStruct(void) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  if (datalen != sizeof(dataSTR)) {
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <PrintStruct+0x60>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b0c      	cmp	r3, #12
 80015b2:	d003      	beq.n	80015bc <PrintStruct+0x14>
    debug_printf("Invalid payload received, not matching data struct!\r\n");
 80015b4:	4815      	ldr	r0, [pc, #84]	; (800160c <PrintStruct+0x64>)
 80015b6:	f000 fc0f 	bl	8001dd8 <debug_printf>
    sprintf(log_buffer, " RSSI=%ld\r\n", theData.rssi);
        debug_printf(log_buffer);
    //sprintf(log_buffer, " size of the struct=%d\r\n", sizeof(PayloadSTR));
    //debug_printf(log_buffer); // 12
  }
}
 80015ba:	e023      	b.n	8001604 <PrintStruct+0x5c>
    theData = *(dataSTR *)data;
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <PrintStruct+0x68>)
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <PrintStruct+0x6c>)
 80015c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80015c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    sprintf(log_buffer, " nodeId=%ld\r\n", theData.nodeId);
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <PrintStruct+0x6c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4912      	ldr	r1, [pc, #72]	; (8001618 <PrintStruct+0x70>)
 80015ce:	4813      	ldr	r0, [pc, #76]	; (800161c <PrintStruct+0x74>)
 80015d0:	f003 fc56 	bl	8004e80 <siprintf>
    debug_printf(log_buffer);
 80015d4:	4811      	ldr	r0, [pc, #68]	; (800161c <PrintStruct+0x74>)
 80015d6:	f000 fbff 	bl	8001dd8 <debug_printf>
    sprintf(log_buffer, " uptime=%ld\r\n", theData.uptime);
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <PrintStruct+0x6c>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	461a      	mov	r2, r3
 80015e0:	490f      	ldr	r1, [pc, #60]	; (8001620 <PrintStruct+0x78>)
 80015e2:	480e      	ldr	r0, [pc, #56]	; (800161c <PrintStruct+0x74>)
 80015e4:	f003 fc4c 	bl	8004e80 <siprintf>
    debug_printf(log_buffer);
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <PrintStruct+0x74>)
 80015ea:	f000 fbf5 	bl	8001dd8 <debug_printf>
    sprintf(log_buffer, " RSSI=%ld\r\n", theData.rssi);
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <PrintStruct+0x6c>)
 80015f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015f4:	461a      	mov	r2, r3
 80015f6:	490b      	ldr	r1, [pc, #44]	; (8001624 <PrintStruct+0x7c>)
 80015f8:	4808      	ldr	r0, [pc, #32]	; (800161c <PrintStruct+0x74>)
 80015fa:	f003 fc41 	bl	8004e80 <siprintf>
        debug_printf(log_buffer);
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <PrintStruct+0x74>)
 8001600:	f000 fbea 	bl	8001dd8 <debug_printf>
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200000d5 	.word	0x200000d5
 800160c:	08006258 	.word	0x08006258
 8001610:	20000098 	.word	0x20000098
 8001614:	20000180 	.word	0x20000180
 8001618:	08006290 	.word	0x08006290
 800161c:	200000e8 	.word	0x200000e8
 8001620:	080062a0 	.word	0x080062a0
 8001624:	080062b0 	.word	0x080062b0

08001628 <RFM69_RST>:
bool GO_AHEAD_READ_RFM69;
bool rststate;
extern char log_buffer[30];


void RFM69_RST(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001636:	f000 ff55 	bl	80024e4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800163a:	200a      	movs	r0, #10
 800163c:	f000 fc86 	bl	8001f4c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164a:	f000 ff4b 	bl	80024e4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 800164e:	2032      	movs	r0, #50	; 0x32
 8001650:	f000 fc7c 	bl	8001f4c <HAL_Delay>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <noInterrupts>:

// extern functions
bool noInterrupts()                // function to disable interrupts
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
GO_AHEAD_READ_RFM69 = 0;
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <noInterrupts+0x18>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
return true;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	200000dd 	.word	0x200000dd

08001674 <interrupts>:

bool interrupts()                  // function to enable interrupts
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
GO_AHEAD_READ_RFM69 = 1;
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <interrupts+0x18>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
return true;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	200000dd 	.word	0x200000dd

08001690 <RFM69_SetCSPin>:

void RFM69_SetCSPin(bool SetCSValue)          // function to control the GPIO tied to RFM69 chip select (parameter HIGH or LOW)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SetCSValue); //GPIOA, GPIO_PIN_5 is LED on Nucleao, for testing only.
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	461a      	mov	r2, r3
 800169e:	2108      	movs	r1, #8
 80016a0:	4803      	ldr	r0, [pc, #12]	; (80016b0 <RFM69_SetCSPin+0x20>)
 80016a2:	f000 ff1f 	bl	80024e4 <HAL_GPIO_WritePin>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	48000400 	.word	0x48000400

080016b4 <RFM69_ReadDIO0Pin>:

bool RFM69_ReadDIO0Pin(void)       // function to read GPIO connected to RFM69 DIO0 (RFM69 interrupt signalling)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  if (GO_AHEAD_READ_RFM69 == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1)
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <RFM69_ReadDIO0Pin+0x28>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00a      	beq.n	80016d6 <RFM69_ReadDIO0Pin+0x22>
 80016c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c8:	f000 fef4 	bl	80024b4 <HAL_GPIO_ReadPin>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <RFM69_ReadDIO0Pin+0x22>
  {
    return true;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <RFM69_ReadDIO0Pin+0x24>
  }
  else
  {
    return false;
 80016d6:	2300      	movs	r3, #0
  }
}
 80016d8:	4618      	mov	r0, r3
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200000dd 	.word	0x200000dd

080016e0 <Timeout_IsTimeout1>:
}
*/

static uint32_t thistimeout1;
bool Timeout_IsTimeout1(void)      // function for timeout handling, checks if previously set timeout expired
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  if(HAL_GetTick() >= thistimeout1)
 80016e4:	f000 fc26 	bl	8001f34 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <Timeout_IsTimeout1+0x2c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d308      	bcc.n	8001704 <Timeout_IsTimeout1+0x24>
    {
      sprintf(log_buffer,"TimeOut1!\r\n");
 80016f2:	4907      	ldr	r1, [pc, #28]	; (8001710 <Timeout_IsTimeout1+0x30>)
 80016f4:	4807      	ldr	r0, [pc, #28]	; (8001714 <Timeout_IsTimeout1+0x34>)
 80016f6:	f003 fbc3 	bl	8004e80 <siprintf>
      debug_printf(log_buffer);
 80016fa:	4806      	ldr	r0, [pc, #24]	; (8001714 <Timeout_IsTimeout1+0x34>)
 80016fc:	f000 fb6c 	bl	8001dd8 <debug_printf>
      return true;
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <Timeout_IsTimeout1+0x26>
    }
  else
  {
    return false;
 8001704:	2300      	movs	r3, #0
  }
}
 8001706:	4618      	mov	r0, r3
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200000e0 	.word	0x200000e0
 8001710:	080062f8 	.word	0x080062f8
 8001714:	200000e8 	.word	0x200000e8

08001718 <Timeout_SetTimeout1>:
void Timeout_SetTimeout1(uint16_t settimeoutvalue) // function for timeout handling, sets a timeout, parameter is in milliseconds (ms)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
  thistimeout1 = HAL_GetTick() + settimeoutvalue;
 8001722:	f000 fc07 	bl	8001f34 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	4413      	add	r3, r2
 800172c:	4a02      	ldr	r2, [pc, #8]	; (8001738 <Timeout_SetTimeout1+0x20>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200000e0 	.word	0x200000e0

0800173c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001752:	4b30      	ldr	r3, [pc, #192]	; (8001814 <MX_GPIO_Init+0xd8>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	4a2f      	ldr	r2, [pc, #188]	; (8001814 <MX_GPIO_Init+0xd8>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175e:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <MX_GPIO_Init+0xd8>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <MX_GPIO_Init+0xd8>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	4a29      	ldr	r2, [pc, #164]	; (8001814 <MX_GPIO_Init+0xd8>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001776:	4b27      	ldr	r3, [pc, #156]	; (8001814 <MX_GPIO_Init+0xd8>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	4b24      	ldr	r3, [pc, #144]	; (8001814 <MX_GPIO_Init+0xd8>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	4a23      	ldr	r2, [pc, #140]	; (8001814 <MX_GPIO_Init+0xd8>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <MX_GPIO_Init+0xd8>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80017a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a4:	f000 fe9e 	bl	80024e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2108      	movs	r1, #8
 80017ac:	481a      	ldr	r0, [pc, #104]	; (8001818 <MX_GPIO_Init+0xdc>)
 80017ae:	f000 fe99 	bl	80024e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PA10 */
  GPIO_InitStruct.Pin = LED1_Pin|GPIO_PIN_10;
 80017b2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80017b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	4619      	mov	r1, r3
 80017ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ce:	f000 fcc7 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017dc:	2301      	movs	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ea:	f000 fcb9 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ee:	2308      	movs	r3, #8
 80017f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <MX_GPIO_Init+0xdc>)
 8001806:	f000 fcab 	bl	8002160 <HAL_GPIO_Init>

}
 800180a:	bf00      	nop
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	48000400 	.word	0x48000400

0800181c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001822:	f000 fb17 	bl	8001e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001826:	f000 f8a7 	bl	8001978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800182a:	f7ff ff87 	bl	800173c <MX_GPIO_Init>
  MX_SPI2_Init();
 800182e:	f000 f8fb 	bl	8001a28 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001832:	f000 fa45 	bl	8001cc0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(10);
 8001836:	200a      	movs	r0, #10
 8001838:	f000 fb88 	bl	8001f4c <HAL_Delay>
  //noInterrupts();
  RFM69_RST();
 800183c:	f7ff fef4 	bl	8001628 <RFM69_RST>
  HAL_Delay(10);
 8001840:	200a      	movs	r0, #10
 8001842:	f000 fb83 	bl	8001f4c <HAL_Delay>
  if (RFM69_initialize(freqBand, nodeID, networkID)) {
 8001846:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <main+0x128>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	4a3f      	ldr	r2, [pc, #252]	; (8001948 <main+0x12c>)
 800184c:	7811      	ldrb	r1, [r2, #0]
 800184e:	4a3f      	ldr	r2, [pc, #252]	; (800194c <main+0x130>)
 8001850:	8812      	ldrh	r2, [r2, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe96 	bl	8000584 <RFM69_initialize>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d011      	beq.n	8001882 <main+0x66>
    sprintf(log_buffer, "RFM69 Initialized. Freq %dMHz. Node %d. Group %d.\r\n", freqBand, nodeID, networkID);
 800185e:	4b39      	ldr	r3, [pc, #228]	; (8001944 <main+0x128>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	4b38      	ldr	r3, [pc, #224]	; (8001948 <main+0x12c>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	4b38      	ldr	r3, [pc, #224]	; (800194c <main+0x130>)
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	460b      	mov	r3, r1
 8001872:	4937      	ldr	r1, [pc, #220]	; (8001950 <main+0x134>)
 8001874:	4837      	ldr	r0, [pc, #220]	; (8001954 <main+0x138>)
 8001876:	f003 fb03 	bl	8004e80 <siprintf>
    debug_printf(log_buffer);
 800187a:	4836      	ldr	r0, [pc, #216]	; (8001954 <main+0x138>)
 800187c:	f000 faac 	bl	8001dd8 <debug_printf>
 8001880:	e002      	b.n	8001888 <main+0x6c>
  }
  else {
    debug_printf("RFM69 not connected.\r\n");
 8001882:	4835      	ldr	r0, [pc, #212]	; (8001958 <main+0x13c>)
 8001884:	f000 faa8 	bl	8001dd8 <debug_printf>
  }
  RFM69_readAllRegs();
 8001888:	f7ff face 	bl	8000e28 <RFM69_readAllRegs>

  debug_printf("Starting up \n\r");
 800188c:	4833      	ldr	r0, [pc, #204]	; (800195c <main+0x140>)
 800188e:	f000 faa3 	bl	8001dd8 <debug_printf>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // SAMPLE RECEIVE CODE

	  RFM69_setMode(RF69_MODE_RX);
 8001892:	2003      	movs	r0, #3
 8001894:	f7fe ff74 	bl	8000780 <RFM69_setMode>
	        if (RFM69_ReadDIO0Pin()){
 8001898:	f7ff ff0c 	bl	80016b4 <RFM69_ReadDIO0Pin>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d010      	beq.n	80018c4 <main+0xa8>
	        debug_printf("Checking\r\n");
 80018a2:	482f      	ldr	r0, [pc, #188]	; (8001960 <main+0x144>)
 80018a4:	f000 fa98 	bl	8001dd8 <debug_printf>

	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); // turn on LED
 80018a8:	2201      	movs	r2, #1
 80018aa:	2120      	movs	r1, #32
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b0:	f000 fe18 	bl	80024e4 <HAL_GPIO_WritePin>
	          RFM69_interruptHandler();
 80018b4:	f7ff f910 	bl	8000ad8 <RFM69_interruptHandler>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2120      	movs	r1, #32
 80018bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c0:	f000 fe10 	bl	80024e4 <HAL_GPIO_WritePin>

	        }
	        if (RFM69_receiveDone()) {
 80018c4:	f7ff f9f6 	bl	8000cb4 <RFM69_receiveDone>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00a      	beq.n	80018e4 <main+0xc8>
	          debug_printf("Payload Received!\r\n");
 80018ce:	4825      	ldr	r0, [pc, #148]	; (8001964 <main+0x148>)
 80018d0:	f000 fa82 	bl	8001dd8 <debug_printf>
	          //PrintRawBytes();
	          PrintStruct();
 80018d4:	f7ff fe68 	bl	80015a8 <PrintStruct>

	          //PrintByteByByte();
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0); // turn off LED
 80018d8:	2200      	movs	r2, #0
 80018da:	2120      	movs	r1, #32
 80018dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e0:	f000 fe00 	bl	80024e4 <HAL_GPIO_WritePin>




	        // SAMPLE TRANSMIT CODE
	        theData.nodeId = nodeID;
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <main+0x12c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <main+0x14c>)
 80018ec:	601a      	str	r2, [r3, #0]
	        theData.uptime = HAL_GetTick();
 80018ee:	f000 fb21 	bl	8001f34 <HAL_GetTick>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4a1c      	ldr	r2, [pc, #112]	; (8001968 <main+0x14c>)
 80018f6:	6053      	str	r3, [r2, #4]
	        theData.rssi = rssi;
 80018f8:	4b1c      	ldr	r3, [pc, #112]	; (800196c <main+0x150>)
 80018fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fe:	461a      	mov	r2, r3
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <main+0x14c>)
 8001902:	609a      	str	r2, [r3, #8]
	        RFM69_sendWithRetry(toAddress, (const void *)(&theData), sizeof(theData), 2, 20);
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <main+0x154>)
 8001906:	7818      	ldrb	r0, [r3, #0]
 8001908:	2314      	movs	r3, #20
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	2302      	movs	r3, #2
 800190e:	220c      	movs	r2, #12
 8001910:	4915      	ldr	r1, [pc, #84]	; (8001968 <main+0x14c>)
 8001912:	f7ff f809 	bl	8000928 <RFM69_sendWithRetry>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); // turn on LED
 8001916:	2201      	movs	r2, #1
 8001918:	2120      	movs	r1, #32
 800191a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800191e:	f000 fde1 	bl	80024e4 <HAL_GPIO_WritePin>
	        HAL_Delay(1);
 8001922:	2001      	movs	r0, #1
 8001924:	f000 fb12 	bl	8001f4c <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0); // turn off LED
 8001928:	2200      	movs	r2, #0
 800192a:	2120      	movs	r1, #32
 800192c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001930:	f000 fdd8 	bl	80024e4 <HAL_GPIO_WritePin>
	        HAL_Delay(500);                         // send every ____ milliseconds.
 8001934:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001938:	f000 fb08 	bl	8001f4c <HAL_Delay>
	        debug_printf("Payload Sent!\r\n");
 800193c:	480d      	ldr	r0, [pc, #52]	; (8001974 <main+0x158>)
 800193e:	f000 fa4b 	bl	8001dd8 <debug_printf>
	  RFM69_setMode(RF69_MODE_RX);
 8001942:	e7a6      	b.n	8001892 <main+0x76>
 8001944:	20000006 	.word	0x20000006
 8001948:	20000004 	.word	0x20000004
 800194c:	20000002 	.word	0x20000002
 8001950:	08006304 	.word	0x08006304
 8001954:	200000e8 	.word	0x200000e8
 8001958:	08006338 	.word	0x08006338
 800195c:	08006350 	.word	0x08006350
 8001960:	08006360 	.word	0x08006360
 8001964:	0800636c 	.word	0x0800636c
 8001968:	20000180 	.word	0x20000180
 800196c:	200000e4 	.word	0x200000e4
 8001970:	20000008 	.word	0x20000008
 8001974:	08006380 	.word	0x08006380

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b096      	sub	sp, #88	; 0x58
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	2244      	movs	r2, #68	; 0x44
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f003 fa72 	bl	8004e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	463b      	mov	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800199a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800199e:	f000 fdc7 	bl	8002530 <HAL_PWREx_ControlVoltageScaling>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019a8:	f000 f838 	bl	8001a1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019ac:	2302      	movs	r3, #2
 80019ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019b6:	2310      	movs	r3, #16
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ba:	2302      	movs	r3, #2
 80019bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019be:	2302      	movs	r3, #2
 80019c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019c2:	2301      	movs	r3, #1
 80019c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 80019c6:	2309      	movs	r3, #9
 80019c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019ca:	2307      	movs	r3, #7
 80019cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019ce:	2302      	movs	r3, #2
 80019d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019d2:	2302      	movs	r3, #2
 80019d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fdfe 	bl	80025dc <HAL_RCC_OscConfig>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80019e6:	f000 f819 	bl	8001a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ea:	230f      	movs	r3, #15
 80019ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ee:	2303      	movs	r3, #3
 80019f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a00:	463b      	mov	r3, r7
 8001a02:	2104      	movs	r1, #4
 8001a04:	4618      	mov	r0, r3
 8001a06:	f001 f9c5 	bl	8002d94 <HAL_RCC_ClockConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a10:	f000 f804 	bl	8001a1c <Error_Handler>
  }
}
 8001a14:	bf00      	nop
 8001a16:	3758      	adds	r7, #88	; 0x58
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a20:	b672      	cpsid	i
}
 8001a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <Error_Handler+0x8>
	...

08001a28 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <MX_SPI2_Init+0x74>)
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <MX_SPI2_Init+0x78>)
 8001a30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <MX_SPI2_Init+0x74>)
 8001a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <MX_SPI2_Init+0x74>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <MX_SPI2_Init+0x74>)
 8001a42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a46:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <MX_SPI2_Init+0x74>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <MX_SPI2_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_SPI2_Init+0x74>)
 8001a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a5a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <MX_SPI2_Init+0x74>)
 8001a5e:	2208      	movs	r2, #8
 8001a60:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_SPI2_Init+0x74>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <MX_SPI2_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_SPI2_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MX_SPI2_Init+0x74>)
 8001a76:	2207      	movs	r2, #7
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <MX_SPI2_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_SPI2_Init+0x74>)
 8001a82:	2208      	movs	r2, #8
 8001a84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_SPI2_Init+0x74>)
 8001a88:	f002 f864 	bl	8003b54 <HAL_SPI_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a92:	f7ff ffc3 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000018c 	.word	0x2000018c
 8001aa0:	40003800 	.word	0x40003800

08001aa4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a25      	ldr	r2, [pc, #148]	; (8001b58 <HAL_SPI_MspInit+0xb4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d144      	bne.n	8001b50 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ac6:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_SPI_MspInit+0xb8>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	4a24      	ldr	r2, [pc, #144]	; (8001b5c <HAL_SPI_MspInit+0xb8>)
 8001acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <HAL_SPI_MspInit+0xb8>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <HAL_SPI_MspInit+0xb8>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <HAL_SPI_MspInit+0xb8>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <HAL_SPI_MspInit+0xb8>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_SPI_MspInit+0xb8>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <HAL_SPI_MspInit+0xb8>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <HAL_SPI_MspInit+0xb8>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b0e:	230c      	movs	r3, #12
 8001b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b1e:	2305      	movs	r3, #5
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4619      	mov	r1, r3
 8001b28:	480d      	ldr	r0, [pc, #52]	; (8001b60 <HAL_SPI_MspInit+0xbc>)
 8001b2a:	f000 fb19 	bl	8002160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b40:	2305      	movs	r3, #5
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4806      	ldr	r0, [pc, #24]	; (8001b64 <HAL_SPI_MspInit+0xc0>)
 8001b4c:	f000 fb08 	bl	8002160 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b50:	bf00      	nop
 8001b52:	3728      	adds	r7, #40	; 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40003800 	.word	0x40003800
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	48000800 	.word	0x48000800
 8001b64:	48000400 	.word	0x48000400

08001b68 <SPI_transfer8>:
  /* USER CODE END SPI2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint8_t SPI_transfer8 (uint8_t tx_byte) { // function to transfer 1byte on SPI with readback
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  uint8_t rx_byte;

  HAL_SPI_TransmitReceive(&hspi2, &tx_byte, &rx_byte, 1, 10);
 8001b72:	f107 020f 	add.w	r2, r7, #15
 8001b76:	1df9      	adds	r1, r7, #7
 8001b78:	230a      	movs	r3, #10
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	4804      	ldr	r0, [pc, #16]	; (8001b90 <SPI_transfer8+0x28>)
 8001b80:	f002 f88b 	bl	8003c9a <HAL_SPI_TransmitReceive>
  return rx_byte;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]

}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2000018c 	.word	0x2000018c

08001b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_MspInit+0x44>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <HAL_MspInit+0x44>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_MspInit+0x44>)
 8001ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_MspInit+0x44>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <HAL_MspInit+0x44>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_MspInit+0x44>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000

08001bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <NMI_Handler+0x4>

08001be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <HardFault_Handler+0x4>

08001be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <MemManage_Handler+0x4>

08001bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <BusFault_Handler+0x4>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <UsageFault_Handler+0x4>

08001bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c28:	f000 f970 	bl	8001f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <_sbrk+0x5c>)
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <_sbrk+0x60>)
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <_sbrk+0x64>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <_sbrk+0x68>)
 8001c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d207      	bcs.n	8001c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c60:	f003 f8dc 	bl	8004e1c <__errno>
 8001c64:	4603      	mov	r3, r0
 8001c66:	220c      	movs	r2, #12
 8001c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	e009      	b.n	8001c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <_sbrk+0x64>)
 8001c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20018000 	.word	0x20018000
 8001c90:	00000400 	.word	0x00000400
 8001c94:	200001f0 	.word	0x200001f0
 8001c98:	20000290 	.word	0x20000290

08001c9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <SystemInit+0x20>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <SystemInit+0x20>)
 8001ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <MX_USART2_UART_Init+0x58>)
 8001cc6:	4a15      	ldr	r2, [pc, #84]	; (8001d1c <MX_USART2_UART_Init+0x5c>)
 8001cc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <MX_USART2_UART_Init+0x58>)
 8001ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_USART2_UART_Init+0x58>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <MX_USART2_UART_Init+0x58>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_USART2_UART_Init+0x58>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MX_USART2_UART_Init+0x58>)
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <MX_USART2_UART_Init+0x58>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_USART2_UART_Init+0x58>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <MX_USART2_UART_Init+0x58>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MX_USART2_UART_Init+0x58>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_USART2_UART_Init+0x58>)
 8001d04:	f002 fb40 	bl	8004388 <HAL_UART_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d0e:	f7ff fe85 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200001f4 	.word	0x200001f4
 8001d1c:	40004400 	.word	0x40004400

08001d20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b0ac      	sub	sp, #176	; 0xb0
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2288      	movs	r2, #136	; 0x88
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 f895 	bl	8004e70 <memset>
  if(uartHandle->Instance==USART2)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a21      	ldr	r2, [pc, #132]	; (8001dd0 <HAL_UART_MspInit+0xb0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d13b      	bne.n	8001dc8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d50:	2302      	movs	r3, #2
 8001d52:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d54:	2300      	movs	r3, #0
 8001d56:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f001 fa3d 	bl	80031dc <HAL_RCCEx_PeriphCLKConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d68:	f7ff fe58 	bl	8001a1c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_UART_MspInit+0xb4>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	4a18      	ldr	r2, [pc, #96]	; (8001dd4 <HAL_UART_MspInit+0xb4>)
 8001d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d76:	6593      	str	r3, [r2, #88]	; 0x58
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <HAL_UART_MspInit+0xb4>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_UART_MspInit+0xb4>)
 8001d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d88:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <HAL_UART_MspInit+0xb4>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d90:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_UART_MspInit+0xb4>)
 8001d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d9c:	230c      	movs	r3, #12
 8001d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dae:	2303      	movs	r3, #3
 8001db0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001db4:	2307      	movs	r3, #7
 8001db6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc4:	f000 f9cc 	bl	8002160 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dc8:	bf00      	nop
 8001dca:	37b0      	adds	r7, #176	; 0xb0
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40004400 	.word	0x40004400
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <debug_printf>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void debug_printf (char* p) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)p, strlen(p), 100);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7fe f9f5 	bl	80001d0 <strlen>
 8001de6:	4603      	mov	r3, r0
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	2364      	movs	r3, #100	; 0x64
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4803      	ldr	r0, [pc, #12]	; (8001dfc <debug_printf+0x24>)
 8001df0:	f002 fb18 	bl	8004424 <HAL_UART_Transmit>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200001f4 	.word	0x200001f4

08001e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e04:	f7ff ff4a 	bl	8001c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e08:	480c      	ldr	r0, [pc, #48]	; (8001e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e0a:	490d      	ldr	r1, [pc, #52]	; (8001e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <LoopForever+0xe>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e10:	e002      	b.n	8001e18 <LoopCopyDataInit>

08001e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e16:	3304      	adds	r3, #4

08001e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e1c:	d3f9      	bcc.n	8001e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e20:	4c0a      	ldr	r4, [pc, #40]	; (8001e4c <LoopForever+0x16>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e24:	e001      	b.n	8001e2a <LoopFillZerobss>

08001e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e28:	3204      	adds	r2, #4

08001e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e2c:	d3fb      	bcc.n	8001e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f002 fffb 	bl	8004e28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e32:	f7ff fcf3 	bl	800181c <main>

08001e36 <LoopForever>:

LoopForever:
    b LoopForever
 8001e36:	e7fe      	b.n	8001e36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e40:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001e44:	0800641c 	.word	0x0800641c
  ldr r2, =_sbss
 8001e48:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001e4c:	2000028c 	.word	0x2000028c

08001e50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC1_2_IRQHandler>
	...

08001e54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <HAL_Init+0x3c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <HAL_Init+0x3c>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e6a:	2003      	movs	r0, #3
 8001e6c:	f000 f944 	bl	80020f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e70:	2000      	movs	r0, #0
 8001e72:	f000 f80f 	bl	8001e94 <HAL_InitTick>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	71fb      	strb	r3, [r7, #7]
 8001e80:	e001      	b.n	8001e86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e82:	f7ff fe87 	bl	8001b94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e86:	79fb      	ldrb	r3, [r7, #7]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40022000 	.word	0x40022000

08001e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_InitTick+0x6c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d023      	beq.n	8001ef0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_InitTick+0x70>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_InitTick+0x6c>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f941 	bl	8002146 <HAL_SYSTICK_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10f      	bne.n	8001eea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d809      	bhi.n	8001ee4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f000 f919 	bl	800210e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001edc:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <HAL_InitTick+0x74>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e007      	b.n	8001ef4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
 8001ee8:	e004      	b.n	8001ef4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	e001      	b.n	8001ef4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000014 	.word	0x20000014
 8001f04:	2000000c 	.word	0x2000000c
 8001f08:	20000010 	.word	0x20000010

08001f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_IncTick+0x20>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_IncTick+0x24>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_IncTick+0x24>)
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000014 	.word	0x20000014
 8001f30:	20000278 	.word	0x20000278

08001f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return uwTick;
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_GetTick+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000278 	.word	0x20000278

08001f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f54:	f7ff ffee 	bl	8001f34 <HAL_GetTick>
 8001f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d005      	beq.n	8001f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_Delay+0x44>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f72:	bf00      	nop
 8001f74:	f7ff ffde 	bl	8001f34 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d8f7      	bhi.n	8001f74 <HAL_Delay+0x28>
  {
  }
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000014 	.word	0x20000014

08001f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc6:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60d3      	str	r3, [r2, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	f003 0307 	and.w	r3, r3, #7
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	2b00      	cmp	r3, #0
 800200a:	db0a      	blt.n	8002022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	490c      	ldr	r1, [pc, #48]	; (8002044 <__NVIC_SetPriority+0x4c>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	440b      	add	r3, r1
 800201c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002020:	e00a      	b.n	8002038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4908      	ldr	r1, [pc, #32]	; (8002048 <__NVIC_SetPriority+0x50>)
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3b04      	subs	r3, #4
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	440b      	add	r3, r1
 8002036:	761a      	strb	r2, [r3, #24]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	; 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f1c3 0307 	rsb	r3, r3, #7
 8002066:	2b04      	cmp	r3, #4
 8002068:	bf28      	it	cs
 800206a:	2304      	movcs	r3, #4
 800206c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3304      	adds	r3, #4
 8002072:	2b06      	cmp	r3, #6
 8002074:	d902      	bls.n	800207c <NVIC_EncodePriority+0x30>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3b03      	subs	r3, #3
 800207a:	e000      	b.n	800207e <NVIC_EncodePriority+0x32>
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	f04f 32ff 	mov.w	r2, #4294967295
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	401a      	ands	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002094:	f04f 31ff 	mov.w	r1, #4294967295
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43d9      	mvns	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	4313      	orrs	r3, r2
         );
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	; 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c4:	d301      	bcc.n	80020ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00f      	b.n	80020ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <SysTick_Config+0x40>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d2:	210f      	movs	r1, #15
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f7ff ff8e 	bl	8001ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <SysTick_Config+0x40>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <SysTick_Config+0x40>)
 80020e4:	2207      	movs	r2, #7
 80020e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	e000e010 	.word	0xe000e010

080020f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff47 	bl	8001f94 <__NVIC_SetPriorityGrouping>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
 800211a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002120:	f7ff ff5c 	bl	8001fdc <__NVIC_GetPriorityGrouping>
 8002124:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	6978      	ldr	r0, [r7, #20]
 800212c:	f7ff ff8e 	bl	800204c <NVIC_EncodePriority>
 8002130:	4602      	mov	r2, r0
 8002132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff5d 	bl	8001ff8 <__NVIC_SetPriority>
}
 800213e:	bf00      	nop
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ffb0 	bl	80020b4 <SysTick_Config>
 8002154:	4603      	mov	r3, r0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216e:	e17f      	b.n	8002470 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	2101      	movs	r1, #1
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	4013      	ands	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8171 	beq.w	800246a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	2b01      	cmp	r3, #1
 8002192:	d005      	beq.n	80021a0 <HAL_GPIO_Init+0x40>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d130      	bne.n	8002202 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021d6:	2201      	movs	r2, #1
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	f003 0201 	and.w	r2, r3, #1
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b03      	cmp	r3, #3
 800220c:	d118      	bne.n	8002240 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002214:	2201      	movs	r2, #1
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	08db      	lsrs	r3, r3, #3
 800222a:	f003 0201 	and.w	r2, r3, #1
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b03      	cmp	r3, #3
 800224a:	d017      	beq.n	800227c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d123      	bne.n	80022d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	08da      	lsrs	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3208      	adds	r2, #8
 8002290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	220f      	movs	r2, #15
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	08da      	lsrs	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3208      	adds	r2, #8
 80022ca:	6939      	ldr	r1, [r7, #16]
 80022cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0203 	and.w	r2, r3, #3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80ac 	beq.w	800246a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002312:	4b5f      	ldr	r3, [pc, #380]	; (8002490 <HAL_GPIO_Init+0x330>)
 8002314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002316:	4a5e      	ldr	r2, [pc, #376]	; (8002490 <HAL_GPIO_Init+0x330>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6613      	str	r3, [r2, #96]	; 0x60
 800231e:	4b5c      	ldr	r3, [pc, #368]	; (8002490 <HAL_GPIO_Init+0x330>)
 8002320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800232a:	4a5a      	ldr	r2, [pc, #360]	; (8002494 <HAL_GPIO_Init+0x334>)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	3302      	adds	r3, #2
 8002332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	220f      	movs	r2, #15
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002354:	d025      	beq.n	80023a2 <HAL_GPIO_Init+0x242>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4f      	ldr	r2, [pc, #316]	; (8002498 <HAL_GPIO_Init+0x338>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d01f      	beq.n	800239e <HAL_GPIO_Init+0x23e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4e      	ldr	r2, [pc, #312]	; (800249c <HAL_GPIO_Init+0x33c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d019      	beq.n	800239a <HAL_GPIO_Init+0x23a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4d      	ldr	r2, [pc, #308]	; (80024a0 <HAL_GPIO_Init+0x340>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <HAL_GPIO_Init+0x236>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4c      	ldr	r2, [pc, #304]	; (80024a4 <HAL_GPIO_Init+0x344>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00d      	beq.n	8002392 <HAL_GPIO_Init+0x232>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4b      	ldr	r2, [pc, #300]	; (80024a8 <HAL_GPIO_Init+0x348>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <HAL_GPIO_Init+0x22e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4a      	ldr	r2, [pc, #296]	; (80024ac <HAL_GPIO_Init+0x34c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d101      	bne.n	800238a <HAL_GPIO_Init+0x22a>
 8002386:	2306      	movs	r3, #6
 8002388:	e00c      	b.n	80023a4 <HAL_GPIO_Init+0x244>
 800238a:	2307      	movs	r3, #7
 800238c:	e00a      	b.n	80023a4 <HAL_GPIO_Init+0x244>
 800238e:	2305      	movs	r3, #5
 8002390:	e008      	b.n	80023a4 <HAL_GPIO_Init+0x244>
 8002392:	2304      	movs	r3, #4
 8002394:	e006      	b.n	80023a4 <HAL_GPIO_Init+0x244>
 8002396:	2303      	movs	r3, #3
 8002398:	e004      	b.n	80023a4 <HAL_GPIO_Init+0x244>
 800239a:	2302      	movs	r3, #2
 800239c:	e002      	b.n	80023a4 <HAL_GPIO_Init+0x244>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_GPIO_Init+0x244>
 80023a2:	2300      	movs	r3, #0
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	f002 0203 	and.w	r2, r2, #3
 80023aa:	0092      	lsls	r2, r2, #2
 80023ac:	4093      	lsls	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023b4:	4937      	ldr	r1, [pc, #220]	; (8002494 <HAL_GPIO_Init+0x334>)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	3302      	adds	r3, #2
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023c2:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <HAL_GPIO_Init+0x350>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023e6:	4a32      	ldr	r2, [pc, #200]	; (80024b0 <HAL_GPIO_Init+0x350>)
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023ec:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <HAL_GPIO_Init+0x350>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002410:	4a27      	ldr	r2, [pc, #156]	; (80024b0 <HAL_GPIO_Init+0x350>)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002416:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <HAL_GPIO_Init+0x350>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	43db      	mvns	r3, r3
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800243a:	4a1d      	ldr	r2, [pc, #116]	; (80024b0 <HAL_GPIO_Init+0x350>)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_GPIO_Init+0x350>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	43db      	mvns	r3, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002464:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <HAL_GPIO_Init+0x350>)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3301      	adds	r3, #1
 800246e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa22 f303 	lsr.w	r3, r2, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	f47f ae78 	bne.w	8002170 <HAL_GPIO_Init+0x10>
  }
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	40010000 	.word	0x40010000
 8002498:	48000400 	.word	0x48000400
 800249c:	48000800 	.word	0x48000800
 80024a0:	48000c00 	.word	0x48000c00
 80024a4:	48001000 	.word	0x48001000
 80024a8:	48001400 	.word	0x48001400
 80024ac:	48001800 	.word	0x48001800
 80024b0:	40010400 	.word	0x40010400

080024b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	e001      	b.n	80024d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	807b      	strh	r3, [r7, #2]
 80024f0:	4613      	mov	r3, r2
 80024f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f4:	787b      	ldrb	r3, [r7, #1]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024fa:	887a      	ldrh	r2, [r7, #2]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002500:	e002      	b.n	8002508 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <HAL_PWREx_GetVoltageRange+0x18>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40007000 	.word	0x40007000

08002530 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800253e:	d130      	bne.n	80025a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002540:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800254c:	d038      	beq.n	80025c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002556:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002558:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800255c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800255e:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2232      	movs	r2, #50	; 0x32
 8002564:	fb02 f303 	mul.w	r3, r2, r3
 8002568:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	0c9b      	lsrs	r3, r3, #18
 8002570:	3301      	adds	r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002574:	e002      	b.n	800257c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3b01      	subs	r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002588:	d102      	bne.n	8002590 <HAL_PWREx_ControlVoltageScaling+0x60>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f2      	bne.n	8002576 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259c:	d110      	bne.n	80025c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e00f      	b.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ae:	d007      	beq.n	80025c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025b8:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40007000 	.word	0x40007000
 80025d4:	2000000c 	.word	0x2000000c
 80025d8:	431bde83 	.word	0x431bde83

080025dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e3ca      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ee:	4b97      	ldr	r3, [pc, #604]	; (800284c <HAL_RCC_OscConfig+0x270>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f8:	4b94      	ldr	r3, [pc, #592]	; (800284c <HAL_RCC_OscConfig+0x270>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 80e4 	beq.w	80027d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <HAL_RCC_OscConfig+0x4a>
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	2b0c      	cmp	r3, #12
 800261a:	f040 808b 	bne.w	8002734 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b01      	cmp	r3, #1
 8002622:	f040 8087 	bne.w	8002734 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002626:	4b89      	ldr	r3, [pc, #548]	; (800284c <HAL_RCC_OscConfig+0x270>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_RCC_OscConfig+0x62>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e3a2      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1a      	ldr	r2, [r3, #32]
 8002642:	4b82      	ldr	r3, [pc, #520]	; (800284c <HAL_RCC_OscConfig+0x270>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d004      	beq.n	8002658 <HAL_RCC_OscConfig+0x7c>
 800264e:	4b7f      	ldr	r3, [pc, #508]	; (800284c <HAL_RCC_OscConfig+0x270>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002656:	e005      	b.n	8002664 <HAL_RCC_OscConfig+0x88>
 8002658:	4b7c      	ldr	r3, [pc, #496]	; (800284c <HAL_RCC_OscConfig+0x270>)
 800265a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002664:	4293      	cmp	r3, r2
 8002666:	d223      	bcs.n	80026b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	4618      	mov	r0, r3
 800266e:	f000 fd55 	bl	800311c <RCC_SetFlashLatencyFromMSIRange>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e383      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800267c:	4b73      	ldr	r3, [pc, #460]	; (800284c <HAL_RCC_OscConfig+0x270>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a72      	ldr	r2, [pc, #456]	; (800284c <HAL_RCC_OscConfig+0x270>)
 8002682:	f043 0308 	orr.w	r3, r3, #8
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b70      	ldr	r3, [pc, #448]	; (800284c <HAL_RCC_OscConfig+0x270>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	496d      	ldr	r1, [pc, #436]	; (800284c <HAL_RCC_OscConfig+0x270>)
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800269a:	4b6c      	ldr	r3, [pc, #432]	; (800284c <HAL_RCC_OscConfig+0x270>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	4968      	ldr	r1, [pc, #416]	; (800284c <HAL_RCC_OscConfig+0x270>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
 80026ae:	e025      	b.n	80026fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b0:	4b66      	ldr	r3, [pc, #408]	; (800284c <HAL_RCC_OscConfig+0x270>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a65      	ldr	r2, [pc, #404]	; (800284c <HAL_RCC_OscConfig+0x270>)
 80026b6:	f043 0308 	orr.w	r3, r3, #8
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b63      	ldr	r3, [pc, #396]	; (800284c <HAL_RCC_OscConfig+0x270>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	4960      	ldr	r1, [pc, #384]	; (800284c <HAL_RCC_OscConfig+0x270>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ce:	4b5f      	ldr	r3, [pc, #380]	; (800284c <HAL_RCC_OscConfig+0x270>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	495b      	ldr	r1, [pc, #364]	; (800284c <HAL_RCC_OscConfig+0x270>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d109      	bne.n	80026fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fd15 	bl	800311c <RCC_SetFlashLatencyFromMSIRange>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e343      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026fc:	f000 fc4a 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b52      	ldr	r3, [pc, #328]	; (800284c <HAL_RCC_OscConfig+0x270>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	4950      	ldr	r1, [pc, #320]	; (8002850 <HAL_RCC_OscConfig+0x274>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
 8002718:	4a4e      	ldr	r2, [pc, #312]	; (8002854 <HAL_RCC_OscConfig+0x278>)
 800271a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800271c:	4b4e      	ldr	r3, [pc, #312]	; (8002858 <HAL_RCC_OscConfig+0x27c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fbb7 	bl	8001e94 <HAL_InitTick>
 8002726:	4603      	mov	r3, r0
 8002728:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d052      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	e327      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d032      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800273c:	4b43      	ldr	r3, [pc, #268]	; (800284c <HAL_RCC_OscConfig+0x270>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a42      	ldr	r2, [pc, #264]	; (800284c <HAL_RCC_OscConfig+0x270>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002748:	f7ff fbf4 	bl	8001f34 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002750:	f7ff fbf0 	bl	8001f34 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e310      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002762:	4b3a      	ldr	r3, [pc, #232]	; (800284c <HAL_RCC_OscConfig+0x270>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800276e:	4b37      	ldr	r3, [pc, #220]	; (800284c <HAL_RCC_OscConfig+0x270>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a36      	ldr	r2, [pc, #216]	; (800284c <HAL_RCC_OscConfig+0x270>)
 8002774:	f043 0308 	orr.w	r3, r3, #8
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b34      	ldr	r3, [pc, #208]	; (800284c <HAL_RCC_OscConfig+0x270>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	4931      	ldr	r1, [pc, #196]	; (800284c <HAL_RCC_OscConfig+0x270>)
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_RCC_OscConfig+0x270>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	492c      	ldr	r1, [pc, #176]	; (800284c <HAL_RCC_OscConfig+0x270>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
 80027a0:	e01a      	b.n	80027d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027a2:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_RCC_OscConfig+0x270>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a29      	ldr	r2, [pc, #164]	; (800284c <HAL_RCC_OscConfig+0x270>)
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027ae:	f7ff fbc1 	bl	8001f34 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027b6:	f7ff fbbd 	bl	8001f34 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e2dd      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027c8:	4b20      	ldr	r3, [pc, #128]	; (800284c <HAL_RCC_OscConfig+0x270>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x1da>
 80027d4:	e000      	b.n	80027d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d074      	beq.n	80028ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d005      	beq.n	80027f6 <HAL_RCC_OscConfig+0x21a>
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b0c      	cmp	r3, #12
 80027ee:	d10e      	bne.n	800280e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d10b      	bne.n	800280e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <HAL_RCC_OscConfig+0x270>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d064      	beq.n	80028cc <HAL_RCC_OscConfig+0x2f0>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d160      	bne.n	80028cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e2ba      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x24a>
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <HAL_RCC_OscConfig+0x270>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0b      	ldr	r2, [pc, #44]	; (800284c <HAL_RCC_OscConfig+0x270>)
 800281e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	e026      	b.n	8002874 <HAL_RCC_OscConfig+0x298>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800282e:	d115      	bne.n	800285c <HAL_RCC_OscConfig+0x280>
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_RCC_OscConfig+0x270>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a05      	ldr	r2, [pc, #20]	; (800284c <HAL_RCC_OscConfig+0x270>)
 8002836:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <HAL_RCC_OscConfig+0x270>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a02      	ldr	r2, [pc, #8]	; (800284c <HAL_RCC_OscConfig+0x270>)
 8002842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	e014      	b.n	8002874 <HAL_RCC_OscConfig+0x298>
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
 8002850:	08006390 	.word	0x08006390
 8002854:	2000000c 	.word	0x2000000c
 8002858:	20000010 	.word	0x20000010
 800285c:	4ba0      	ldr	r3, [pc, #640]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a9f      	ldr	r2, [pc, #636]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b9d      	ldr	r3, [pc, #628]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a9c      	ldr	r2, [pc, #624]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 800286e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d013      	beq.n	80028a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7ff fb5a 	bl	8001f34 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002884:	f7ff fb56 	bl	8001f34 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e276      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002896:	4b92      	ldr	r3, [pc, #584]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x2a8>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7ff fb46 	bl	8001f34 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ac:	f7ff fb42 	bl	8001f34 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e262      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028be:	4b88      	ldr	r3, [pc, #544]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x2d0>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d060      	beq.n	800299c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d005      	beq.n	80028ec <HAL_RCC_OscConfig+0x310>
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d119      	bne.n	800291a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d116      	bne.n	800291a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ec:	4b7c      	ldr	r3, [pc, #496]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_OscConfig+0x328>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e23f      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b76      	ldr	r3, [pc, #472]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	061b      	lsls	r3, r3, #24
 8002912:	4973      	ldr	r1, [pc, #460]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002918:	e040      	b.n	800299c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d023      	beq.n	800296a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002922:	4b6f      	ldr	r3, [pc, #444]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a6e      	ldr	r2, [pc, #440]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7ff fb01 	bl	8001f34 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002936:	f7ff fafd 	bl	8001f34 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e21d      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002948:	4b65      	ldr	r3, [pc, #404]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002954:	4b62      	ldr	r3, [pc, #392]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	495f      	ldr	r1, [pc, #380]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
 8002968:	e018      	b.n	800299c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296a:	4b5d      	ldr	r3, [pc, #372]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a5c      	ldr	r2, [pc, #368]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7ff fadd 	bl	8001f34 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297e:	f7ff fad9 	bl	8001f34 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1f9      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002990:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d03c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01c      	beq.n	80029ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b0:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 80029b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b6:	4a4a      	ldr	r2, [pc, #296]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7ff fab8 	bl	8001f34 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c8:	f7ff fab4 	bl	8001f34 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e1d4      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029da:	4b41      	ldr	r3, [pc, #260]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 80029dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ef      	beq.n	80029c8 <HAL_RCC_OscConfig+0x3ec>
 80029e8:	e01b      	b.n	8002a22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ea:	4b3d      	ldr	r3, [pc, #244]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 80029ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f0:	4a3b      	ldr	r2, [pc, #236]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 80029f2:	f023 0301 	bic.w	r3, r3, #1
 80029f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fa:	f7ff fa9b 	bl	8001f34 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a02:	f7ff fa97 	bl	8001f34 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e1b7      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a14:	4b32      	ldr	r3, [pc, #200]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1ef      	bne.n	8002a02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80a6 	beq.w	8002b7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a30:	2300      	movs	r3, #0
 8002a32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a34:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10d      	bne.n	8002a5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a40:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	4a26      	ldr	r2, [pc, #152]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a4c:	4b24      	ldr	r3, [pc, #144]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5c:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <HAL_RCC_OscConfig+0x508>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d118      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a68:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <HAL_RCC_OscConfig+0x508>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <HAL_RCC_OscConfig+0x508>)
 8002a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a74:	f7ff fa5e 	bl	8001f34 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7c:	f7ff fa5a 	bl	8001f34 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e17a      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8e:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <HAL_RCC_OscConfig+0x508>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d108      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4d8>
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	4a0d      	ldr	r2, [pc, #52]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ab2:	e029      	b.n	8002b08 <HAL_RCC_OscConfig+0x52c>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d115      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x50c>
 8002abc:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	4a07      	ldr	r2, [pc, #28]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002ac4:	f043 0304 	orr.w	r3, r3, #4
 8002ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	4a03      	ldr	r2, [pc, #12]	; (8002ae0 <HAL_RCC_OscConfig+0x504>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002adc:	e014      	b.n	8002b08 <HAL_RCC_OscConfig+0x52c>
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40007000 	.word	0x40007000
 8002ae8:	4b9c      	ldr	r3, [pc, #624]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aee:	4a9b      	ldr	r2, [pc, #620]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002af8:	4b98      	ldr	r3, [pc, #608]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	4a97      	ldr	r2, [pc, #604]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d016      	beq.n	8002b3e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b10:	f7ff fa10 	bl	8001f34 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7ff fa0c 	bl	8001f34 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e12a      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b2e:	4b8b      	ldr	r3, [pc, #556]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0ed      	beq.n	8002b18 <HAL_RCC_OscConfig+0x53c>
 8002b3c:	e015      	b.n	8002b6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3e:	f7ff f9f9 	bl	8001f34 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b46:	f7ff f9f5 	bl	8001f34 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e113      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b5c:	4b7f      	ldr	r3, [pc, #508]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ed      	bne.n	8002b46 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b70:	4b7a      	ldr	r3, [pc, #488]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b74:	4a79      	ldr	r2, [pc, #484]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80fe 	beq.w	8002d82 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	f040 80d0 	bne.w	8002d30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b90:	4b72      	ldr	r3, [pc, #456]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f003 0203 	and.w	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d130      	bne.n	8002c06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d127      	bne.n	8002c06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d11f      	bne.n	8002c06 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bd0:	2a07      	cmp	r2, #7
 8002bd2:	bf14      	ite	ne
 8002bd4:	2201      	movne	r2, #1
 8002bd6:	2200      	moveq	r2, #0
 8002bd8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d113      	bne.n	8002c06 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	085b      	lsrs	r3, r3, #1
 8002bea:	3b01      	subs	r3, #1
 8002bec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d109      	bne.n	8002c06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d06e      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	2b0c      	cmp	r3, #12
 8002c0a:	d069      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c0c:	4b53      	ldr	r3, [pc, #332]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c18:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0ad      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c28:	4b4c      	ldr	r3, [pc, #304]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a4b      	ldr	r2, [pc, #300]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c34:	f7ff f97e 	bl	8001f34 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7ff f97a 	bl	8001f34 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e09a      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c4e:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c5a:	4b40      	ldr	r3, [pc, #256]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	4b40      	ldr	r3, [pc, #256]	; (8002d60 <HAL_RCC_OscConfig+0x784>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c6a:	3a01      	subs	r2, #1
 8002c6c:	0112      	lsls	r2, r2, #4
 8002c6e:	4311      	orrs	r1, r2
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c74:	0212      	lsls	r2, r2, #8
 8002c76:	4311      	orrs	r1, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c7c:	0852      	lsrs	r2, r2, #1
 8002c7e:	3a01      	subs	r2, #1
 8002c80:	0552      	lsls	r2, r2, #21
 8002c82:	4311      	orrs	r1, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c88:	0852      	lsrs	r2, r2, #1
 8002c8a:	3a01      	subs	r2, #1
 8002c8c:	0652      	lsls	r2, r2, #25
 8002c8e:	4311      	orrs	r1, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c94:	0912      	lsrs	r2, r2, #4
 8002c96:	0452      	lsls	r2, r2, #17
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	4930      	ldr	r1, [pc, #192]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ca0:	4b2e      	ldr	r3, [pc, #184]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a2d      	ldr	r2, [pc, #180]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002caa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cac:	4b2b      	ldr	r3, [pc, #172]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4a2a      	ldr	r2, [pc, #168]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cb8:	f7ff f93c 	bl	8001f34 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7ff f938 	bl	8001f34 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e058      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd2:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cde:	e050      	b.n	8002d82 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e04f      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d148      	bne.n	8002d82 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a19      	ldr	r2, [pc, #100]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cfc:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4a16      	ldr	r2, [pc, #88]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d08:	f7ff f914 	bl	8001f34 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d10:	f7ff f910 	bl	8001f34 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e030      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d22:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x734>
 8002d2e:	e028      	b.n	8002d82 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2b0c      	cmp	r3, #12
 8002d34:	d023      	beq.n	8002d7e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a08      	ldr	r2, [pc, #32]	; (8002d5c <HAL_RCC_OscConfig+0x780>)
 8002d3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d42:	f7ff f8f7 	bl	8001f34 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d48:	e00c      	b.n	8002d64 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7ff f8f3 	bl	8001f34 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d905      	bls.n	8002d64 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e013      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <HAL_RCC_OscConfig+0x7b0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1ec      	bne.n	8002d4a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_RCC_OscConfig+0x7b0>)
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	4905      	ldr	r1, [pc, #20]	; (8002d8c <HAL_RCC_OscConfig+0x7b0>)
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_RCC_OscConfig+0x7b4>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60cb      	str	r3, [r1, #12]
 8002d7c:	e001      	b.n	8002d82 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3720      	adds	r7, #32
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	feeefffc 	.word	0xfeeefffc

08002d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0e7      	b.n	8002f78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da8:	4b75      	ldr	r3, [pc, #468]	; (8002f80 <HAL_RCC_ClockConfig+0x1ec>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d910      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b72      	ldr	r3, [pc, #456]	; (8002f80 <HAL_RCC_ClockConfig+0x1ec>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 0207 	bic.w	r2, r3, #7
 8002dbe:	4970      	ldr	r1, [pc, #448]	; (8002f80 <HAL_RCC_ClockConfig+0x1ec>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b6e      	ldr	r3, [pc, #440]	; (8002f80 <HAL_RCC_ClockConfig+0x1ec>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0cf      	b.n	8002f78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d010      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	4b66      	ldr	r3, [pc, #408]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d908      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df4:	4b63      	ldr	r3, [pc, #396]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4960      	ldr	r1, [pc, #384]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d04c      	beq.n	8002eac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d107      	bne.n	8002e2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1a:	4b5a      	ldr	r3, [pc, #360]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d121      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0a6      	b.n	8002f78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d107      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e32:	4b54      	ldr	r3, [pc, #336]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d115      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e09a      	b.n	8002f78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e4a:	4b4e      	ldr	r3, [pc, #312]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d109      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e08e      	b.n	8002f78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e5a:	4b4a      	ldr	r3, [pc, #296]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e086      	b.n	8002f78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e6a:	4b46      	ldr	r3, [pc, #280]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f023 0203 	bic.w	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4943      	ldr	r1, [pc, #268]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e7c:	f7ff f85a 	bl	8001f34 <HAL_GetTick>
 8002e80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e82:	e00a      	b.n	8002e9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e84:	f7ff f856 	bl	8001f34 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e06e      	b.n	8002f78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9a:	4b3a      	ldr	r3, [pc, #232]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 020c 	and.w	r2, r3, #12
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d1eb      	bne.n	8002e84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d010      	beq.n	8002eda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d208      	bcs.n	8002eda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec8:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	492b      	ldr	r1, [pc, #172]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eda:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_RCC_ClockConfig+0x1ec>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d210      	bcs.n	8002f0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee8:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <HAL_RCC_ClockConfig+0x1ec>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f023 0207 	bic.w	r2, r3, #7
 8002ef0:	4923      	ldr	r1, [pc, #140]	; (8002f80 <HAL_RCC_ClockConfig+0x1ec>)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef8:	4b21      	ldr	r3, [pc, #132]	; (8002f80 <HAL_RCC_ClockConfig+0x1ec>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d001      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e036      	b.n	8002f78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f16:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	4918      	ldr	r1, [pc, #96]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d009      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f34:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4910      	ldr	r1, [pc, #64]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f48:	f000 f824 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <HAL_RCC_ClockConfig+0x1f0>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	490b      	ldr	r1, [pc, #44]	; (8002f88 <HAL_RCC_ClockConfig+0x1f4>)
 8002f5a:	5ccb      	ldrb	r3, [r1, r3]
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
 8002f64:	4a09      	ldr	r2, [pc, #36]	; (8002f8c <HAL_RCC_ClockConfig+0x1f8>)
 8002f66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <HAL_RCC_ClockConfig+0x1fc>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe ff91 	bl	8001e94 <HAL_InitTick>
 8002f72:	4603      	mov	r3, r0
 8002f74:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f76:	7afb      	ldrb	r3, [r7, #11]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40022000 	.word	0x40022000
 8002f84:	40021000 	.word	0x40021000
 8002f88:	08006390 	.word	0x08006390
 8002f8c:	2000000c 	.word	0x2000000c
 8002f90:	20000010 	.word	0x20000010

08002f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b089      	sub	sp, #36	; 0x24
 8002f98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fa2:	4b3e      	ldr	r3, [pc, #248]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fac:	4b3b      	ldr	r3, [pc, #236]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d121      	bne.n	8003006 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d11e      	bne.n	8003006 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fc8:	4b34      	ldr	r3, [pc, #208]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fd4:	4b31      	ldr	r3, [pc, #196]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	e005      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fe4:	4b2d      	ldr	r3, [pc, #180]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ff0:	4a2b      	ldr	r2, [pc, #172]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10d      	bne.n	800301c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003004:	e00a      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d102      	bne.n	8003012 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800300c:	4b25      	ldr	r3, [pc, #148]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	e004      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d101      	bne.n	800301c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003018:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800301a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b0c      	cmp	r3, #12
 8003020:	d134      	bne.n	800308c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003022:	4b1e      	ldr	r3, [pc, #120]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d003      	beq.n	800303a <HAL_RCC_GetSysClockFreq+0xa6>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d003      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0xac>
 8003038:	e005      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800303a:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800303c:	617b      	str	r3, [r7, #20]
      break;
 800303e:	e005      	b.n	800304c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003040:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003042:	617b      	str	r3, [r7, #20]
      break;
 8003044:	e002      	b.n	800304c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	617b      	str	r3, [r7, #20]
      break;
 800304a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800304c:	4b13      	ldr	r3, [pc, #76]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	3301      	adds	r3, #1
 8003058:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	fb03 f202 	mul.w	r2, r3, r2
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	0e5b      	lsrs	r3, r3, #25
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	3301      	adds	r3, #1
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800308c:	69bb      	ldr	r3, [r7, #24]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3724      	adds	r7, #36	; 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000
 80030a0:	080063a8 	.word	0x080063a8
 80030a4:	00f42400 	.word	0x00f42400
 80030a8:	007a1200 	.word	0x007a1200

080030ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b0:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	2000000c 	.word	0x2000000c

080030c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030c8:	f7ff fff0 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	0a1b      	lsrs	r3, r3, #8
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	4904      	ldr	r1, [pc, #16]	; (80030ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000
 80030ec:	080063a0 	.word	0x080063a0

080030f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030f4:	f7ff ffda 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030f8:	4602      	mov	r2, r0
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	0adb      	lsrs	r3, r3, #11
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	4904      	ldr	r1, [pc, #16]	; (8003118 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003106:	5ccb      	ldrb	r3, [r1, r3]
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003110:	4618      	mov	r0, r3
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	080063a0 	.word	0x080063a0

0800311c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003128:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003134:	f7ff f9ee 	bl	8002514 <HAL_PWREx_GetVoltageRange>
 8003138:	6178      	str	r0, [r7, #20]
 800313a:	e014      	b.n	8003166 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800313c:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	4a24      	ldr	r2, [pc, #144]	; (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003146:	6593      	str	r3, [r2, #88]	; 0x58
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003154:	f7ff f9de 	bl	8002514 <HAL_PWREx_GetVoltageRange>
 8003158:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003164:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316c:	d10b      	bne.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d919      	bls.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2ba0      	cmp	r3, #160	; 0xa0
 8003178:	d902      	bls.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800317a:	2302      	movs	r3, #2
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	e013      	b.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003180:	2301      	movs	r3, #1
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	e010      	b.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b80      	cmp	r3, #128	; 0x80
 800318a:	d902      	bls.n	8003192 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800318c:	2303      	movs	r3, #3
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	e00a      	b.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b80      	cmp	r3, #128	; 0x80
 8003196:	d102      	bne.n	800319e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003198:	2302      	movs	r3, #2
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	e004      	b.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b70      	cmp	r3, #112	; 0x70
 80031a2:	d101      	bne.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031a4:	2301      	movs	r3, #1
 80031a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 0207 	bic.w	r2, r3, #7
 80031b0:	4909      	ldr	r1, [pc, #36]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031b8:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d001      	beq.n	80031ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40022000 	.word	0x40022000

080031dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031e4:	2300      	movs	r3, #0
 80031e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031e8:	2300      	movs	r3, #0
 80031ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d041      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003200:	d02a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003202:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003206:	d824      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003208:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800320c:	d008      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800320e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003212:	d81e      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800321c:	d010      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800321e:	e018      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003220:	4b86      	ldr	r3, [pc, #536]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4a85      	ldr	r2, [pc, #532]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800322c:	e015      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fabb 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800323e:	e00c      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3320      	adds	r3, #32
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fba6 	bl	8003998 <RCCEx_PLLSAI2_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003250:	e003      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	74fb      	strb	r3, [r7, #19]
      break;
 8003256:	e000      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800325a:	7cfb      	ldrb	r3, [r7, #19]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10b      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003260:	4b76      	ldr	r3, [pc, #472]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800326e:	4973      	ldr	r1, [pc, #460]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003276:	e001      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d041      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800328c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003290:	d02a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003292:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003296:	d824      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003298:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800329c:	d008      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800329e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032a2:	d81e      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032ac:	d010      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ae:	e018      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032b0:	4b62      	ldr	r3, [pc, #392]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4a61      	ldr	r2, [pc, #388]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032bc:	e015      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3304      	adds	r3, #4
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fa73 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ce:	e00c      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3320      	adds	r3, #32
 80032d4:	2100      	movs	r1, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fb5e 	bl	8003998 <RCCEx_PLLSAI2_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032e0:	e003      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	74fb      	strb	r3, [r7, #19]
      break;
 80032e6:	e000      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ea:	7cfb      	ldrb	r3, [r7, #19]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032f0:	4b52      	ldr	r3, [pc, #328]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032fe:	494f      	ldr	r1, [pc, #316]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003306:	e001      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80a0 	beq.w	800345a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800331e:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800332e:	2300      	movs	r3, #0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003334:	4b41      	ldr	r3, [pc, #260]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	4a40      	ldr	r2, [pc, #256]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333e:	6593      	str	r3, [r2, #88]	; 0x58
 8003340:	4b3e      	ldr	r3, [pc, #248]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334c:	2301      	movs	r3, #1
 800334e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003350:	4b3b      	ldr	r3, [pc, #236]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a3a      	ldr	r2, [pc, #232]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800335c:	f7fe fdea 	bl	8001f34 <HAL_GetTick>
 8003360:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003362:	e009      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003364:	f7fe fde6 	bl	8001f34 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d902      	bls.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	74fb      	strb	r3, [r7, #19]
        break;
 8003376:	e005      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003378:	4b31      	ldr	r3, [pc, #196]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ef      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003384:	7cfb      	ldrb	r3, [r7, #19]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d15c      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800338a:	4b2c      	ldr	r3, [pc, #176]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003390:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003394:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01f      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d019      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033a8:	4b24      	ldr	r3, [pc, #144]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033b4:	4b21      	ldr	r3, [pc, #132]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	4a20      	ldr	r2, [pc, #128]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	4a1c      	ldr	r2, [pc, #112]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033d4:	4a19      	ldr	r2, [pc, #100]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d016      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7fe fda5 	bl	8001f34 <HAL_GetTick>
 80033ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ec:	e00b      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ee:	f7fe fda1 	bl	8001f34 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d902      	bls.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	74fb      	strb	r3, [r7, #19]
            break;
 8003404:	e006      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ec      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10c      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800341a:	4b08      	ldr	r3, [pc, #32]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342a:	4904      	ldr	r1, [pc, #16]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003432:	e009      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	74bb      	strb	r3, [r7, #18]
 8003438:	e006      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003448:	7c7b      	ldrb	r3, [r7, #17]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d105      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344e:	4b9e      	ldr	r3, [pc, #632]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	4a9d      	ldr	r2, [pc, #628]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003458:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003466:	4b98      	ldr	r3, [pc, #608]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	f023 0203 	bic.w	r2, r3, #3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	4994      	ldr	r1, [pc, #592]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003488:	4b8f      	ldr	r3, [pc, #572]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348e:	f023 020c 	bic.w	r2, r3, #12
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003496:	498c      	ldr	r1, [pc, #560]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034aa:	4b87      	ldr	r3, [pc, #540]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	4983      	ldr	r1, [pc, #524]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034cc:	4b7e      	ldr	r3, [pc, #504]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	497b      	ldr	r1, [pc, #492]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034ee:	4b76      	ldr	r3, [pc, #472]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fc:	4972      	ldr	r1, [pc, #456]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003510:	4b6d      	ldr	r3, [pc, #436]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351e:	496a      	ldr	r1, [pc, #424]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003532:	4b65      	ldr	r3, [pc, #404]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	4961      	ldr	r1, [pc, #388]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003554:	4b5c      	ldr	r3, [pc, #368]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003562:	4959      	ldr	r1, [pc, #356]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003576:	4b54      	ldr	r3, [pc, #336]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003584:	4950      	ldr	r1, [pc, #320]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003598:	4b4b      	ldr	r3, [pc, #300]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a6:	4948      	ldr	r1, [pc, #288]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ba:	4b43      	ldr	r3, [pc, #268]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	493f      	ldr	r1, [pc, #252]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d028      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035dc:	4b3a      	ldr	r3, [pc, #232]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ea:	4937      	ldr	r1, [pc, #220]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035fa:	d106      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035fc:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4a31      	ldr	r2, [pc, #196]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003606:	60d3      	str	r3, [r2, #12]
 8003608:	e011      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003612:	d10c      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3304      	adds	r3, #4
 8003618:	2101      	movs	r1, #1
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f8c8 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800362a:	7cfb      	ldrb	r3, [r7, #19]
 800362c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d028      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800363a:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	491f      	ldr	r1, [pc, #124]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003658:	d106      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800365a:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	4a1a      	ldr	r2, [pc, #104]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003664:	60d3      	str	r3, [r2, #12]
 8003666:	e011      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003670:	d10c      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3304      	adds	r3, #4
 8003676:	2101      	movs	r1, #1
 8003678:	4618      	mov	r0, r3
 800367a:	f000 f899 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 800367e:	4603      	mov	r3, r0
 8003680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003682:	7cfb      	ldrb	r3, [r7, #19]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d02b      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a6:	4908      	ldr	r1, [pc, #32]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036b6:	d109      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a02      	ldr	r2, [pc, #8]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036c2:	60d3      	str	r3, [r2, #12]
 80036c4:	e014      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3304      	adds	r3, #4
 80036da:	2101      	movs	r1, #1
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 f867 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036e6:	7cfb      	ldrb	r3, [r7, #19]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d02f      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036fc:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003702:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800370a:	4928      	ldr	r1, [pc, #160]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800371a:	d10d      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	2102      	movs	r1, #2
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f844 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d014      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	74bb      	strb	r3, [r7, #18]
 8003736:	e011      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800373c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003740:	d10c      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3320      	adds	r3, #32
 8003746:	2102      	movs	r1, #2
 8003748:	4618      	mov	r0, r3
 800374a:	f000 f925 	bl	8003998 <RCCEx_PLLSAI2_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003752:	7cfb      	ldrb	r3, [r7, #19]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003768:	4b10      	ldr	r3, [pc, #64]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003776:	490d      	ldr	r1, [pc, #52]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800378c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003790:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800379a:	4904      	ldr	r1, [pc, #16]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40021000 	.word	0x40021000

080037b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037be:	4b75      	ldr	r3, [pc, #468]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d018      	beq.n	80037fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037ca:	4b72      	ldr	r3, [pc, #456]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0203 	and.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d10d      	bne.n	80037f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
       ||
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037e2:	4b6c      	ldr	r3, [pc, #432]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
       ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d047      	beq.n	8003886 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	73fb      	strb	r3, [r7, #15]
 80037fa:	e044      	b.n	8003886 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b03      	cmp	r3, #3
 8003802:	d018      	beq.n	8003836 <RCCEx_PLLSAI1_Config+0x86>
 8003804:	2b03      	cmp	r3, #3
 8003806:	d825      	bhi.n	8003854 <RCCEx_PLLSAI1_Config+0xa4>
 8003808:	2b01      	cmp	r3, #1
 800380a:	d002      	beq.n	8003812 <RCCEx_PLLSAI1_Config+0x62>
 800380c:	2b02      	cmp	r3, #2
 800380e:	d009      	beq.n	8003824 <RCCEx_PLLSAI1_Config+0x74>
 8003810:	e020      	b.n	8003854 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003812:	4b60      	ldr	r3, [pc, #384]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d11d      	bne.n	800385a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003822:	e01a      	b.n	800385a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003824:	4b5b      	ldr	r3, [pc, #364]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d116      	bne.n	800385e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003834:	e013      	b.n	800385e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003836:	4b57      	ldr	r3, [pc, #348]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10f      	bne.n	8003862 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003842:	4b54      	ldr	r3, [pc, #336]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003852:	e006      	b.n	8003862 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      break;
 8003858:	e004      	b.n	8003864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800385a:	bf00      	nop
 800385c:	e002      	b.n	8003864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800385e:	bf00      	nop
 8003860:	e000      	b.n	8003864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003862:	bf00      	nop
    }

    if(status == HAL_OK)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800386a:	4b4a      	ldr	r3, [pc, #296]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6819      	ldr	r1, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	3b01      	subs	r3, #1
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	430b      	orrs	r3, r1
 8003880:	4944      	ldr	r1, [pc, #272]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d17d      	bne.n	8003988 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800388c:	4b41      	ldr	r3, [pc, #260]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a40      	ldr	r2, [pc, #256]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003892:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003898:	f7fe fb4c 	bl	8001f34 <HAL_GetTick>
 800389c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800389e:	e009      	b.n	80038b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038a0:	f7fe fb48 	bl	8001f34 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d902      	bls.n	80038b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	73fb      	strb	r3, [r7, #15]
        break;
 80038b2:	e005      	b.n	80038c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038b4:	4b37      	ldr	r3, [pc, #220]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1ef      	bne.n	80038a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d160      	bne.n	8003988 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d111      	bne.n	80038f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038cc:	4b31      	ldr	r3, [pc, #196]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6892      	ldr	r2, [r2, #8]
 80038dc:	0211      	lsls	r1, r2, #8
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68d2      	ldr	r2, [r2, #12]
 80038e2:	0912      	lsrs	r2, r2, #4
 80038e4:	0452      	lsls	r2, r2, #17
 80038e6:	430a      	orrs	r2, r1
 80038e8:	492a      	ldr	r1, [pc, #168]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	610b      	str	r3, [r1, #16]
 80038ee:	e027      	b.n	8003940 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d112      	bne.n	800391c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038f6:	4b27      	ldr	r3, [pc, #156]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6892      	ldr	r2, [r2, #8]
 8003906:	0211      	lsls	r1, r2, #8
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6912      	ldr	r2, [r2, #16]
 800390c:	0852      	lsrs	r2, r2, #1
 800390e:	3a01      	subs	r2, #1
 8003910:	0552      	lsls	r2, r2, #21
 8003912:	430a      	orrs	r2, r1
 8003914:	491f      	ldr	r1, [pc, #124]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003916:	4313      	orrs	r3, r2
 8003918:	610b      	str	r3, [r1, #16]
 800391a:	e011      	b.n	8003940 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003924:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6892      	ldr	r2, [r2, #8]
 800392c:	0211      	lsls	r1, r2, #8
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6952      	ldr	r2, [r2, #20]
 8003932:	0852      	lsrs	r2, r2, #1
 8003934:	3a01      	subs	r2, #1
 8003936:	0652      	lsls	r2, r2, #25
 8003938:	430a      	orrs	r2, r1
 800393a:	4916      	ldr	r1, [pc, #88]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a13      	ldr	r2, [pc, #76]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003946:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800394a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fe faf2 	bl	8001f34 <HAL_GetTick>
 8003950:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003952:	e009      	b.n	8003968 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003954:	f7fe faee 	bl	8001f34 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d902      	bls.n	8003968 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	73fb      	strb	r3, [r7, #15]
          break;
 8003966:	e005      	b.n	8003974 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ef      	beq.n	8003954 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	4904      	ldr	r1, [pc, #16]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003984:	4313      	orrs	r3, r2
 8003986:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40021000 	.word	0x40021000

08003998 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039a6:	4b6a      	ldr	r3, [pc, #424]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d018      	beq.n	80039e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039b2:	4b67      	ldr	r3, [pc, #412]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0203 	and.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d10d      	bne.n	80039de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
       ||
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039ca:	4b61      	ldr	r3, [pc, #388]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
       ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d047      	beq.n	8003a6e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
 80039e2:	e044      	b.n	8003a6e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d018      	beq.n	8003a1e <RCCEx_PLLSAI2_Config+0x86>
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d825      	bhi.n	8003a3c <RCCEx_PLLSAI2_Config+0xa4>
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d002      	beq.n	80039fa <RCCEx_PLLSAI2_Config+0x62>
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d009      	beq.n	8003a0c <RCCEx_PLLSAI2_Config+0x74>
 80039f8:	e020      	b.n	8003a3c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039fa:	4b55      	ldr	r3, [pc, #340]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11d      	bne.n	8003a42 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a0a:	e01a      	b.n	8003a42 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a0c:	4b50      	ldr	r3, [pc, #320]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d116      	bne.n	8003a46 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1c:	e013      	b.n	8003a46 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a1e:	4b4c      	ldr	r3, [pc, #304]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10f      	bne.n	8003a4a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a2a:	4b49      	ldr	r3, [pc, #292]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a3a:	e006      	b.n	8003a4a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a40:	e004      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a42:	bf00      	nop
 8003a44:	e002      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a46:	bf00      	nop
 8003a48:	e000      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10d      	bne.n	8003a6e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a52:	4b3f      	ldr	r3, [pc, #252]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	430b      	orrs	r3, r1
 8003a68:	4939      	ldr	r1, [pc, #228]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d167      	bne.n	8003b44 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a74:	4b36      	ldr	r3, [pc, #216]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a35      	ldr	r2, [pc, #212]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a80:	f7fe fa58 	bl	8001f34 <HAL_GetTick>
 8003a84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a86:	e009      	b.n	8003a9c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a88:	f7fe fa54 	bl	8001f34 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d902      	bls.n	8003a9c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	73fb      	strb	r3, [r7, #15]
        break;
 8003a9a:	e005      	b.n	8003aa8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a9c:	4b2c      	ldr	r3, [pc, #176]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1ef      	bne.n	8003a88 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d14a      	bne.n	8003b44 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d111      	bne.n	8003ad8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ab4:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6892      	ldr	r2, [r2, #8]
 8003ac4:	0211      	lsls	r1, r2, #8
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68d2      	ldr	r2, [r2, #12]
 8003aca:	0912      	lsrs	r2, r2, #4
 8003acc:	0452      	lsls	r2, r2, #17
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	491f      	ldr	r1, [pc, #124]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	614b      	str	r3, [r1, #20]
 8003ad6:	e011      	b.n	8003afc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ae0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6892      	ldr	r2, [r2, #8]
 8003ae8:	0211      	lsls	r1, r2, #8
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6912      	ldr	r2, [r2, #16]
 8003aee:	0852      	lsrs	r2, r2, #1
 8003af0:	3a01      	subs	r2, #1
 8003af2:	0652      	lsls	r2, r2, #25
 8003af4:	430a      	orrs	r2, r1
 8003af6:	4916      	ldr	r1, [pc, #88]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003afc:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a13      	ldr	r2, [pc, #76]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fe fa14 	bl	8001f34 <HAL_GetTick>
 8003b0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b0e:	e009      	b.n	8003b24 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b10:	f7fe fa10 	bl	8001f34 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d902      	bls.n	8003b24 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	73fb      	strb	r3, [r7, #15]
          break;
 8003b22:	e005      	b.n	8003b30 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0ef      	beq.n	8003b10 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	4904      	ldr	r1, [pc, #16]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000

08003b54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e095      	b.n	8003c92 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d108      	bne.n	8003b80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b76:	d009      	beq.n	8003b8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	61da      	str	r2, [r3, #28]
 8003b7e:	e005      	b.n	8003b8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fd ff7c 	bl	8001aa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bcc:	d902      	bls.n	8003bd4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	e002      	b.n	8003bda <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003be2:	d007      	beq.n	8003bf4 <HAL_SPI_Init+0xa0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bec:	d002      	beq.n	8003bf4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	ea42 0103 	orr.w	r1, r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	0c1b      	lsrs	r3, r3, #16
 8003c50:	f003 0204 	and.w	r2, r3, #4
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c70:	ea42 0103 	orr.w	r1, r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b08a      	sub	sp, #40	; 0x28
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
 8003ca6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_SPI_TransmitReceive+0x26>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e1fb      	b.n	80040b8 <HAL_SPI_TransmitReceive+0x41e>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cc8:	f7fe f934 	bl	8001f34 <HAL_GetTick>
 8003ccc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cd4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003cdc:	887b      	ldrh	r3, [r7, #2]
 8003cde:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003ce0:	887b      	ldrh	r3, [r7, #2]
 8003ce2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ce4:	7efb      	ldrb	r3, [r7, #27]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d00e      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x6e>
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cf0:	d106      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d102      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x66>
 8003cfa:	7efb      	ldrb	r3, [r7, #27]
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d003      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
 8003d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d06:	e1cd      	b.n	80040a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_SPI_TransmitReceive+0x80>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_SPI_TransmitReceive+0x80>
 8003d14:	887b      	ldrh	r3, [r7, #2]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d103      	bne.n	8003d22 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d20:	e1c0      	b.n	80040a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d003      	beq.n	8003d36 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2205      	movs	r2, #5
 8003d32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	887a      	ldrh	r2, [r7, #2]
 8003d46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	887a      	ldrh	r2, [r7, #2]
 8003d4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	887a      	ldrh	r2, [r7, #2]
 8003d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	887a      	ldrh	r2, [r7, #2]
 8003d62:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d78:	d802      	bhi.n	8003d80 <HAL_SPI_TransmitReceive+0xe6>
 8003d7a:	8a3b      	ldrh	r3, [r7, #16]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d908      	bls.n	8003d92 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	e007      	b.n	8003da2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003da0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b40      	cmp	r3, #64	; 0x40
 8003dae:	d007      	beq.n	8003dc0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dc8:	d97c      	bls.n	8003ec4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_SPI_TransmitReceive+0x13e>
 8003dd2:	8a7b      	ldrh	r3, [r7, #18]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d169      	bne.n	8003eac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	881a      	ldrh	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	1c9a      	adds	r2, r3, #2
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dfc:	e056      	b.n	8003eac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d11b      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x1aa>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d016      	beq.n	8003e44 <HAL_SPI_TransmitReceive+0x1aa>
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d113      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	881a      	ldrh	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	1c9a      	adds	r2, r3, #2
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d11c      	bne.n	8003e8c <HAL_SPI_TransmitReceive+0x1f2>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d016      	beq.n	8003e8c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	b292      	uxth	r2, r2
 8003e6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	1c9a      	adds	r2, r3, #2
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e8c:	f7fe f852 	bl	8001f34 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d807      	bhi.n	8003eac <HAL_SPI_TransmitReceive+0x212>
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea2:	d003      	beq.n	8003eac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003eaa:	e0fb      	b.n	80040a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1a3      	bne.n	8003dfe <HAL_SPI_TransmitReceive+0x164>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d19d      	bne.n	8003dfe <HAL_SPI_TransmitReceive+0x164>
 8003ec2:	e0df      	b.n	8004084 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_SPI_TransmitReceive+0x23a>
 8003ecc:	8a7b      	ldrh	r3, [r7, #18]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	f040 80cb 	bne.w	800406a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d912      	bls.n	8003f04 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	881a      	ldrh	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	1c9a      	adds	r2, r3, #2
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b02      	subs	r3, #2
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f02:	e0b2      	b.n	800406a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	7812      	ldrb	r2, [r2, #0]
 8003f10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f2a:	e09e      	b.n	800406a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d134      	bne.n	8003fa4 <HAL_SPI_TransmitReceive+0x30a>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d02f      	beq.n	8003fa4 <HAL_SPI_TransmitReceive+0x30a>
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d12c      	bne.n	8003fa4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d912      	bls.n	8003f7a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	881a      	ldrh	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	1c9a      	adds	r2, r3, #2
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b02      	subs	r3, #2
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f78:	e012      	b.n	8003fa0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	330c      	adds	r3, #12
 8003f84:	7812      	ldrb	r2, [r2, #0]
 8003f86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d148      	bne.n	8004044 <HAL_SPI_TransmitReceive+0x3aa>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d042      	beq.n	8004044 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d923      	bls.n	8004012 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	b292      	uxth	r2, r2
 8003fd6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	1c9a      	adds	r2, r3, #2
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b02      	subs	r3, #2
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d81f      	bhi.n	8004040 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800400e:	605a      	str	r2, [r3, #4]
 8004010:	e016      	b.n	8004040 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f103 020c 	add.w	r2, r3, #12
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	7812      	ldrb	r2, [r2, #0]
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004040:	2301      	movs	r3, #1
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004044:	f7fd ff76 	bl	8001f34 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004050:	429a      	cmp	r2, r3
 8004052:	d803      	bhi.n	800405c <HAL_SPI_TransmitReceive+0x3c2>
 8004054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405a:	d102      	bne.n	8004062 <HAL_SPI_TransmitReceive+0x3c8>
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	2b00      	cmp	r3, #0
 8004060:	d103      	bne.n	800406a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004068:	e01c      	b.n	80040a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	f47f af5b 	bne.w	8003f2c <HAL_SPI_TransmitReceive+0x292>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	f47f af54 	bne.w	8003f2c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f937 	bl	80042fc <SPI_EndRxTxTransaction>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d006      	beq.n	80040a2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	661a      	str	r2, [r3, #96]	; 0x60
 80040a0:	e000      	b.n	80040a4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80040a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3728      	adds	r7, #40	; 0x28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	4613      	mov	r3, r2
 80040ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040d0:	f7fd ff30 	bl	8001f34 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	4413      	add	r3, r2
 80040de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040e0:	f7fd ff28 	bl	8001f34 <HAL_GetTick>
 80040e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040e6:	4b39      	ldr	r3, [pc, #228]	; (80041cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	015b      	lsls	r3, r3, #5
 80040ec:	0d1b      	lsrs	r3, r3, #20
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	fb02 f303 	mul.w	r3, r2, r3
 80040f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040f6:	e054      	b.n	80041a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d050      	beq.n	80041a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004100:	f7fd ff18 	bl	8001f34 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	429a      	cmp	r2, r3
 800410e:	d902      	bls.n	8004116 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d13d      	bne.n	8004192 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004124:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800412e:	d111      	bne.n	8004154 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004138:	d004      	beq.n	8004144 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004142:	d107      	bne.n	8004154 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004152:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800415c:	d10f      	bne.n	800417e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800417c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e017      	b.n	80041c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	3b01      	subs	r3, #1
 80041a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4013      	ands	r3, r2
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	bf0c      	ite	eq
 80041b2:	2301      	moveq	r3, #1
 80041b4:	2300      	movne	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d19b      	bne.n	80040f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3720      	adds	r7, #32
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	2000000c 	.word	0x2000000c

080041d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08a      	sub	sp, #40	; 0x28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80041e2:	f7fd fea7 	bl	8001f34 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	4413      	add	r3, r2
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80041f2:	f7fd fe9f 	bl	8001f34 <HAL_GetTick>
 80041f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004200:	4b3d      	ldr	r3, [pc, #244]	; (80042f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	00da      	lsls	r2, r3, #3
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	0d1b      	lsrs	r3, r3, #20
 8004210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004218:	e060      	b.n	80042dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004220:	d107      	bne.n	8004232 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d104      	bne.n	8004232 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004230:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d050      	beq.n	80042dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800423a:	f7fd fe7b 	bl	8001f34 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004246:	429a      	cmp	r2, r3
 8004248:	d902      	bls.n	8004250 <SPI_WaitFifoStateUntilTimeout+0x80>
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	2b00      	cmp	r3, #0
 800424e:	d13d      	bne.n	80042cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800425e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004268:	d111      	bne.n	800428e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004272:	d004      	beq.n	800427e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427c:	d107      	bne.n	800428e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800428c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004296:	d10f      	bne.n	80042b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e010      	b.n	80042ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	3b01      	subs	r3, #1
 80042da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4013      	ands	r3, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d196      	bne.n	800421a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3728      	adds	r7, #40	; 0x28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	2000000c 	.word	0x2000000c

080042fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2200      	movs	r2, #0
 8004310:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f7ff ff5b 	bl	80041d0 <SPI_WaitFifoStateUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d007      	beq.n	8004330 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004324:	f043 0220 	orr.w	r2, r3, #32
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e027      	b.n	8004380 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2200      	movs	r2, #0
 8004338:	2180      	movs	r1, #128	; 0x80
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f7ff fec0 	bl	80040c0 <SPI_WaitFlagStateUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800434a:	f043 0220 	orr.w	r2, r3, #32
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e014      	b.n	8004380 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2200      	movs	r2, #0
 800435e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f7ff ff34 	bl	80041d0 <SPI_WaitFifoStateUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004372:	f043 0220 	orr.w	r2, r3, #32
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e000      	b.n	8004380 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e040      	b.n	800441c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fd fcb8 	bl	8001d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2224      	movs	r2, #36	; 0x24
 80043b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0201 	bic.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f8c0 	bl	800454c <UART_SetConfig>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e022      	b.n	800441c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fb6c 	bl	8004abc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004402:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fbf3 	bl	8004c00 <UART_CheckIdleState>
 800441a:	4603      	mov	r3, r0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08a      	sub	sp, #40	; 0x28
 8004428:	af02      	add	r7, sp, #8
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004438:	2b20      	cmp	r3, #32
 800443a:	f040 8082 	bne.w	8004542 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <HAL_UART_Transmit+0x26>
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e07a      	b.n	8004544 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_UART_Transmit+0x38>
 8004458:	2302      	movs	r3, #2
 800445a:	e073      	b.n	8004544 <HAL_UART_Transmit+0x120>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2221      	movs	r2, #33	; 0x21
 8004470:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004472:	f7fd fd5f 	bl	8001f34 <HAL_GetTick>
 8004476:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	88fa      	ldrh	r2, [r7, #6]
 800447c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004490:	d108      	bne.n	80044a4 <HAL_UART_Transmit+0x80>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d104      	bne.n	80044a4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	e003      	b.n	80044ac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80044b4:	e02d      	b.n	8004512 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2200      	movs	r2, #0
 80044be:	2180      	movs	r1, #128	; 0x80
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fbe6 	bl	8004c92 <UART_WaitOnFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e039      	b.n	8004544 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	881a      	ldrh	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044e2:	b292      	uxth	r2, r2
 80044e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	3302      	adds	r3, #2
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	e008      	b.n	8004500 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	781a      	ldrb	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	b292      	uxth	r2, r2
 80044f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	3301      	adds	r3, #1
 80044fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1cb      	bne.n	80044b6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2200      	movs	r2, #0
 8004526:	2140      	movs	r1, #64	; 0x40
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 fbb2 	bl	8004c92 <UART_WaitOnFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e005      	b.n	8004544 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	e000      	b.n	8004544 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800454c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004550:	b08a      	sub	sp, #40	; 0x28
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	431a      	orrs	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	431a      	orrs	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	4313      	orrs	r3, r2
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4ba4      	ldr	r3, [pc, #656]	; (800480c <UART_SetConfig+0x2c0>)
 800457c:	4013      	ands	r3, r2
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	6812      	ldr	r2, [r2, #0]
 8004582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004584:	430b      	orrs	r3, r1
 8004586:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a99      	ldr	r2, [pc, #612]	; (8004810 <UART_SetConfig+0x2c4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d004      	beq.n	80045b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b4:	4313      	orrs	r3, r2
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c8:	430a      	orrs	r2, r1
 80045ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a90      	ldr	r2, [pc, #576]	; (8004814 <UART_SetConfig+0x2c8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d126      	bne.n	8004624 <UART_SetConfig+0xd8>
 80045d6:	4b90      	ldr	r3, [pc, #576]	; (8004818 <UART_SetConfig+0x2cc>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d81b      	bhi.n	800461c <UART_SetConfig+0xd0>
 80045e4:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <UART_SetConfig+0xa0>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	080045fd 	.word	0x080045fd
 80045f0:	0800460d 	.word	0x0800460d
 80045f4:	08004605 	.word	0x08004605
 80045f8:	08004615 	.word	0x08004615
 80045fc:	2301      	movs	r3, #1
 80045fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004602:	e116      	b.n	8004832 <UART_SetConfig+0x2e6>
 8004604:	2302      	movs	r3, #2
 8004606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460a:	e112      	b.n	8004832 <UART_SetConfig+0x2e6>
 800460c:	2304      	movs	r3, #4
 800460e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004612:	e10e      	b.n	8004832 <UART_SetConfig+0x2e6>
 8004614:	2308      	movs	r3, #8
 8004616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800461a:	e10a      	b.n	8004832 <UART_SetConfig+0x2e6>
 800461c:	2310      	movs	r3, #16
 800461e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004622:	e106      	b.n	8004832 <UART_SetConfig+0x2e6>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a7c      	ldr	r2, [pc, #496]	; (800481c <UART_SetConfig+0x2d0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d138      	bne.n	80046a0 <UART_SetConfig+0x154>
 800462e:	4b7a      	ldr	r3, [pc, #488]	; (8004818 <UART_SetConfig+0x2cc>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b0c      	cmp	r3, #12
 800463a:	d82d      	bhi.n	8004698 <UART_SetConfig+0x14c>
 800463c:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <UART_SetConfig+0xf8>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	08004679 	.word	0x08004679
 8004648:	08004699 	.word	0x08004699
 800464c:	08004699 	.word	0x08004699
 8004650:	08004699 	.word	0x08004699
 8004654:	08004689 	.word	0x08004689
 8004658:	08004699 	.word	0x08004699
 800465c:	08004699 	.word	0x08004699
 8004660:	08004699 	.word	0x08004699
 8004664:	08004681 	.word	0x08004681
 8004668:	08004699 	.word	0x08004699
 800466c:	08004699 	.word	0x08004699
 8004670:	08004699 	.word	0x08004699
 8004674:	08004691 	.word	0x08004691
 8004678:	2300      	movs	r3, #0
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467e:	e0d8      	b.n	8004832 <UART_SetConfig+0x2e6>
 8004680:	2302      	movs	r3, #2
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004686:	e0d4      	b.n	8004832 <UART_SetConfig+0x2e6>
 8004688:	2304      	movs	r3, #4
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468e:	e0d0      	b.n	8004832 <UART_SetConfig+0x2e6>
 8004690:	2308      	movs	r3, #8
 8004692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004696:	e0cc      	b.n	8004832 <UART_SetConfig+0x2e6>
 8004698:	2310      	movs	r3, #16
 800469a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469e:	e0c8      	b.n	8004832 <UART_SetConfig+0x2e6>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a5e      	ldr	r2, [pc, #376]	; (8004820 <UART_SetConfig+0x2d4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d125      	bne.n	80046f6 <UART_SetConfig+0x1aa>
 80046aa:	4b5b      	ldr	r3, [pc, #364]	; (8004818 <UART_SetConfig+0x2cc>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046b4:	2b30      	cmp	r3, #48	; 0x30
 80046b6:	d016      	beq.n	80046e6 <UART_SetConfig+0x19a>
 80046b8:	2b30      	cmp	r3, #48	; 0x30
 80046ba:	d818      	bhi.n	80046ee <UART_SetConfig+0x1a2>
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d00a      	beq.n	80046d6 <UART_SetConfig+0x18a>
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d814      	bhi.n	80046ee <UART_SetConfig+0x1a2>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <UART_SetConfig+0x182>
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d008      	beq.n	80046de <UART_SetConfig+0x192>
 80046cc:	e00f      	b.n	80046ee <UART_SetConfig+0x1a2>
 80046ce:	2300      	movs	r3, #0
 80046d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d4:	e0ad      	b.n	8004832 <UART_SetConfig+0x2e6>
 80046d6:	2302      	movs	r3, #2
 80046d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046dc:	e0a9      	b.n	8004832 <UART_SetConfig+0x2e6>
 80046de:	2304      	movs	r3, #4
 80046e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e4:	e0a5      	b.n	8004832 <UART_SetConfig+0x2e6>
 80046e6:	2308      	movs	r3, #8
 80046e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ec:	e0a1      	b.n	8004832 <UART_SetConfig+0x2e6>
 80046ee:	2310      	movs	r3, #16
 80046f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f4:	e09d      	b.n	8004832 <UART_SetConfig+0x2e6>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a4a      	ldr	r2, [pc, #296]	; (8004824 <UART_SetConfig+0x2d8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d125      	bne.n	800474c <UART_SetConfig+0x200>
 8004700:	4b45      	ldr	r3, [pc, #276]	; (8004818 <UART_SetConfig+0x2cc>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004706:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800470a:	2bc0      	cmp	r3, #192	; 0xc0
 800470c:	d016      	beq.n	800473c <UART_SetConfig+0x1f0>
 800470e:	2bc0      	cmp	r3, #192	; 0xc0
 8004710:	d818      	bhi.n	8004744 <UART_SetConfig+0x1f8>
 8004712:	2b80      	cmp	r3, #128	; 0x80
 8004714:	d00a      	beq.n	800472c <UART_SetConfig+0x1e0>
 8004716:	2b80      	cmp	r3, #128	; 0x80
 8004718:	d814      	bhi.n	8004744 <UART_SetConfig+0x1f8>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <UART_SetConfig+0x1d8>
 800471e:	2b40      	cmp	r3, #64	; 0x40
 8004720:	d008      	beq.n	8004734 <UART_SetConfig+0x1e8>
 8004722:	e00f      	b.n	8004744 <UART_SetConfig+0x1f8>
 8004724:	2300      	movs	r3, #0
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472a:	e082      	b.n	8004832 <UART_SetConfig+0x2e6>
 800472c:	2302      	movs	r3, #2
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004732:	e07e      	b.n	8004832 <UART_SetConfig+0x2e6>
 8004734:	2304      	movs	r3, #4
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473a:	e07a      	b.n	8004832 <UART_SetConfig+0x2e6>
 800473c:	2308      	movs	r3, #8
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004742:	e076      	b.n	8004832 <UART_SetConfig+0x2e6>
 8004744:	2310      	movs	r3, #16
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474a:	e072      	b.n	8004832 <UART_SetConfig+0x2e6>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a35      	ldr	r2, [pc, #212]	; (8004828 <UART_SetConfig+0x2dc>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d12a      	bne.n	80047ac <UART_SetConfig+0x260>
 8004756:	4b30      	ldr	r3, [pc, #192]	; (8004818 <UART_SetConfig+0x2cc>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004764:	d01a      	beq.n	800479c <UART_SetConfig+0x250>
 8004766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800476a:	d81b      	bhi.n	80047a4 <UART_SetConfig+0x258>
 800476c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004770:	d00c      	beq.n	800478c <UART_SetConfig+0x240>
 8004772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004776:	d815      	bhi.n	80047a4 <UART_SetConfig+0x258>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <UART_SetConfig+0x238>
 800477c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004780:	d008      	beq.n	8004794 <UART_SetConfig+0x248>
 8004782:	e00f      	b.n	80047a4 <UART_SetConfig+0x258>
 8004784:	2300      	movs	r3, #0
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478a:	e052      	b.n	8004832 <UART_SetConfig+0x2e6>
 800478c:	2302      	movs	r3, #2
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004792:	e04e      	b.n	8004832 <UART_SetConfig+0x2e6>
 8004794:	2304      	movs	r3, #4
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479a:	e04a      	b.n	8004832 <UART_SetConfig+0x2e6>
 800479c:	2308      	movs	r3, #8
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a2:	e046      	b.n	8004832 <UART_SetConfig+0x2e6>
 80047a4:	2310      	movs	r3, #16
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047aa:	e042      	b.n	8004832 <UART_SetConfig+0x2e6>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a17      	ldr	r2, [pc, #92]	; (8004810 <UART_SetConfig+0x2c4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d13a      	bne.n	800482c <UART_SetConfig+0x2e0>
 80047b6:	4b18      	ldr	r3, [pc, #96]	; (8004818 <UART_SetConfig+0x2cc>)
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047c4:	d01a      	beq.n	80047fc <UART_SetConfig+0x2b0>
 80047c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047ca:	d81b      	bhi.n	8004804 <UART_SetConfig+0x2b8>
 80047cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d0:	d00c      	beq.n	80047ec <UART_SetConfig+0x2a0>
 80047d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d6:	d815      	bhi.n	8004804 <UART_SetConfig+0x2b8>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <UART_SetConfig+0x298>
 80047dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e0:	d008      	beq.n	80047f4 <UART_SetConfig+0x2a8>
 80047e2:	e00f      	b.n	8004804 <UART_SetConfig+0x2b8>
 80047e4:	2300      	movs	r3, #0
 80047e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ea:	e022      	b.n	8004832 <UART_SetConfig+0x2e6>
 80047ec:	2302      	movs	r3, #2
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f2:	e01e      	b.n	8004832 <UART_SetConfig+0x2e6>
 80047f4:	2304      	movs	r3, #4
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fa:	e01a      	b.n	8004832 <UART_SetConfig+0x2e6>
 80047fc:	2308      	movs	r3, #8
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004802:	e016      	b.n	8004832 <UART_SetConfig+0x2e6>
 8004804:	2310      	movs	r3, #16
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480a:	e012      	b.n	8004832 <UART_SetConfig+0x2e6>
 800480c:	efff69f3 	.word	0xefff69f3
 8004810:	40008000 	.word	0x40008000
 8004814:	40013800 	.word	0x40013800
 8004818:	40021000 	.word	0x40021000
 800481c:	40004400 	.word	0x40004400
 8004820:	40004800 	.word	0x40004800
 8004824:	40004c00 	.word	0x40004c00
 8004828:	40005000 	.word	0x40005000
 800482c:	2310      	movs	r3, #16
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a9f      	ldr	r2, [pc, #636]	; (8004ab4 <UART_SetConfig+0x568>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d17a      	bne.n	8004932 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800483c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004840:	2b08      	cmp	r3, #8
 8004842:	d824      	bhi.n	800488e <UART_SetConfig+0x342>
 8004844:	a201      	add	r2, pc, #4	; (adr r2, 800484c <UART_SetConfig+0x300>)
 8004846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484a:	bf00      	nop
 800484c:	08004871 	.word	0x08004871
 8004850:	0800488f 	.word	0x0800488f
 8004854:	08004879 	.word	0x08004879
 8004858:	0800488f 	.word	0x0800488f
 800485c:	0800487f 	.word	0x0800487f
 8004860:	0800488f 	.word	0x0800488f
 8004864:	0800488f 	.word	0x0800488f
 8004868:	0800488f 	.word	0x0800488f
 800486c:	08004887 	.word	0x08004887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004870:	f7fe fc28 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8004874:	61f8      	str	r0, [r7, #28]
        break;
 8004876:	e010      	b.n	800489a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004878:	4b8f      	ldr	r3, [pc, #572]	; (8004ab8 <UART_SetConfig+0x56c>)
 800487a:	61fb      	str	r3, [r7, #28]
        break;
 800487c:	e00d      	b.n	800489a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800487e:	f7fe fb89 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8004882:	61f8      	str	r0, [r7, #28]
        break;
 8004884:	e009      	b.n	800489a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800488a:	61fb      	str	r3, [r7, #28]
        break;
 800488c:	e005      	b.n	800489a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004898:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80fb 	beq.w	8004a98 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	4613      	mov	r3, r2
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	4413      	add	r3, r2
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d305      	bcc.n	80048be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d903      	bls.n	80048c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048c4:	e0e8      	b.n	8004a98 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	2200      	movs	r2, #0
 80048ca:	461c      	mov	r4, r3
 80048cc:	4615      	mov	r5, r2
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	022b      	lsls	r3, r5, #8
 80048d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048dc:	0222      	lsls	r2, r4, #8
 80048de:	68f9      	ldr	r1, [r7, #12]
 80048e0:	6849      	ldr	r1, [r1, #4]
 80048e2:	0849      	lsrs	r1, r1, #1
 80048e4:	2000      	movs	r0, #0
 80048e6:	4688      	mov	r8, r1
 80048e8:	4681      	mov	r9, r0
 80048ea:	eb12 0a08 	adds.w	sl, r2, r8
 80048ee:	eb43 0b09 	adc.w	fp, r3, r9
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	603b      	str	r3, [r7, #0]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004900:	4650      	mov	r0, sl
 8004902:	4659      	mov	r1, fp
 8004904:	f7fb fcbc 	bl	8000280 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4613      	mov	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004916:	d308      	bcc.n	800492a <UART_SetConfig+0x3de>
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800491e:	d204      	bcs.n	800492a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	60da      	str	r2, [r3, #12]
 8004928:	e0b6      	b.n	8004a98 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004930:	e0b2      	b.n	8004a98 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800493a:	d15e      	bne.n	80049fa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800493c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004940:	2b08      	cmp	r3, #8
 8004942:	d828      	bhi.n	8004996 <UART_SetConfig+0x44a>
 8004944:	a201      	add	r2, pc, #4	; (adr r2, 800494c <UART_SetConfig+0x400>)
 8004946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494a:	bf00      	nop
 800494c:	08004971 	.word	0x08004971
 8004950:	08004979 	.word	0x08004979
 8004954:	08004981 	.word	0x08004981
 8004958:	08004997 	.word	0x08004997
 800495c:	08004987 	.word	0x08004987
 8004960:	08004997 	.word	0x08004997
 8004964:	08004997 	.word	0x08004997
 8004968:	08004997 	.word	0x08004997
 800496c:	0800498f 	.word	0x0800498f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004970:	f7fe fba8 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8004974:	61f8      	str	r0, [r7, #28]
        break;
 8004976:	e014      	b.n	80049a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004978:	f7fe fbba 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 800497c:	61f8      	str	r0, [r7, #28]
        break;
 800497e:	e010      	b.n	80049a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004980:	4b4d      	ldr	r3, [pc, #308]	; (8004ab8 <UART_SetConfig+0x56c>)
 8004982:	61fb      	str	r3, [r7, #28]
        break;
 8004984:	e00d      	b.n	80049a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004986:	f7fe fb05 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 800498a:	61f8      	str	r0, [r7, #28]
        break;
 800498c:	e009      	b.n	80049a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800498e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004992:	61fb      	str	r3, [r7, #28]
        break;
 8004994:	e005      	b.n	80049a2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d077      	beq.n	8004a98 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	005a      	lsls	r2, r3, #1
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	085b      	lsrs	r3, r3, #1
 80049b2:	441a      	add	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b0f      	cmp	r3, #15
 80049c2:	d916      	bls.n	80049f2 <UART_SetConfig+0x4a6>
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ca:	d212      	bcs.n	80049f2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	f023 030f 	bic.w	r3, r3, #15
 80049d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	b29b      	uxth	r3, r3
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	8afb      	ldrh	r3, [r7, #22]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	8afa      	ldrh	r2, [r7, #22]
 80049ee:	60da      	str	r2, [r3, #12]
 80049f0:	e052      	b.n	8004a98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049f8:	e04e      	b.n	8004a98 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d827      	bhi.n	8004a52 <UART_SetConfig+0x506>
 8004a02:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <UART_SetConfig+0x4bc>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004a35 	.word	0x08004a35
 8004a10:	08004a3d 	.word	0x08004a3d
 8004a14:	08004a53 	.word	0x08004a53
 8004a18:	08004a43 	.word	0x08004a43
 8004a1c:	08004a53 	.word	0x08004a53
 8004a20:	08004a53 	.word	0x08004a53
 8004a24:	08004a53 	.word	0x08004a53
 8004a28:	08004a4b 	.word	0x08004a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a2c:	f7fe fb4a 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8004a30:	61f8      	str	r0, [r7, #28]
        break;
 8004a32:	e014      	b.n	8004a5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a34:	f7fe fb5c 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 8004a38:	61f8      	str	r0, [r7, #28]
        break;
 8004a3a:	e010      	b.n	8004a5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a3c:	4b1e      	ldr	r3, [pc, #120]	; (8004ab8 <UART_SetConfig+0x56c>)
 8004a3e:	61fb      	str	r3, [r7, #28]
        break;
 8004a40:	e00d      	b.n	8004a5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a42:	f7fe faa7 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8004a46:	61f8      	str	r0, [r7, #28]
        break;
 8004a48:	e009      	b.n	8004a5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a4e:	61fb      	str	r3, [r7, #28]
        break;
 8004a50:	e005      	b.n	8004a5e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a5c:	bf00      	nop
    }

    if (pclk != 0U)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d019      	beq.n	8004a98 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	085a      	lsrs	r2, r3, #1
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	441a      	add	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b0f      	cmp	r3, #15
 8004a7c:	d909      	bls.n	8004a92 <UART_SetConfig+0x546>
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a84:	d205      	bcs.n	8004a92 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60da      	str	r2, [r3, #12]
 8004a90:	e002      	b.n	8004a98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004aa4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3728      	adds	r7, #40	; 0x28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40008000 	.word	0x40008000
 8004ab8:	00f42400 	.word	0x00f42400

08004abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01a      	beq.n	8004bd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bba:	d10a      	bne.n	8004bd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	605a      	str	r2, [r3, #4]
  }
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c10:	f7fd f990 	bl	8001f34 <HAL_GetTick>
 8004c14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d10e      	bne.n	8004c42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f82d 	bl	8004c92 <UART_WaitOnFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e023      	b.n	8004c8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d10e      	bne.n	8004c6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f817 	bl	8004c92 <UART_WaitOnFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e00d      	b.n	8004c8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b09c      	sub	sp, #112	; 0x70
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	603b      	str	r3, [r7, #0]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca2:	e0a5      	b.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004caa:	f000 80a1 	beq.w	8004df0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cae:	f7fd f941 	bl	8001f34 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d302      	bcc.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004cbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d13e      	bne.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cd8:	667b      	str	r3, [r7, #100]	; 0x64
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ce4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ce8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e6      	bne.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3308      	adds	r3, #8
 8004cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3308      	adds	r3, #8
 8004d14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d16:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e5      	bne.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e067      	b.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d04f      	beq.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d5e:	d147      	bne.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d68:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d88:	637b      	str	r3, [r7, #52]	; 0x34
 8004d8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e6      	bne.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3308      	adds	r3, #8
 8004da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	e853 3f00 	ldrex	r3, [r3]
 8004daa:	613b      	str	r3, [r7, #16]
   return(result);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3308      	adds	r3, #8
 8004dba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004dbc:	623a      	str	r2, [r7, #32]
 8004dbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc0:	69f9      	ldr	r1, [r7, #28]
 8004dc2:	6a3a      	ldr	r2, [r7, #32]
 8004dc4:	e841 2300 	strex	r3, r2, [r1]
 8004dc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e5      	bne.n	8004d9c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e010      	b.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	69da      	ldr	r2, [r3, #28]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	bf0c      	ite	eq
 8004e00:	2301      	moveq	r3, #1
 8004e02:	2300      	movne	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	f43f af4a 	beq.w	8004ca4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3770      	adds	r7, #112	; 0x70
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <__errno>:
 8004e1c:	4b01      	ldr	r3, [pc, #4]	; (8004e24 <__errno+0x8>)
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20000018 	.word	0x20000018

08004e28 <__libc_init_array>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	4d0d      	ldr	r5, [pc, #52]	; (8004e60 <__libc_init_array+0x38>)
 8004e2c:	4c0d      	ldr	r4, [pc, #52]	; (8004e64 <__libc_init_array+0x3c>)
 8004e2e:	1b64      	subs	r4, r4, r5
 8004e30:	10a4      	asrs	r4, r4, #2
 8004e32:	2600      	movs	r6, #0
 8004e34:	42a6      	cmp	r6, r4
 8004e36:	d109      	bne.n	8004e4c <__libc_init_array+0x24>
 8004e38:	4d0b      	ldr	r5, [pc, #44]	; (8004e68 <__libc_init_array+0x40>)
 8004e3a:	4c0c      	ldr	r4, [pc, #48]	; (8004e6c <__libc_init_array+0x44>)
 8004e3c:	f000 fc8e 	bl	800575c <_init>
 8004e40:	1b64      	subs	r4, r4, r5
 8004e42:	10a4      	asrs	r4, r4, #2
 8004e44:	2600      	movs	r6, #0
 8004e46:	42a6      	cmp	r6, r4
 8004e48:	d105      	bne.n	8004e56 <__libc_init_array+0x2e>
 8004e4a:	bd70      	pop	{r4, r5, r6, pc}
 8004e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e50:	4798      	blx	r3
 8004e52:	3601      	adds	r6, #1
 8004e54:	e7ee      	b.n	8004e34 <__libc_init_array+0xc>
 8004e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5a:	4798      	blx	r3
 8004e5c:	3601      	adds	r6, #1
 8004e5e:	e7f2      	b.n	8004e46 <__libc_init_array+0x1e>
 8004e60:	08006414 	.word	0x08006414
 8004e64:	08006414 	.word	0x08006414
 8004e68:	08006414 	.word	0x08006414
 8004e6c:	08006418 	.word	0x08006418

08004e70 <memset>:
 8004e70:	4402      	add	r2, r0
 8004e72:	4603      	mov	r3, r0
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d100      	bne.n	8004e7a <memset+0xa>
 8004e78:	4770      	bx	lr
 8004e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e7e:	e7f9      	b.n	8004e74 <memset+0x4>

08004e80 <siprintf>:
 8004e80:	b40e      	push	{r1, r2, r3}
 8004e82:	b500      	push	{lr}
 8004e84:	b09c      	sub	sp, #112	; 0x70
 8004e86:	ab1d      	add	r3, sp, #116	; 0x74
 8004e88:	9002      	str	r0, [sp, #8]
 8004e8a:	9006      	str	r0, [sp, #24]
 8004e8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e90:	4809      	ldr	r0, [pc, #36]	; (8004eb8 <siprintf+0x38>)
 8004e92:	9107      	str	r1, [sp, #28]
 8004e94:	9104      	str	r1, [sp, #16]
 8004e96:	4909      	ldr	r1, [pc, #36]	; (8004ebc <siprintf+0x3c>)
 8004e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e9c:	9105      	str	r1, [sp, #20]
 8004e9e:	6800      	ldr	r0, [r0, #0]
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	a902      	add	r1, sp, #8
 8004ea4:	f000 f868 	bl	8004f78 <_svfiprintf_r>
 8004ea8:	9b02      	ldr	r3, [sp, #8]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	b01c      	add	sp, #112	; 0x70
 8004eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004eb4:	b003      	add	sp, #12
 8004eb6:	4770      	bx	lr
 8004eb8:	20000018 	.word	0x20000018
 8004ebc:	ffff0208 	.word	0xffff0208

08004ec0 <__ssputs_r>:
 8004ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec4:	688e      	ldr	r6, [r1, #8]
 8004ec6:	429e      	cmp	r6, r3
 8004ec8:	4682      	mov	sl, r0
 8004eca:	460c      	mov	r4, r1
 8004ecc:	4690      	mov	r8, r2
 8004ece:	461f      	mov	r7, r3
 8004ed0:	d838      	bhi.n	8004f44 <__ssputs_r+0x84>
 8004ed2:	898a      	ldrh	r2, [r1, #12]
 8004ed4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ed8:	d032      	beq.n	8004f40 <__ssputs_r+0x80>
 8004eda:	6825      	ldr	r5, [r4, #0]
 8004edc:	6909      	ldr	r1, [r1, #16]
 8004ede:	eba5 0901 	sub.w	r9, r5, r1
 8004ee2:	6965      	ldr	r5, [r4, #20]
 8004ee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ee8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004eec:	3301      	adds	r3, #1
 8004eee:	444b      	add	r3, r9
 8004ef0:	106d      	asrs	r5, r5, #1
 8004ef2:	429d      	cmp	r5, r3
 8004ef4:	bf38      	it	cc
 8004ef6:	461d      	movcc	r5, r3
 8004ef8:	0553      	lsls	r3, r2, #21
 8004efa:	d531      	bpl.n	8004f60 <__ssputs_r+0xa0>
 8004efc:	4629      	mov	r1, r5
 8004efe:	f000 fb63 	bl	80055c8 <_malloc_r>
 8004f02:	4606      	mov	r6, r0
 8004f04:	b950      	cbnz	r0, 8004f1c <__ssputs_r+0x5c>
 8004f06:	230c      	movs	r3, #12
 8004f08:	f8ca 3000 	str.w	r3, [sl]
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f12:	81a3      	strh	r3, [r4, #12]
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f1c:	6921      	ldr	r1, [r4, #16]
 8004f1e:	464a      	mov	r2, r9
 8004f20:	f000 fabe 	bl	80054a0 <memcpy>
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2e:	81a3      	strh	r3, [r4, #12]
 8004f30:	6126      	str	r6, [r4, #16]
 8004f32:	6165      	str	r5, [r4, #20]
 8004f34:	444e      	add	r6, r9
 8004f36:	eba5 0509 	sub.w	r5, r5, r9
 8004f3a:	6026      	str	r6, [r4, #0]
 8004f3c:	60a5      	str	r5, [r4, #8]
 8004f3e:	463e      	mov	r6, r7
 8004f40:	42be      	cmp	r6, r7
 8004f42:	d900      	bls.n	8004f46 <__ssputs_r+0x86>
 8004f44:	463e      	mov	r6, r7
 8004f46:	6820      	ldr	r0, [r4, #0]
 8004f48:	4632      	mov	r2, r6
 8004f4a:	4641      	mov	r1, r8
 8004f4c:	f000 fab6 	bl	80054bc <memmove>
 8004f50:	68a3      	ldr	r3, [r4, #8]
 8004f52:	1b9b      	subs	r3, r3, r6
 8004f54:	60a3      	str	r3, [r4, #8]
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	4433      	add	r3, r6
 8004f5a:	6023      	str	r3, [r4, #0]
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	e7db      	b.n	8004f18 <__ssputs_r+0x58>
 8004f60:	462a      	mov	r2, r5
 8004f62:	f000 fba5 	bl	80056b0 <_realloc_r>
 8004f66:	4606      	mov	r6, r0
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d1e1      	bne.n	8004f30 <__ssputs_r+0x70>
 8004f6c:	6921      	ldr	r1, [r4, #16]
 8004f6e:	4650      	mov	r0, sl
 8004f70:	f000 fabe 	bl	80054f0 <_free_r>
 8004f74:	e7c7      	b.n	8004f06 <__ssputs_r+0x46>
	...

08004f78 <_svfiprintf_r>:
 8004f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7c:	4698      	mov	r8, r3
 8004f7e:	898b      	ldrh	r3, [r1, #12]
 8004f80:	061b      	lsls	r3, r3, #24
 8004f82:	b09d      	sub	sp, #116	; 0x74
 8004f84:	4607      	mov	r7, r0
 8004f86:	460d      	mov	r5, r1
 8004f88:	4614      	mov	r4, r2
 8004f8a:	d50e      	bpl.n	8004faa <_svfiprintf_r+0x32>
 8004f8c:	690b      	ldr	r3, [r1, #16]
 8004f8e:	b963      	cbnz	r3, 8004faa <_svfiprintf_r+0x32>
 8004f90:	2140      	movs	r1, #64	; 0x40
 8004f92:	f000 fb19 	bl	80055c8 <_malloc_r>
 8004f96:	6028      	str	r0, [r5, #0]
 8004f98:	6128      	str	r0, [r5, #16]
 8004f9a:	b920      	cbnz	r0, 8004fa6 <_svfiprintf_r+0x2e>
 8004f9c:	230c      	movs	r3, #12
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa4:	e0d1      	b.n	800514a <_svfiprintf_r+0x1d2>
 8004fa6:	2340      	movs	r3, #64	; 0x40
 8004fa8:	616b      	str	r3, [r5, #20]
 8004faa:	2300      	movs	r3, #0
 8004fac:	9309      	str	r3, [sp, #36]	; 0x24
 8004fae:	2320      	movs	r3, #32
 8004fb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fb8:	2330      	movs	r3, #48	; 0x30
 8004fba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005164 <_svfiprintf_r+0x1ec>
 8004fbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fc2:	f04f 0901 	mov.w	r9, #1
 8004fc6:	4623      	mov	r3, r4
 8004fc8:	469a      	mov	sl, r3
 8004fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fce:	b10a      	cbz	r2, 8004fd4 <_svfiprintf_r+0x5c>
 8004fd0:	2a25      	cmp	r2, #37	; 0x25
 8004fd2:	d1f9      	bne.n	8004fc8 <_svfiprintf_r+0x50>
 8004fd4:	ebba 0b04 	subs.w	fp, sl, r4
 8004fd8:	d00b      	beq.n	8004ff2 <_svfiprintf_r+0x7a>
 8004fda:	465b      	mov	r3, fp
 8004fdc:	4622      	mov	r2, r4
 8004fde:	4629      	mov	r1, r5
 8004fe0:	4638      	mov	r0, r7
 8004fe2:	f7ff ff6d 	bl	8004ec0 <__ssputs_r>
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	f000 80aa 	beq.w	8005140 <_svfiprintf_r+0x1c8>
 8004fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fee:	445a      	add	r2, fp
 8004ff0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 80a2 	beq.w	8005140 <_svfiprintf_r+0x1c8>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8005002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005006:	f10a 0a01 	add.w	sl, sl, #1
 800500a:	9304      	str	r3, [sp, #16]
 800500c:	9307      	str	r3, [sp, #28]
 800500e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005012:	931a      	str	r3, [sp, #104]	; 0x68
 8005014:	4654      	mov	r4, sl
 8005016:	2205      	movs	r2, #5
 8005018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800501c:	4851      	ldr	r0, [pc, #324]	; (8005164 <_svfiprintf_r+0x1ec>)
 800501e:	f7fb f8df 	bl	80001e0 <memchr>
 8005022:	9a04      	ldr	r2, [sp, #16]
 8005024:	b9d8      	cbnz	r0, 800505e <_svfiprintf_r+0xe6>
 8005026:	06d0      	lsls	r0, r2, #27
 8005028:	bf44      	itt	mi
 800502a:	2320      	movmi	r3, #32
 800502c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005030:	0711      	lsls	r1, r2, #28
 8005032:	bf44      	itt	mi
 8005034:	232b      	movmi	r3, #43	; 0x2b
 8005036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800503a:	f89a 3000 	ldrb.w	r3, [sl]
 800503e:	2b2a      	cmp	r3, #42	; 0x2a
 8005040:	d015      	beq.n	800506e <_svfiprintf_r+0xf6>
 8005042:	9a07      	ldr	r2, [sp, #28]
 8005044:	4654      	mov	r4, sl
 8005046:	2000      	movs	r0, #0
 8005048:	f04f 0c0a 	mov.w	ip, #10
 800504c:	4621      	mov	r1, r4
 800504e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005052:	3b30      	subs	r3, #48	; 0x30
 8005054:	2b09      	cmp	r3, #9
 8005056:	d94e      	bls.n	80050f6 <_svfiprintf_r+0x17e>
 8005058:	b1b0      	cbz	r0, 8005088 <_svfiprintf_r+0x110>
 800505a:	9207      	str	r2, [sp, #28]
 800505c:	e014      	b.n	8005088 <_svfiprintf_r+0x110>
 800505e:	eba0 0308 	sub.w	r3, r0, r8
 8005062:	fa09 f303 	lsl.w	r3, r9, r3
 8005066:	4313      	orrs	r3, r2
 8005068:	9304      	str	r3, [sp, #16]
 800506a:	46a2      	mov	sl, r4
 800506c:	e7d2      	b.n	8005014 <_svfiprintf_r+0x9c>
 800506e:	9b03      	ldr	r3, [sp, #12]
 8005070:	1d19      	adds	r1, r3, #4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	9103      	str	r1, [sp, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	bfbb      	ittet	lt
 800507a:	425b      	neglt	r3, r3
 800507c:	f042 0202 	orrlt.w	r2, r2, #2
 8005080:	9307      	strge	r3, [sp, #28]
 8005082:	9307      	strlt	r3, [sp, #28]
 8005084:	bfb8      	it	lt
 8005086:	9204      	strlt	r2, [sp, #16]
 8005088:	7823      	ldrb	r3, [r4, #0]
 800508a:	2b2e      	cmp	r3, #46	; 0x2e
 800508c:	d10c      	bne.n	80050a8 <_svfiprintf_r+0x130>
 800508e:	7863      	ldrb	r3, [r4, #1]
 8005090:	2b2a      	cmp	r3, #42	; 0x2a
 8005092:	d135      	bne.n	8005100 <_svfiprintf_r+0x188>
 8005094:	9b03      	ldr	r3, [sp, #12]
 8005096:	1d1a      	adds	r2, r3, #4
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	9203      	str	r2, [sp, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	bfb8      	it	lt
 80050a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80050a4:	3402      	adds	r4, #2
 80050a6:	9305      	str	r3, [sp, #20]
 80050a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005174 <_svfiprintf_r+0x1fc>
 80050ac:	7821      	ldrb	r1, [r4, #0]
 80050ae:	2203      	movs	r2, #3
 80050b0:	4650      	mov	r0, sl
 80050b2:	f7fb f895 	bl	80001e0 <memchr>
 80050b6:	b140      	cbz	r0, 80050ca <_svfiprintf_r+0x152>
 80050b8:	2340      	movs	r3, #64	; 0x40
 80050ba:	eba0 000a 	sub.w	r0, r0, sl
 80050be:	fa03 f000 	lsl.w	r0, r3, r0
 80050c2:	9b04      	ldr	r3, [sp, #16]
 80050c4:	4303      	orrs	r3, r0
 80050c6:	3401      	adds	r4, #1
 80050c8:	9304      	str	r3, [sp, #16]
 80050ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ce:	4826      	ldr	r0, [pc, #152]	; (8005168 <_svfiprintf_r+0x1f0>)
 80050d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050d4:	2206      	movs	r2, #6
 80050d6:	f7fb f883 	bl	80001e0 <memchr>
 80050da:	2800      	cmp	r0, #0
 80050dc:	d038      	beq.n	8005150 <_svfiprintf_r+0x1d8>
 80050de:	4b23      	ldr	r3, [pc, #140]	; (800516c <_svfiprintf_r+0x1f4>)
 80050e0:	bb1b      	cbnz	r3, 800512a <_svfiprintf_r+0x1b2>
 80050e2:	9b03      	ldr	r3, [sp, #12]
 80050e4:	3307      	adds	r3, #7
 80050e6:	f023 0307 	bic.w	r3, r3, #7
 80050ea:	3308      	adds	r3, #8
 80050ec:	9303      	str	r3, [sp, #12]
 80050ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f0:	4433      	add	r3, r6
 80050f2:	9309      	str	r3, [sp, #36]	; 0x24
 80050f4:	e767      	b.n	8004fc6 <_svfiprintf_r+0x4e>
 80050f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80050fa:	460c      	mov	r4, r1
 80050fc:	2001      	movs	r0, #1
 80050fe:	e7a5      	b.n	800504c <_svfiprintf_r+0xd4>
 8005100:	2300      	movs	r3, #0
 8005102:	3401      	adds	r4, #1
 8005104:	9305      	str	r3, [sp, #20]
 8005106:	4619      	mov	r1, r3
 8005108:	f04f 0c0a 	mov.w	ip, #10
 800510c:	4620      	mov	r0, r4
 800510e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005112:	3a30      	subs	r2, #48	; 0x30
 8005114:	2a09      	cmp	r2, #9
 8005116:	d903      	bls.n	8005120 <_svfiprintf_r+0x1a8>
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0c5      	beq.n	80050a8 <_svfiprintf_r+0x130>
 800511c:	9105      	str	r1, [sp, #20]
 800511e:	e7c3      	b.n	80050a8 <_svfiprintf_r+0x130>
 8005120:	fb0c 2101 	mla	r1, ip, r1, r2
 8005124:	4604      	mov	r4, r0
 8005126:	2301      	movs	r3, #1
 8005128:	e7f0      	b.n	800510c <_svfiprintf_r+0x194>
 800512a:	ab03      	add	r3, sp, #12
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	462a      	mov	r2, r5
 8005130:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <_svfiprintf_r+0x1f8>)
 8005132:	a904      	add	r1, sp, #16
 8005134:	4638      	mov	r0, r7
 8005136:	f3af 8000 	nop.w
 800513a:	1c42      	adds	r2, r0, #1
 800513c:	4606      	mov	r6, r0
 800513e:	d1d6      	bne.n	80050ee <_svfiprintf_r+0x176>
 8005140:	89ab      	ldrh	r3, [r5, #12]
 8005142:	065b      	lsls	r3, r3, #25
 8005144:	f53f af2c 	bmi.w	8004fa0 <_svfiprintf_r+0x28>
 8005148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800514a:	b01d      	add	sp, #116	; 0x74
 800514c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005150:	ab03      	add	r3, sp, #12
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	462a      	mov	r2, r5
 8005156:	4b06      	ldr	r3, [pc, #24]	; (8005170 <_svfiprintf_r+0x1f8>)
 8005158:	a904      	add	r1, sp, #16
 800515a:	4638      	mov	r0, r7
 800515c:	f000 f87a 	bl	8005254 <_printf_i>
 8005160:	e7eb      	b.n	800513a <_svfiprintf_r+0x1c2>
 8005162:	bf00      	nop
 8005164:	080063d8 	.word	0x080063d8
 8005168:	080063e2 	.word	0x080063e2
 800516c:	00000000 	.word	0x00000000
 8005170:	08004ec1 	.word	0x08004ec1
 8005174:	080063de 	.word	0x080063de

08005178 <_printf_common>:
 8005178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800517c:	4616      	mov	r6, r2
 800517e:	4699      	mov	r9, r3
 8005180:	688a      	ldr	r2, [r1, #8]
 8005182:	690b      	ldr	r3, [r1, #16]
 8005184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005188:	4293      	cmp	r3, r2
 800518a:	bfb8      	it	lt
 800518c:	4613      	movlt	r3, r2
 800518e:	6033      	str	r3, [r6, #0]
 8005190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005194:	4607      	mov	r7, r0
 8005196:	460c      	mov	r4, r1
 8005198:	b10a      	cbz	r2, 800519e <_printf_common+0x26>
 800519a:	3301      	adds	r3, #1
 800519c:	6033      	str	r3, [r6, #0]
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	0699      	lsls	r1, r3, #26
 80051a2:	bf42      	ittt	mi
 80051a4:	6833      	ldrmi	r3, [r6, #0]
 80051a6:	3302      	addmi	r3, #2
 80051a8:	6033      	strmi	r3, [r6, #0]
 80051aa:	6825      	ldr	r5, [r4, #0]
 80051ac:	f015 0506 	ands.w	r5, r5, #6
 80051b0:	d106      	bne.n	80051c0 <_printf_common+0x48>
 80051b2:	f104 0a19 	add.w	sl, r4, #25
 80051b6:	68e3      	ldr	r3, [r4, #12]
 80051b8:	6832      	ldr	r2, [r6, #0]
 80051ba:	1a9b      	subs	r3, r3, r2
 80051bc:	42ab      	cmp	r3, r5
 80051be:	dc26      	bgt.n	800520e <_printf_common+0x96>
 80051c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051c4:	1e13      	subs	r3, r2, #0
 80051c6:	6822      	ldr	r2, [r4, #0]
 80051c8:	bf18      	it	ne
 80051ca:	2301      	movne	r3, #1
 80051cc:	0692      	lsls	r2, r2, #26
 80051ce:	d42b      	bmi.n	8005228 <_printf_common+0xb0>
 80051d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051d4:	4649      	mov	r1, r9
 80051d6:	4638      	mov	r0, r7
 80051d8:	47c0      	blx	r8
 80051da:	3001      	adds	r0, #1
 80051dc:	d01e      	beq.n	800521c <_printf_common+0xa4>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	68e5      	ldr	r5, [r4, #12]
 80051e2:	6832      	ldr	r2, [r6, #0]
 80051e4:	f003 0306 	and.w	r3, r3, #6
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	bf08      	it	eq
 80051ec:	1aad      	subeq	r5, r5, r2
 80051ee:	68a3      	ldr	r3, [r4, #8]
 80051f0:	6922      	ldr	r2, [r4, #16]
 80051f2:	bf0c      	ite	eq
 80051f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051f8:	2500      	movne	r5, #0
 80051fa:	4293      	cmp	r3, r2
 80051fc:	bfc4      	itt	gt
 80051fe:	1a9b      	subgt	r3, r3, r2
 8005200:	18ed      	addgt	r5, r5, r3
 8005202:	2600      	movs	r6, #0
 8005204:	341a      	adds	r4, #26
 8005206:	42b5      	cmp	r5, r6
 8005208:	d11a      	bne.n	8005240 <_printf_common+0xc8>
 800520a:	2000      	movs	r0, #0
 800520c:	e008      	b.n	8005220 <_printf_common+0xa8>
 800520e:	2301      	movs	r3, #1
 8005210:	4652      	mov	r2, sl
 8005212:	4649      	mov	r1, r9
 8005214:	4638      	mov	r0, r7
 8005216:	47c0      	blx	r8
 8005218:	3001      	adds	r0, #1
 800521a:	d103      	bne.n	8005224 <_printf_common+0xac>
 800521c:	f04f 30ff 	mov.w	r0, #4294967295
 8005220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005224:	3501      	adds	r5, #1
 8005226:	e7c6      	b.n	80051b6 <_printf_common+0x3e>
 8005228:	18e1      	adds	r1, r4, r3
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	2030      	movs	r0, #48	; 0x30
 800522e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005232:	4422      	add	r2, r4
 8005234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800523c:	3302      	adds	r3, #2
 800523e:	e7c7      	b.n	80051d0 <_printf_common+0x58>
 8005240:	2301      	movs	r3, #1
 8005242:	4622      	mov	r2, r4
 8005244:	4649      	mov	r1, r9
 8005246:	4638      	mov	r0, r7
 8005248:	47c0      	blx	r8
 800524a:	3001      	adds	r0, #1
 800524c:	d0e6      	beq.n	800521c <_printf_common+0xa4>
 800524e:	3601      	adds	r6, #1
 8005250:	e7d9      	b.n	8005206 <_printf_common+0x8e>
	...

08005254 <_printf_i>:
 8005254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005258:	7e0f      	ldrb	r7, [r1, #24]
 800525a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800525c:	2f78      	cmp	r7, #120	; 0x78
 800525e:	4691      	mov	r9, r2
 8005260:	4680      	mov	r8, r0
 8005262:	460c      	mov	r4, r1
 8005264:	469a      	mov	sl, r3
 8005266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800526a:	d807      	bhi.n	800527c <_printf_i+0x28>
 800526c:	2f62      	cmp	r7, #98	; 0x62
 800526e:	d80a      	bhi.n	8005286 <_printf_i+0x32>
 8005270:	2f00      	cmp	r7, #0
 8005272:	f000 80d8 	beq.w	8005426 <_printf_i+0x1d2>
 8005276:	2f58      	cmp	r7, #88	; 0x58
 8005278:	f000 80a3 	beq.w	80053c2 <_printf_i+0x16e>
 800527c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005284:	e03a      	b.n	80052fc <_printf_i+0xa8>
 8005286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800528a:	2b15      	cmp	r3, #21
 800528c:	d8f6      	bhi.n	800527c <_printf_i+0x28>
 800528e:	a101      	add	r1, pc, #4	; (adr r1, 8005294 <_printf_i+0x40>)
 8005290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005294:	080052ed 	.word	0x080052ed
 8005298:	08005301 	.word	0x08005301
 800529c:	0800527d 	.word	0x0800527d
 80052a0:	0800527d 	.word	0x0800527d
 80052a4:	0800527d 	.word	0x0800527d
 80052a8:	0800527d 	.word	0x0800527d
 80052ac:	08005301 	.word	0x08005301
 80052b0:	0800527d 	.word	0x0800527d
 80052b4:	0800527d 	.word	0x0800527d
 80052b8:	0800527d 	.word	0x0800527d
 80052bc:	0800527d 	.word	0x0800527d
 80052c0:	0800540d 	.word	0x0800540d
 80052c4:	08005331 	.word	0x08005331
 80052c8:	080053ef 	.word	0x080053ef
 80052cc:	0800527d 	.word	0x0800527d
 80052d0:	0800527d 	.word	0x0800527d
 80052d4:	0800542f 	.word	0x0800542f
 80052d8:	0800527d 	.word	0x0800527d
 80052dc:	08005331 	.word	0x08005331
 80052e0:	0800527d 	.word	0x0800527d
 80052e4:	0800527d 	.word	0x0800527d
 80052e8:	080053f7 	.word	0x080053f7
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	1d1a      	adds	r2, r3, #4
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	602a      	str	r2, [r5, #0]
 80052f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0a3      	b.n	8005448 <_printf_i+0x1f4>
 8005300:	6820      	ldr	r0, [r4, #0]
 8005302:	6829      	ldr	r1, [r5, #0]
 8005304:	0606      	lsls	r6, r0, #24
 8005306:	f101 0304 	add.w	r3, r1, #4
 800530a:	d50a      	bpl.n	8005322 <_printf_i+0xce>
 800530c:	680e      	ldr	r6, [r1, #0]
 800530e:	602b      	str	r3, [r5, #0]
 8005310:	2e00      	cmp	r6, #0
 8005312:	da03      	bge.n	800531c <_printf_i+0xc8>
 8005314:	232d      	movs	r3, #45	; 0x2d
 8005316:	4276      	negs	r6, r6
 8005318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800531c:	485e      	ldr	r0, [pc, #376]	; (8005498 <_printf_i+0x244>)
 800531e:	230a      	movs	r3, #10
 8005320:	e019      	b.n	8005356 <_printf_i+0x102>
 8005322:	680e      	ldr	r6, [r1, #0]
 8005324:	602b      	str	r3, [r5, #0]
 8005326:	f010 0f40 	tst.w	r0, #64	; 0x40
 800532a:	bf18      	it	ne
 800532c:	b236      	sxthne	r6, r6
 800532e:	e7ef      	b.n	8005310 <_printf_i+0xbc>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	6820      	ldr	r0, [r4, #0]
 8005334:	1d19      	adds	r1, r3, #4
 8005336:	6029      	str	r1, [r5, #0]
 8005338:	0601      	lsls	r1, r0, #24
 800533a:	d501      	bpl.n	8005340 <_printf_i+0xec>
 800533c:	681e      	ldr	r6, [r3, #0]
 800533e:	e002      	b.n	8005346 <_printf_i+0xf2>
 8005340:	0646      	lsls	r6, r0, #25
 8005342:	d5fb      	bpl.n	800533c <_printf_i+0xe8>
 8005344:	881e      	ldrh	r6, [r3, #0]
 8005346:	4854      	ldr	r0, [pc, #336]	; (8005498 <_printf_i+0x244>)
 8005348:	2f6f      	cmp	r7, #111	; 0x6f
 800534a:	bf0c      	ite	eq
 800534c:	2308      	moveq	r3, #8
 800534e:	230a      	movne	r3, #10
 8005350:	2100      	movs	r1, #0
 8005352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005356:	6865      	ldr	r5, [r4, #4]
 8005358:	60a5      	str	r5, [r4, #8]
 800535a:	2d00      	cmp	r5, #0
 800535c:	bfa2      	ittt	ge
 800535e:	6821      	ldrge	r1, [r4, #0]
 8005360:	f021 0104 	bicge.w	r1, r1, #4
 8005364:	6021      	strge	r1, [r4, #0]
 8005366:	b90e      	cbnz	r6, 800536c <_printf_i+0x118>
 8005368:	2d00      	cmp	r5, #0
 800536a:	d04d      	beq.n	8005408 <_printf_i+0x1b4>
 800536c:	4615      	mov	r5, r2
 800536e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005372:	fb03 6711 	mls	r7, r3, r1, r6
 8005376:	5dc7      	ldrb	r7, [r0, r7]
 8005378:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800537c:	4637      	mov	r7, r6
 800537e:	42bb      	cmp	r3, r7
 8005380:	460e      	mov	r6, r1
 8005382:	d9f4      	bls.n	800536e <_printf_i+0x11a>
 8005384:	2b08      	cmp	r3, #8
 8005386:	d10b      	bne.n	80053a0 <_printf_i+0x14c>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	07de      	lsls	r6, r3, #31
 800538c:	d508      	bpl.n	80053a0 <_printf_i+0x14c>
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	6861      	ldr	r1, [r4, #4]
 8005392:	4299      	cmp	r1, r3
 8005394:	bfde      	ittt	le
 8005396:	2330      	movle	r3, #48	; 0x30
 8005398:	f805 3c01 	strble.w	r3, [r5, #-1]
 800539c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053a0:	1b52      	subs	r2, r2, r5
 80053a2:	6122      	str	r2, [r4, #16]
 80053a4:	f8cd a000 	str.w	sl, [sp]
 80053a8:	464b      	mov	r3, r9
 80053aa:	aa03      	add	r2, sp, #12
 80053ac:	4621      	mov	r1, r4
 80053ae:	4640      	mov	r0, r8
 80053b0:	f7ff fee2 	bl	8005178 <_printf_common>
 80053b4:	3001      	adds	r0, #1
 80053b6:	d14c      	bne.n	8005452 <_printf_i+0x1fe>
 80053b8:	f04f 30ff 	mov.w	r0, #4294967295
 80053bc:	b004      	add	sp, #16
 80053be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c2:	4835      	ldr	r0, [pc, #212]	; (8005498 <_printf_i+0x244>)
 80053c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053c8:	6829      	ldr	r1, [r5, #0]
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80053d0:	6029      	str	r1, [r5, #0]
 80053d2:	061d      	lsls	r5, r3, #24
 80053d4:	d514      	bpl.n	8005400 <_printf_i+0x1ac>
 80053d6:	07df      	lsls	r7, r3, #31
 80053d8:	bf44      	itt	mi
 80053da:	f043 0320 	orrmi.w	r3, r3, #32
 80053de:	6023      	strmi	r3, [r4, #0]
 80053e0:	b91e      	cbnz	r6, 80053ea <_printf_i+0x196>
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	f023 0320 	bic.w	r3, r3, #32
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	2310      	movs	r3, #16
 80053ec:	e7b0      	b.n	8005350 <_printf_i+0xfc>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	f043 0320 	orr.w	r3, r3, #32
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	2378      	movs	r3, #120	; 0x78
 80053f8:	4828      	ldr	r0, [pc, #160]	; (800549c <_printf_i+0x248>)
 80053fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053fe:	e7e3      	b.n	80053c8 <_printf_i+0x174>
 8005400:	0659      	lsls	r1, r3, #25
 8005402:	bf48      	it	mi
 8005404:	b2b6      	uxthmi	r6, r6
 8005406:	e7e6      	b.n	80053d6 <_printf_i+0x182>
 8005408:	4615      	mov	r5, r2
 800540a:	e7bb      	b.n	8005384 <_printf_i+0x130>
 800540c:	682b      	ldr	r3, [r5, #0]
 800540e:	6826      	ldr	r6, [r4, #0]
 8005410:	6961      	ldr	r1, [r4, #20]
 8005412:	1d18      	adds	r0, r3, #4
 8005414:	6028      	str	r0, [r5, #0]
 8005416:	0635      	lsls	r5, r6, #24
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	d501      	bpl.n	8005420 <_printf_i+0x1cc>
 800541c:	6019      	str	r1, [r3, #0]
 800541e:	e002      	b.n	8005426 <_printf_i+0x1d2>
 8005420:	0670      	lsls	r0, r6, #25
 8005422:	d5fb      	bpl.n	800541c <_printf_i+0x1c8>
 8005424:	8019      	strh	r1, [r3, #0]
 8005426:	2300      	movs	r3, #0
 8005428:	6123      	str	r3, [r4, #16]
 800542a:	4615      	mov	r5, r2
 800542c:	e7ba      	b.n	80053a4 <_printf_i+0x150>
 800542e:	682b      	ldr	r3, [r5, #0]
 8005430:	1d1a      	adds	r2, r3, #4
 8005432:	602a      	str	r2, [r5, #0]
 8005434:	681d      	ldr	r5, [r3, #0]
 8005436:	6862      	ldr	r2, [r4, #4]
 8005438:	2100      	movs	r1, #0
 800543a:	4628      	mov	r0, r5
 800543c:	f7fa fed0 	bl	80001e0 <memchr>
 8005440:	b108      	cbz	r0, 8005446 <_printf_i+0x1f2>
 8005442:	1b40      	subs	r0, r0, r5
 8005444:	6060      	str	r0, [r4, #4]
 8005446:	6863      	ldr	r3, [r4, #4]
 8005448:	6123      	str	r3, [r4, #16]
 800544a:	2300      	movs	r3, #0
 800544c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005450:	e7a8      	b.n	80053a4 <_printf_i+0x150>
 8005452:	6923      	ldr	r3, [r4, #16]
 8005454:	462a      	mov	r2, r5
 8005456:	4649      	mov	r1, r9
 8005458:	4640      	mov	r0, r8
 800545a:	47d0      	blx	sl
 800545c:	3001      	adds	r0, #1
 800545e:	d0ab      	beq.n	80053b8 <_printf_i+0x164>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	079b      	lsls	r3, r3, #30
 8005464:	d413      	bmi.n	800548e <_printf_i+0x23a>
 8005466:	68e0      	ldr	r0, [r4, #12]
 8005468:	9b03      	ldr	r3, [sp, #12]
 800546a:	4298      	cmp	r0, r3
 800546c:	bfb8      	it	lt
 800546e:	4618      	movlt	r0, r3
 8005470:	e7a4      	b.n	80053bc <_printf_i+0x168>
 8005472:	2301      	movs	r3, #1
 8005474:	4632      	mov	r2, r6
 8005476:	4649      	mov	r1, r9
 8005478:	4640      	mov	r0, r8
 800547a:	47d0      	blx	sl
 800547c:	3001      	adds	r0, #1
 800547e:	d09b      	beq.n	80053b8 <_printf_i+0x164>
 8005480:	3501      	adds	r5, #1
 8005482:	68e3      	ldr	r3, [r4, #12]
 8005484:	9903      	ldr	r1, [sp, #12]
 8005486:	1a5b      	subs	r3, r3, r1
 8005488:	42ab      	cmp	r3, r5
 800548a:	dcf2      	bgt.n	8005472 <_printf_i+0x21e>
 800548c:	e7eb      	b.n	8005466 <_printf_i+0x212>
 800548e:	2500      	movs	r5, #0
 8005490:	f104 0619 	add.w	r6, r4, #25
 8005494:	e7f5      	b.n	8005482 <_printf_i+0x22e>
 8005496:	bf00      	nop
 8005498:	080063e9 	.word	0x080063e9
 800549c:	080063fa 	.word	0x080063fa

080054a0 <memcpy>:
 80054a0:	440a      	add	r2, r1
 80054a2:	4291      	cmp	r1, r2
 80054a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80054a8:	d100      	bne.n	80054ac <memcpy+0xc>
 80054aa:	4770      	bx	lr
 80054ac:	b510      	push	{r4, lr}
 80054ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054b6:	4291      	cmp	r1, r2
 80054b8:	d1f9      	bne.n	80054ae <memcpy+0xe>
 80054ba:	bd10      	pop	{r4, pc}

080054bc <memmove>:
 80054bc:	4288      	cmp	r0, r1
 80054be:	b510      	push	{r4, lr}
 80054c0:	eb01 0402 	add.w	r4, r1, r2
 80054c4:	d902      	bls.n	80054cc <memmove+0x10>
 80054c6:	4284      	cmp	r4, r0
 80054c8:	4623      	mov	r3, r4
 80054ca:	d807      	bhi.n	80054dc <memmove+0x20>
 80054cc:	1e43      	subs	r3, r0, #1
 80054ce:	42a1      	cmp	r1, r4
 80054d0:	d008      	beq.n	80054e4 <memmove+0x28>
 80054d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054da:	e7f8      	b.n	80054ce <memmove+0x12>
 80054dc:	4402      	add	r2, r0
 80054de:	4601      	mov	r1, r0
 80054e0:	428a      	cmp	r2, r1
 80054e2:	d100      	bne.n	80054e6 <memmove+0x2a>
 80054e4:	bd10      	pop	{r4, pc}
 80054e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054ee:	e7f7      	b.n	80054e0 <memmove+0x24>

080054f0 <_free_r>:
 80054f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054f2:	2900      	cmp	r1, #0
 80054f4:	d044      	beq.n	8005580 <_free_r+0x90>
 80054f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054fa:	9001      	str	r0, [sp, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005502:	bfb8      	it	lt
 8005504:	18e4      	addlt	r4, r4, r3
 8005506:	f000 f913 	bl	8005730 <__malloc_lock>
 800550a:	4a1e      	ldr	r2, [pc, #120]	; (8005584 <_free_r+0x94>)
 800550c:	9801      	ldr	r0, [sp, #4]
 800550e:	6813      	ldr	r3, [r2, #0]
 8005510:	b933      	cbnz	r3, 8005520 <_free_r+0x30>
 8005512:	6063      	str	r3, [r4, #4]
 8005514:	6014      	str	r4, [r2, #0]
 8005516:	b003      	add	sp, #12
 8005518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800551c:	f000 b90e 	b.w	800573c <__malloc_unlock>
 8005520:	42a3      	cmp	r3, r4
 8005522:	d908      	bls.n	8005536 <_free_r+0x46>
 8005524:	6825      	ldr	r5, [r4, #0]
 8005526:	1961      	adds	r1, r4, r5
 8005528:	428b      	cmp	r3, r1
 800552a:	bf01      	itttt	eq
 800552c:	6819      	ldreq	r1, [r3, #0]
 800552e:	685b      	ldreq	r3, [r3, #4]
 8005530:	1949      	addeq	r1, r1, r5
 8005532:	6021      	streq	r1, [r4, #0]
 8005534:	e7ed      	b.n	8005512 <_free_r+0x22>
 8005536:	461a      	mov	r2, r3
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	b10b      	cbz	r3, 8005540 <_free_r+0x50>
 800553c:	42a3      	cmp	r3, r4
 800553e:	d9fa      	bls.n	8005536 <_free_r+0x46>
 8005540:	6811      	ldr	r1, [r2, #0]
 8005542:	1855      	adds	r5, r2, r1
 8005544:	42a5      	cmp	r5, r4
 8005546:	d10b      	bne.n	8005560 <_free_r+0x70>
 8005548:	6824      	ldr	r4, [r4, #0]
 800554a:	4421      	add	r1, r4
 800554c:	1854      	adds	r4, r2, r1
 800554e:	42a3      	cmp	r3, r4
 8005550:	6011      	str	r1, [r2, #0]
 8005552:	d1e0      	bne.n	8005516 <_free_r+0x26>
 8005554:	681c      	ldr	r4, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	6053      	str	r3, [r2, #4]
 800555a:	4421      	add	r1, r4
 800555c:	6011      	str	r1, [r2, #0]
 800555e:	e7da      	b.n	8005516 <_free_r+0x26>
 8005560:	d902      	bls.n	8005568 <_free_r+0x78>
 8005562:	230c      	movs	r3, #12
 8005564:	6003      	str	r3, [r0, #0]
 8005566:	e7d6      	b.n	8005516 <_free_r+0x26>
 8005568:	6825      	ldr	r5, [r4, #0]
 800556a:	1961      	adds	r1, r4, r5
 800556c:	428b      	cmp	r3, r1
 800556e:	bf04      	itt	eq
 8005570:	6819      	ldreq	r1, [r3, #0]
 8005572:	685b      	ldreq	r3, [r3, #4]
 8005574:	6063      	str	r3, [r4, #4]
 8005576:	bf04      	itt	eq
 8005578:	1949      	addeq	r1, r1, r5
 800557a:	6021      	streq	r1, [r4, #0]
 800557c:	6054      	str	r4, [r2, #4]
 800557e:	e7ca      	b.n	8005516 <_free_r+0x26>
 8005580:	b003      	add	sp, #12
 8005582:	bd30      	pop	{r4, r5, pc}
 8005584:	2000027c 	.word	0x2000027c

08005588 <sbrk_aligned>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	4e0e      	ldr	r6, [pc, #56]	; (80055c4 <sbrk_aligned+0x3c>)
 800558c:	460c      	mov	r4, r1
 800558e:	6831      	ldr	r1, [r6, #0]
 8005590:	4605      	mov	r5, r0
 8005592:	b911      	cbnz	r1, 800559a <sbrk_aligned+0x12>
 8005594:	f000 f8bc 	bl	8005710 <_sbrk_r>
 8005598:	6030      	str	r0, [r6, #0]
 800559a:	4621      	mov	r1, r4
 800559c:	4628      	mov	r0, r5
 800559e:	f000 f8b7 	bl	8005710 <_sbrk_r>
 80055a2:	1c43      	adds	r3, r0, #1
 80055a4:	d00a      	beq.n	80055bc <sbrk_aligned+0x34>
 80055a6:	1cc4      	adds	r4, r0, #3
 80055a8:	f024 0403 	bic.w	r4, r4, #3
 80055ac:	42a0      	cmp	r0, r4
 80055ae:	d007      	beq.n	80055c0 <sbrk_aligned+0x38>
 80055b0:	1a21      	subs	r1, r4, r0
 80055b2:	4628      	mov	r0, r5
 80055b4:	f000 f8ac 	bl	8005710 <_sbrk_r>
 80055b8:	3001      	adds	r0, #1
 80055ba:	d101      	bne.n	80055c0 <sbrk_aligned+0x38>
 80055bc:	f04f 34ff 	mov.w	r4, #4294967295
 80055c0:	4620      	mov	r0, r4
 80055c2:	bd70      	pop	{r4, r5, r6, pc}
 80055c4:	20000280 	.word	0x20000280

080055c8 <_malloc_r>:
 80055c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055cc:	1ccd      	adds	r5, r1, #3
 80055ce:	f025 0503 	bic.w	r5, r5, #3
 80055d2:	3508      	adds	r5, #8
 80055d4:	2d0c      	cmp	r5, #12
 80055d6:	bf38      	it	cc
 80055d8:	250c      	movcc	r5, #12
 80055da:	2d00      	cmp	r5, #0
 80055dc:	4607      	mov	r7, r0
 80055de:	db01      	blt.n	80055e4 <_malloc_r+0x1c>
 80055e0:	42a9      	cmp	r1, r5
 80055e2:	d905      	bls.n	80055f0 <_malloc_r+0x28>
 80055e4:	230c      	movs	r3, #12
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	2600      	movs	r6, #0
 80055ea:	4630      	mov	r0, r6
 80055ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055f0:	4e2e      	ldr	r6, [pc, #184]	; (80056ac <_malloc_r+0xe4>)
 80055f2:	f000 f89d 	bl	8005730 <__malloc_lock>
 80055f6:	6833      	ldr	r3, [r6, #0]
 80055f8:	461c      	mov	r4, r3
 80055fa:	bb34      	cbnz	r4, 800564a <_malloc_r+0x82>
 80055fc:	4629      	mov	r1, r5
 80055fe:	4638      	mov	r0, r7
 8005600:	f7ff ffc2 	bl	8005588 <sbrk_aligned>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	4604      	mov	r4, r0
 8005608:	d14d      	bne.n	80056a6 <_malloc_r+0xde>
 800560a:	6834      	ldr	r4, [r6, #0]
 800560c:	4626      	mov	r6, r4
 800560e:	2e00      	cmp	r6, #0
 8005610:	d140      	bne.n	8005694 <_malloc_r+0xcc>
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	4631      	mov	r1, r6
 8005616:	4638      	mov	r0, r7
 8005618:	eb04 0803 	add.w	r8, r4, r3
 800561c:	f000 f878 	bl	8005710 <_sbrk_r>
 8005620:	4580      	cmp	r8, r0
 8005622:	d13a      	bne.n	800569a <_malloc_r+0xd2>
 8005624:	6821      	ldr	r1, [r4, #0]
 8005626:	3503      	adds	r5, #3
 8005628:	1a6d      	subs	r5, r5, r1
 800562a:	f025 0503 	bic.w	r5, r5, #3
 800562e:	3508      	adds	r5, #8
 8005630:	2d0c      	cmp	r5, #12
 8005632:	bf38      	it	cc
 8005634:	250c      	movcc	r5, #12
 8005636:	4629      	mov	r1, r5
 8005638:	4638      	mov	r0, r7
 800563a:	f7ff ffa5 	bl	8005588 <sbrk_aligned>
 800563e:	3001      	adds	r0, #1
 8005640:	d02b      	beq.n	800569a <_malloc_r+0xd2>
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	442b      	add	r3, r5
 8005646:	6023      	str	r3, [r4, #0]
 8005648:	e00e      	b.n	8005668 <_malloc_r+0xa0>
 800564a:	6822      	ldr	r2, [r4, #0]
 800564c:	1b52      	subs	r2, r2, r5
 800564e:	d41e      	bmi.n	800568e <_malloc_r+0xc6>
 8005650:	2a0b      	cmp	r2, #11
 8005652:	d916      	bls.n	8005682 <_malloc_r+0xba>
 8005654:	1961      	adds	r1, r4, r5
 8005656:	42a3      	cmp	r3, r4
 8005658:	6025      	str	r5, [r4, #0]
 800565a:	bf18      	it	ne
 800565c:	6059      	strne	r1, [r3, #4]
 800565e:	6863      	ldr	r3, [r4, #4]
 8005660:	bf08      	it	eq
 8005662:	6031      	streq	r1, [r6, #0]
 8005664:	5162      	str	r2, [r4, r5]
 8005666:	604b      	str	r3, [r1, #4]
 8005668:	4638      	mov	r0, r7
 800566a:	f104 060b 	add.w	r6, r4, #11
 800566e:	f000 f865 	bl	800573c <__malloc_unlock>
 8005672:	f026 0607 	bic.w	r6, r6, #7
 8005676:	1d23      	adds	r3, r4, #4
 8005678:	1af2      	subs	r2, r6, r3
 800567a:	d0b6      	beq.n	80055ea <_malloc_r+0x22>
 800567c:	1b9b      	subs	r3, r3, r6
 800567e:	50a3      	str	r3, [r4, r2]
 8005680:	e7b3      	b.n	80055ea <_malloc_r+0x22>
 8005682:	6862      	ldr	r2, [r4, #4]
 8005684:	42a3      	cmp	r3, r4
 8005686:	bf0c      	ite	eq
 8005688:	6032      	streq	r2, [r6, #0]
 800568a:	605a      	strne	r2, [r3, #4]
 800568c:	e7ec      	b.n	8005668 <_malloc_r+0xa0>
 800568e:	4623      	mov	r3, r4
 8005690:	6864      	ldr	r4, [r4, #4]
 8005692:	e7b2      	b.n	80055fa <_malloc_r+0x32>
 8005694:	4634      	mov	r4, r6
 8005696:	6876      	ldr	r6, [r6, #4]
 8005698:	e7b9      	b.n	800560e <_malloc_r+0x46>
 800569a:	230c      	movs	r3, #12
 800569c:	603b      	str	r3, [r7, #0]
 800569e:	4638      	mov	r0, r7
 80056a0:	f000 f84c 	bl	800573c <__malloc_unlock>
 80056a4:	e7a1      	b.n	80055ea <_malloc_r+0x22>
 80056a6:	6025      	str	r5, [r4, #0]
 80056a8:	e7de      	b.n	8005668 <_malloc_r+0xa0>
 80056aa:	bf00      	nop
 80056ac:	2000027c 	.word	0x2000027c

080056b0 <_realloc_r>:
 80056b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b4:	4680      	mov	r8, r0
 80056b6:	4614      	mov	r4, r2
 80056b8:	460e      	mov	r6, r1
 80056ba:	b921      	cbnz	r1, 80056c6 <_realloc_r+0x16>
 80056bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056c0:	4611      	mov	r1, r2
 80056c2:	f7ff bf81 	b.w	80055c8 <_malloc_r>
 80056c6:	b92a      	cbnz	r2, 80056d4 <_realloc_r+0x24>
 80056c8:	f7ff ff12 	bl	80054f0 <_free_r>
 80056cc:	4625      	mov	r5, r4
 80056ce:	4628      	mov	r0, r5
 80056d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056d4:	f000 f838 	bl	8005748 <_malloc_usable_size_r>
 80056d8:	4284      	cmp	r4, r0
 80056da:	4607      	mov	r7, r0
 80056dc:	d802      	bhi.n	80056e4 <_realloc_r+0x34>
 80056de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056e2:	d812      	bhi.n	800570a <_realloc_r+0x5a>
 80056e4:	4621      	mov	r1, r4
 80056e6:	4640      	mov	r0, r8
 80056e8:	f7ff ff6e 	bl	80055c8 <_malloc_r>
 80056ec:	4605      	mov	r5, r0
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d0ed      	beq.n	80056ce <_realloc_r+0x1e>
 80056f2:	42bc      	cmp	r4, r7
 80056f4:	4622      	mov	r2, r4
 80056f6:	4631      	mov	r1, r6
 80056f8:	bf28      	it	cs
 80056fa:	463a      	movcs	r2, r7
 80056fc:	f7ff fed0 	bl	80054a0 <memcpy>
 8005700:	4631      	mov	r1, r6
 8005702:	4640      	mov	r0, r8
 8005704:	f7ff fef4 	bl	80054f0 <_free_r>
 8005708:	e7e1      	b.n	80056ce <_realloc_r+0x1e>
 800570a:	4635      	mov	r5, r6
 800570c:	e7df      	b.n	80056ce <_realloc_r+0x1e>
	...

08005710 <_sbrk_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	4d06      	ldr	r5, [pc, #24]	; (800572c <_sbrk_r+0x1c>)
 8005714:	2300      	movs	r3, #0
 8005716:	4604      	mov	r4, r0
 8005718:	4608      	mov	r0, r1
 800571a:	602b      	str	r3, [r5, #0]
 800571c:	f7fc fa88 	bl	8001c30 <_sbrk>
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	d102      	bne.n	800572a <_sbrk_r+0x1a>
 8005724:	682b      	ldr	r3, [r5, #0]
 8005726:	b103      	cbz	r3, 800572a <_sbrk_r+0x1a>
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	bd38      	pop	{r3, r4, r5, pc}
 800572c:	20000284 	.word	0x20000284

08005730 <__malloc_lock>:
 8005730:	4801      	ldr	r0, [pc, #4]	; (8005738 <__malloc_lock+0x8>)
 8005732:	f000 b811 	b.w	8005758 <__retarget_lock_acquire_recursive>
 8005736:	bf00      	nop
 8005738:	20000288 	.word	0x20000288

0800573c <__malloc_unlock>:
 800573c:	4801      	ldr	r0, [pc, #4]	; (8005744 <__malloc_unlock+0x8>)
 800573e:	f000 b80c 	b.w	800575a <__retarget_lock_release_recursive>
 8005742:	bf00      	nop
 8005744:	20000288 	.word	0x20000288

08005748 <_malloc_usable_size_r>:
 8005748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800574c:	1f18      	subs	r0, r3, #4
 800574e:	2b00      	cmp	r3, #0
 8005750:	bfbc      	itt	lt
 8005752:	580b      	ldrlt	r3, [r1, r0]
 8005754:	18c0      	addlt	r0, r0, r3
 8005756:	4770      	bx	lr

08005758 <__retarget_lock_acquire_recursive>:
 8005758:	4770      	bx	lr

0800575a <__retarget_lock_release_recursive>:
 800575a:	4770      	bx	lr

0800575c <_init>:
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575e:	bf00      	nop
 8005760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005762:	bc08      	pop	{r3}
 8005764:	469e      	mov	lr, r3
 8005766:	4770      	bx	lr

08005768 <_fini>:
 8005768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576a:	bf00      	nop
 800576c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576e:	bc08      	pop	{r3}
 8005770:	469e      	mov	lr, r3
 8005772:	4770      	bx	lr
